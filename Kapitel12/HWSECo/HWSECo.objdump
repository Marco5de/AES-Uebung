
HWSECo.elf:     file format elf32-littlenios2
HWSECo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0000f8a8 memsz 0x0000f8a8 flags r-x
    LOAD off    0x000108c8 vaddr 0x1000f8c8 paddr 0x100113bc align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00012eb0 vaddr 0x10012eb0 paddr 0x10012eb0 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f39c  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000370  1000f558  1000f558  00010558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  1000f8c8  100113bc  000108c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  10012eb0  10012eb0  00012eb0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000123bc  2**0
                  CONTENTS
  7 .sdram        00000000  1001300c  1001300c  000123bc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000123bc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ce8  00000000  00000000  000123e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024431  00000000  00000000  000130c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090fe  00000000  00000000  000374f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b1bb  00000000  00000000  000405f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002078  00000000  00000000  0004b7b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003208  00000000  00000000  0004d82c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016f65  00000000  00000000  00050a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0006799c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001370  00000000  00000000  000679b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006be1c  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006be1f  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006be2b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006be2c  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0006be2d  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0006be38  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0006be43  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0006be4e  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000025  00000000  00000000  0006be56  2**0
                  CONTENTS, READONLY
 27 .jdi          00003e44  00000000  00000000  0006be7b  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00034873  00000000  00000000  0006fcbf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
1000f558 l    d  .rodata	00000000 .rodata
1000f8c8 l    d  .rwdata	00000000 .rwdata
10012eb0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001300c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HWSECo_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000f60e l     O .rodata	00000010 zeroes.4181
1000f61e l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100027f0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004398 l     F .text	00000008 __fp_lock
100043a0 l     F .text	00000008 __fp_unlock
100043b4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1000f8c8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
1000fd0c l     O .rwdata	00000020 lc_ctype_charset
1000fcec l     O .rwdata	00000020 lc_message_charset
1000fd2c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1000f650 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10007a4c l     F .text	000000fc __sprint_r.part.0
1000f784 l     O .rodata	00000010 blanks.4125
1000f774 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000a550 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000cea0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000cfc8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000cff4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000d0fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000d1f8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000d2dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000d4c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100113ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000d744 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000d894 l     F .text	00000038 alt_dev_reg
10010314 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000db6c l     F .text	00000204 altera_avalon_jtag_uart_irq
1000dd70 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000e4ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000e984 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000eadc l     F .text	00000050 alt_get_errno
1000eb2c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10000424 g     F .text	00000018 putchar
10006f24 g     F .text	00000074 _mprec_log10
10007010 g     F .text	0000008c __any_on
100095e8 g     F .text	00000054 _isatty_r
1000f65c g     O .rodata	00000028 __mprec_tinytens
1000d408 g     F .text	00000078 alt_main
1000043c g     F .text	000000b8 _puts_r
10012f0c g     O .bss	00000100 alt_irq
1000963c g     F .text	0000005c _lseek_r
100113bc g       *ABS*	00000000 __flash_rwdata_start
1000b8c0 g     F .text	00000084 .hidden __eqdf2
1001300c g       *ABS*	00000000 __alt_heap_start
100003e0 g     F .text	0000003c printf
100096f4 g     F .text	0000009c _wcrtomb_r
10007944 g     F .text	0000005c __sseek
100046fc g     F .text	00000010 __sinit
10008fa8 g     F .text	00000154 __swbuf_r
10005174 g     F .text	0000007c _setlocale_r
10004554 g     F .text	00000078 __sfmoreglue
1000d4a0 g     F .text	00000020 __malloc_unlock
10005dd4 g     F .text	0000015c memmove
100046e4 g     F .text	00000018 _cleanup
10006054 g     F .text	000000a8 _Balloc
1000b944 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009590 g     F .text	00000058 _fstat_r
10012ec8 g     O .bss	00000004 errno
100078c0 g     F .text	00000008 __seofread
10012ed0 g     O .bss	00000004 alt_argv
10019374 g       *ABS*	00000000 _gp
10010194 g     O .rwdata	00000180 alt_fd_list
1000041c g     F .text	00000008 _putchar_r
1000ef3c g     F .text	00000090 alt_find_dev
10005c9c g     F .text	00000138 memcpy
100043a8 g     F .text	0000000c _cleanup_r
1000ccc8 g     F .text	000000d0 .hidden __floatsidf
1000ea64 g     F .text	00000078 alt_io_redirect
1000ba24 g     F .text	000000e0 .hidden __ltdf2
1000f558 g       *ABS*	00000000 __DTOR_END__
100004f4 g     F .text	00000014 puts
100077a4 g     F .text	00000074 __fpclassifyd
10006e80 g     F .text	000000a4 __ratio
10008f84 g     F .text	00000024 __vfiprintf_internal
1000df6c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
100003b4 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000a66c g     F .text	00000008 .hidden __udivsi3
1000d14c g     F .text	000000ac isatty
1000f6ac g     O .rodata	000000c8 __mprec_tens
100051f0 g     F .text	0000000c __locale_charset
10012ec4 g     O .bss	00000004 __malloc_top_pad
10011384 g     O .rwdata	00000004 __mb_cur_max
10005220 g     F .text	0000000c _localeconv_r
1000647c g     F .text	0000003c __i2b
10004b60 g     F .text	000004a4 __sfvwrite_r
10007818 g     F .text	00000054 _sbrk_r
10009698 g     F .text	0000005c _read_r
10011378 g     O .rwdata	00000004 msg
100113a4 g     O .rwdata	00000004 alt_max_fd
100092a0 g     F .text	00000100 _fclose_r
10004368 g     F .text	00000030 fflush
10012ec0 g     O .bss	00000004 __malloc_max_sbrked_mem
1000a6a4 g     F .text	0000089c .hidden __adddf3
10006c28 g     F .text	0000011c __b2d
10009f34 g     F .text	0000061c .hidden __umoddi3
1000d32c g     F .text	000000dc lseek
1001137c g     O .rwdata	00000004 _global_impure_ptr
10007204 g     F .text	000005a0 _realloc_r
1001300c g       *ABS*	00000000 __bss_end
1000e894 g     F .text	000000f0 alt_iic_isr_register
1000ee18 g     F .text	00000104 alt_tick
100098f4 g     F .text	00000640 .hidden __udivdi3
100093b4 g     F .text	00000184 _fputwc_r
1000f684 g     O .rodata	00000028 __mprec_bigtens
10006260 g     F .text	00000104 __s2b
1000cd98 g     F .text	000000a4 .hidden __floatunsidf
100069d0 g     F .text	00000060 __mcmp
1000471c g     F .text	00000018 __fp_lock_all
1000e848 g     F .text	0000004c alt_ic_irq_enabled
1000ed80 g     F .text	00000098 alt_alarm_stop
10012ed8 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
1001016c g     O .rwdata	00000028 alt_dev_null
100001f8 g     F .text	0000005c print_bits_impl
1000e4d0 g     F .text	0000001c alt_dcache_flush_all
10006364 g     F .text	00000068 __hi0bits
1000cc40 g     F .text	00000088 .hidden __fixdfsi
100113bc g       *ABS*	00000000 __ram_rwdata_end
1001139c g     O .rwdata	00000008 alt_dev_list
1000d794 g     F .text	00000100 write
1000709c g     F .text	000000a0 _putc_r
10011374 g     O .rwdata	00000001 gen
1000f8c8 g       *ABS*	00000000 __ram_rodata_end
1000d044 g     F .text	000000b8 fstat
1000ba24 g     F .text	000000e0 .hidden __ledf2
10006748 g     F .text	00000140 __pow5mult
10007b60 g     F .text	00001424 ___vfiprintf_internal_r
10012eb8 g     O .bss	00000004 __nlocale_changed
1000a674 g     F .text	00000008 .hidden __umodsi3
1001300c g       *ABS*	00000000 end
1000daa8 g     F .text	000000c4 altera_avalon_jtag_uart_init
1000f558 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000ce3c g     F .text	00000064 .hidden __clzsi2
1000e178 g     F .text	00000218 altera_avalon_jtag_uart_write
1000470c g     F .text	00000004 __sfp_lock_acquire
10005bb4 g     F .text	000000e8 memchr
100005a0 g     F .text	000020fc ___vfprintf_internal_r
10004870 g     F .text	000002f0 _free_r
100051fc g     F .text	00000010 __locale_mb_cur_max
1000f390 g     F .text	00000194 __call_exitprocs
10012eb4 g     O .bss	00000004 __mlocale_changed
10011388 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
10012edc g     O .bss	00000004 _alt_tick_rate
10006888 g     F .text	00000148 __lshift
10012ee0 g     O .bss	00000004 _alt_nticks
1000d510 g     F .text	00000104 read
1000d900 g     F .text	00000044 alt_sys_init
1000f27c g     F .text	00000114 __register_exitproc
100064b8 g     F .text	00000290 __multiply
1000de18 g     F .text	00000068 altera_avalon_jtag_uart_close
1000a67c g     F .text	00000028 .hidden __mulsi3
1000f8c8 g       *ABS*	00000000 __ram_rwdata_start
1000f558 g       *ABS*	00000000 __ram_rodata_start
10012ee4 g     O .bss	00000028 __malloc_current_mallinfo
10006d44 g     F .text	0000013c __d2b
1000d944 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000f0e0 g     F .text	000000d4 alt_get_fd
10009174 g     F .text	00000054 _close_r
1000f200 g     F .text	0000007c memcmp
1000da04 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001300c g       *ABS*	00000000 __alt_stack_base
1000da54 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100026c0 g     F .text	00000130 __swsetup_r
1000af40 g     F .text	00000980 .hidden __divdf3
100045cc g     F .text	00000118 __sfp
10006f98 g     F .text	00000078 __copybits
1000fd64 g     O .rwdata	00000408 __malloc_av_
10004718 g     F .text	00000004 __sinit_lock_release
1000bb04 g     F .text	0000086c .hidden __muldf3
1000786c g     F .text	00000054 __sread
1000efcc g     F .text	00000114 alt_find_file
1000e53c g     F .text	000000a4 alt_dev_llist_insert
1000d480 g     F .text	00000020 __malloc_lock
1000d694 g     F .text	000000b0 sbrk
10004140 g     F .text	00000228 _fflush_r
100091c8 g     F .text	000000d8 _calloc_r
10012eb0 g       *ABS*	00000000 __bss_start
10005f30 g     F .text	00000124 memset
1000028c g     F .text	00000128 main
10012ed4 g     O .bss	00000004 alt_envp
10012ebc g     O .bss	00000004 __malloc_max_total_mem
1000d9a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100090fc g     F .text	0000001c __swbuf
100079a0 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
100093a0 g     F .text	00000014 fclose
10002a18 g     F .text	00001728 _dtoa_r
1000540c g     F .text	000007a8 _malloc_r
10009868 g     F .text	00000030 __ascii_wctomb
100113a8 g     O .rwdata	00000004 alt_errno
10000254 g     F .text	00000038 print_bits
10005004 g     F .text	000000b8 _fwalk
1000713c g     F .text	000000c8 putc
1000a5bc g     F .text	00000054 .hidden __divsi3
1000474c g     F .text	00000124 _malloc_trim_r
1000f558 g       *ABS*	00000000 __CTOR_END__
100079a8 g     F .text	000000a4 strcmp
1000f558 g       *ABS*	00000000 __flash_rodata_start
1000f558 g       *ABS*	00000000 __DTOR_LIST__
1000b8c0 g     F .text	00000084 .hidden __nedf2
1000d8cc g     F .text	00000034 alt_irq_init
1000d614 g     F .text	00000080 alt_release_fd
1000f794 g     O .rodata	00000100 .hidden __clz_tab
10012eb0 g     O .bss	00000004 _PathLocale
1000f1b4 g     F .text	00000014 atexit
10009118 g     F .text	0000005c _write_r
1000522c g     F .text	0000001c setlocale
10011380 g     O .rwdata	00000004 _impure_ptr
10012ecc g     O .bss	00000004 alt_argc
1000e63c g     F .text	0000005c _do_dtors
10005218 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10006bc8 g     F .text	00000060 __ulp
10004734 g     F .text	00000018 __fp_unlock_all
10011394 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10005248 g     F .text	0000000c localeconv
1000e6b4 g     F .text	00000050 alt_ic_isr_register
100113bc g       *ABS*	00000000 _edata
1001300c g       *ABS*	00000000 _end
100001bc g       *ABS*	00000000 __ram_exceptions_end
1000de80 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1000e7a4 g     F .text	000000a4 alt_ic_irq_disable
100078c8 g     F .text	0000007c __swrite
1001138c g     O .rwdata	00000004 __malloc_trim_threshold
1000ef1c g     F .text	00000020 altera_nios2_qsys_irq_init
1000520c g     F .text	0000000c __locale_msgcharset
1000f1c8 g     F .text	00000038 exit
100050bc g     F .text	000000b8 _fwalk_reent
10006a30 g     F .text	00000198 __mdiff
1000a610 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10004710 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000f524 g     F .text	00000034 _exit
1000e390 g     F .text	00000140 alt_alarm_start
10005254 g     F .text	000001b8 __smakebuf_r
10000508 g     F .text	00000098 strlen
1000ec20 g     F .text	00000160 open
1000b944 g     F .text	000000e0 .hidden __gedf2
10011390 g     O .rwdata	00000004 __wctomb
10007b48 g     F .text	00000018 __sprint_r
1000e698 g     F .text	0000001c alt_icache_flush_all
100113b0 g     O .rwdata	00000004 alt_priority_mask
1000e704 g     F .text	000000a0 alt_ic_irq_enable
1000269c g     F .text	00000024 __vfprintf_internal
10009898 g     F .text	0000005c _wctomb_r
1000c370 g     F .text	000008d0 .hidden __subdf3
100063cc g     F .text	000000b0 __lo0bits
100113b4 g     O .rwdata	00000008 alt_alarm_list
1000e5e0 g     F .text	0000005c _do_ctors
10009790 g     F .text	000000d8 wcrtomb
1000cef0 g     F .text	000000d8 close
1000d25c g     F .text	00000080 alt_load
10009538 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
10004714 g     F .text	00000004 __sinit_lock_acquire
10006124 g     F .text	0000013c __multadd
100060fc g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00840074 	movhi	r2,4097
10000130:	108bc304 	addi	r2,r2,12044
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	00840074 	movhi	r2,4097
10000148:	108bc304 	addi	r2,r2,12044
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6a4dd14 	ori	gp,gp,37748
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	108bac14 	ori	r2,r2,11952

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18cc0314 	ori	r3,r3,12300

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000d25c0 	call	1000d25c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000d4080 	call	1000d408 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <alt_after_alt_main>

100001f8 <print_bits_impl>:

const uint8_t gen = 0b10011001;
const uint32_t msg = MSG02_TEST;


void print_bits_impl(unsigned int num) {
100001f8:	defffd04 	addi	sp,sp,-12
100001fc:	dfc00215 	stw	ra,8(sp)
10000200:	df000115 	stw	fp,4(sp)
10000204:	df000104 	addi	fp,sp,4
10000208:	e13fff15 	stw	r4,-4(fp)
	if (num > 1) {
1000020c:	e0bfff17 	ldw	r2,-4(fp)
10000210:	108000b0 	cmpltui	r2,r2,2
10000214:	1000041e 	bne	r2,zero,10000228 <print_bits_impl+0x30>
		print_bits_impl(num / 2);
10000218:	e0bfff17 	ldw	r2,-4(fp)
1000021c:	1004d07a 	srli	r2,r2,1
10000220:	1009883a 	mov	r4,r2
10000224:	00001f80 	call	100001f8 <print_bits_impl>
	}
	printf("%d", num % 2);
10000228:	e0bfff17 	ldw	r2,-4(fp)
1000022c:	1080004c 	andi	r2,r2,1
10000230:	01040074 	movhi	r4,4097
10000234:	213d5604 	addi	r4,r4,-2728
10000238:	100b883a 	mov	r5,r2
1000023c:	00003e00 	call	100003e0 <printf>
}
10000240:	e037883a 	mov	sp,fp
10000244:	dfc00117 	ldw	ra,4(sp)
10000248:	df000017 	ldw	fp,0(sp)
1000024c:	dec00204 	addi	sp,sp,8
10000250:	f800283a 	ret

10000254 <print_bits>:

void print_bits(unsigned int num) {
10000254:	defffd04 	addi	sp,sp,-12
10000258:	dfc00215 	stw	ra,8(sp)
1000025c:	df000115 	stw	fp,4(sp)
10000260:	df000104 	addi	fp,sp,4
10000264:	e13fff15 	stw	r4,-4(fp)
	print_bits_impl(num);
10000268:	e13fff17 	ldw	r4,-4(fp)
1000026c:	00001f80 	call	100001f8 <print_bits_impl>
	printf("\n");
10000270:	01000284 	movi	r4,10
10000274:	00004240 	call	10000424 <putchar>
}
10000278:	e037883a 	mov	sp,fp
1000027c:	dfc00117 	ldw	ra,4(sp)
10000280:	df000017 	ldw	fp,0(sp)
10000284:	dec00204 	addi	sp,sp,8
10000288:	f800283a 	ret

1000028c <main>:

int main() {
1000028c:	defffb04 	addi	sp,sp,-20
10000290:	dfc00415 	stw	ra,16(sp)
10000294:	df000315 	stw	fp,12(sp)
10000298:	df000304 	addi	fp,sp,12
  printf("Hello from Nios II!\n");
1000029c:	01040074 	movhi	r4,4097
100002a0:	213d5704 	addi	r4,r4,-2724
100002a4:	00004f40 	call	100004f4 <puts>

  uint32_t gen_shifted = (gen << 24) + 1;
100002a8:	00bfe644 	movi	r2,-103
100002ac:	10803fcc 	andi	r2,r2,255
100002b0:	1004963a 	slli	r2,r2,24
100002b4:	10800044 	addi	r2,r2,1
100002b8:	e0bffd15 	stw	r2,-12(fp)

  printf("Inputs: \n");
100002bc:	01040074 	movhi	r4,4097
100002c0:	213d5c04 	addi	r4,r4,-2704
100002c4:	00004f40 	call	100004f4 <puts>
  print_bits(msg);
100002c8:	009397f4 	movhi	r2,20063
100002cc:	10b8e004 	addi	r2,r2,-7296
100002d0:	1009883a 	mov	r4,r2
100002d4:	00002540 	call	10000254 <print_bits>
  print_bits(gen_shifted);
100002d8:	e13ffd17 	ldw	r4,-12(fp)
100002dc:	00002540 	call	10000254 <print_bits>
  printf("Inputs end \n\n");
100002e0:	01040074 	movhi	r4,4097
100002e4:	213d5f04 	addi	r4,r4,-2692
100002e8:	00004f40 	call	100004f4 <puts>


  IOWR(BASE_ADDR, 0, msg);
100002ec:	009397f4 	movhi	r2,20063
100002f0:	10b8e004 	addi	r2,r2,-7296
100002f4:	1007883a 	mov	r3,r2
100002f8:	00800074 	movhi	r2,1
100002fc:	10840004 	addi	r2,r2,4096
10000300:	10c00035 	stwio	r3,0(r2)
  print_bits(IORD(BASE_ADDR, 0));
10000304:	00800074 	movhi	r2,1
10000308:	10840004 	addi	r2,r2,4096
1000030c:	10800037 	ldwio	r2,0(r2)
10000310:	1009883a 	mov	r4,r2
10000314:	00002540 	call	10000254 <print_bits>


  IOWR(BASE_ADDR, 4, gen_shifted);
10000318:	e0fffd17 	ldw	r3,-12(fp)
1000031c:	00800074 	movhi	r2,1
10000320:	10840404 	addi	r2,r2,4112
10000324:	10c00035 	stwio	r3,0(r2)
  print_bits(IORD(BASE_ADDR, 4));
10000328:	00800074 	movhi	r2,1
1000032c:	10840404 	addi	r2,r2,4112
10000330:	10800037 	ldwio	r2,0(r2)
10000334:	1009883a 	mov	r4,r2
10000338:	00002540 	call	10000254 <print_bits>

  uint32_t read;
  while ((read=IORD(BASE_ADDR, 4))) {
1000033c:	00000506 	br	10000354 <main+0xc8>
	printf("Waiting for CRC to finish\n");
10000340:	01040074 	movhi	r4,4097
10000344:	213d6304 	addi	r4,r4,-2676
10000348:	00004f40 	call	100004f4 <puts>
	print_bits(read);
1000034c:	e13ffe17 	ldw	r4,-8(fp)
10000350:	00002540 	call	10000254 <print_bits>

  IOWR(BASE_ADDR, 4, gen_shifted);
  print_bits(IORD(BASE_ADDR, 4));

  uint32_t read;
  while ((read=IORD(BASE_ADDR, 4))) {
10000354:	00800074 	movhi	r2,1
10000358:	10840404 	addi	r2,r2,4112
1000035c:	10800037 	ldwio	r2,0(r2)
10000360:	e0bffe15 	stw	r2,-8(fp)
10000364:	e0bffe17 	ldw	r2,-8(fp)
10000368:	103ff51e 	bne	r2,zero,10000340 <main+0xb4>
	printf("Waiting for CRC to finish\n");
	print_bits(read);
  }

  uint32_t ret = IORD(BASE_ADDR, 0);
1000036c:	00800074 	movhi	r2,1
10000370:	10840004 	addi	r2,r2,4096
10000374:	10800037 	ldwio	r2,0(r2)
10000378:	e0bfff15 	stw	r2,-4(fp)
  printf("Result");
1000037c:	01040074 	movhi	r4,4097
10000380:	213d6a04 	addi	r4,r4,-2648
10000384:	00003e00 	call	100003e0 <printf>
  print_bits(ret);
10000388:	e13fff17 	ldw	r4,-4(fp)
1000038c:	00002540 	call	10000254 <print_bits>

  printf("Goodbye from NIOS II\n");
10000390:	01040074 	movhi	r4,4097
10000394:	213d6c04 	addi	r4,r4,-2640
10000398:	00004f40 	call	100004f4 <puts>
  return 0;
1000039c:	0005883a 	mov	r2,zero
}
100003a0:	e037883a 	mov	sp,fp
100003a4:	dfc00117 	ldw	ra,4(sp)
100003a8:	df000017 	ldw	fp,0(sp)
100003ac:	dec00204 	addi	sp,sp,8
100003b0:	f800283a 	ret

100003b4 <_printf_r>:
100003b4:	defffd04 	addi	sp,sp,-12
100003b8:	dfc00015 	stw	ra,0(sp)
100003bc:	d9800115 	stw	r6,4(sp)
100003c0:	d9c00215 	stw	r7,8(sp)
100003c4:	280d883a 	mov	r6,r5
100003c8:	21400217 	ldw	r5,8(r4)
100003cc:	d9c00104 	addi	r7,sp,4
100003d0:	00005a00 	call	100005a0 <___vfprintf_internal_r>
100003d4:	dfc00017 	ldw	ra,0(sp)
100003d8:	dec00304 	addi	sp,sp,12
100003dc:	f800283a 	ret

100003e0 <printf>:
100003e0:	defffc04 	addi	sp,sp,-16
100003e4:	dfc00015 	stw	ra,0(sp)
100003e8:	d9400115 	stw	r5,4(sp)
100003ec:	d9800215 	stw	r6,8(sp)
100003f0:	d9c00315 	stw	r7,12(sp)
100003f4:	00840074 	movhi	r2,4097
100003f8:	1084e004 	addi	r2,r2,4992
100003fc:	10800017 	ldw	r2,0(r2)
10000400:	200b883a 	mov	r5,r4
10000404:	d9800104 	addi	r6,sp,4
10000408:	11000217 	ldw	r4,8(r2)
1000040c:	000269c0 	call	1000269c <__vfprintf_internal>
10000410:	dfc00017 	ldw	ra,0(sp)
10000414:	dec00404 	addi	sp,sp,16
10000418:	f800283a 	ret

1000041c <_putchar_r>:
1000041c:	21800217 	ldw	r6,8(r4)
10000420:	000709c1 	jmpi	1000709c <_putc_r>

10000424 <putchar>:
10000424:	00840074 	movhi	r2,4097
10000428:	1084e004 	addi	r2,r2,4992
1000042c:	200b883a 	mov	r5,r4
10000430:	11000017 	ldw	r4,0(r2)
10000434:	21800217 	ldw	r6,8(r4)
10000438:	000709c1 	jmpi	1000709c <_putc_r>

1000043c <_puts_r>:
1000043c:	defff604 	addi	sp,sp,-40
10000440:	dc000715 	stw	r16,28(sp)
10000444:	2021883a 	mov	r16,r4
10000448:	2809883a 	mov	r4,r5
1000044c:	dc400815 	stw	r17,32(sp)
10000450:	dfc00915 	stw	ra,36(sp)
10000454:	2823883a 	mov	r17,r5
10000458:	00005080 	call	10000508 <strlen>
1000045c:	00c40074 	movhi	r3,4097
10000460:	18c4e004 	addi	r3,r3,4992
10000464:	18c00017 	ldw	r3,0(r3)
10000468:	11000044 	addi	r4,r2,1
1000046c:	d8800115 	stw	r2,4(sp)
10000470:	18c00217 	ldw	r3,8(r3)
10000474:	01440074 	movhi	r5,4097
10000478:	297d7204 	addi	r5,r5,-2616
1000047c:	1880030b 	ldhu	r2,12(r3)
10000480:	d9400215 	stw	r5,8(sp)
10000484:	d9000615 	stw	r4,24(sp)
10000488:	01400044 	movi	r5,1
1000048c:	01000084 	movi	r4,2
10000490:	d9000515 	stw	r4,20(sp)
10000494:	dc400015 	stw	r17,0(sp)
10000498:	d9400315 	stw	r5,12(sp)
1000049c:	dec00415 	stw	sp,16(sp)
100004a0:	1108000c 	andi	r4,r2,8192
100004a4:	2000061e 	bne	r4,zero,100004c0 <_puts_r+0x84>
100004a8:	19401917 	ldw	r5,100(r3)
100004ac:	0137ffc4 	movi	r4,-8193
100004b0:	10880014 	ori	r2,r2,8192
100004b4:	2908703a 	and	r4,r5,r4
100004b8:	1880030d 	sth	r2,12(r3)
100004bc:	19001915 	stw	r4,100(r3)
100004c0:	81400217 	ldw	r5,8(r16)
100004c4:	8009883a 	mov	r4,r16
100004c8:	d9800404 	addi	r6,sp,16
100004cc:	0004b600 	call	10004b60 <__sfvwrite_r>
100004d0:	1000061e 	bne	r2,zero,100004ec <_puts_r+0xb0>
100004d4:	00800284 	movi	r2,10
100004d8:	dfc00917 	ldw	ra,36(sp)
100004dc:	dc400817 	ldw	r17,32(sp)
100004e0:	dc000717 	ldw	r16,28(sp)
100004e4:	dec00a04 	addi	sp,sp,40
100004e8:	f800283a 	ret
100004ec:	00bfffc4 	movi	r2,-1
100004f0:	003ff906 	br	100004d8 <_puts_r+0x9c>

100004f4 <puts>:
100004f4:	00840074 	movhi	r2,4097
100004f8:	1084e004 	addi	r2,r2,4992
100004fc:	200b883a 	mov	r5,r4
10000500:	11000017 	ldw	r4,0(r2)
10000504:	000043c1 	jmpi	1000043c <_puts_r>

10000508 <strlen>:
10000508:	208000cc 	andi	r2,r4,3
1000050c:	10002026 	beq	r2,zero,10000590 <strlen+0x88>
10000510:	20800007 	ldb	r2,0(r4)
10000514:	10002026 	beq	r2,zero,10000598 <strlen+0x90>
10000518:	2005883a 	mov	r2,r4
1000051c:	00000206 	br	10000528 <strlen+0x20>
10000520:	10c00007 	ldb	r3,0(r2)
10000524:	18001826 	beq	r3,zero,10000588 <strlen+0x80>
10000528:	10800044 	addi	r2,r2,1
1000052c:	10c000cc 	andi	r3,r2,3
10000530:	183ffb1e 	bne	r3,zero,10000520 <strlen+0x18>
10000534:	10c00017 	ldw	r3,0(r2)
10000538:	01ffbff4 	movhi	r7,65279
1000053c:	39ffbfc4 	addi	r7,r7,-257
10000540:	00ca303a 	nor	r5,zero,r3
10000544:	01a02074 	movhi	r6,32897
10000548:	19c7883a 	add	r3,r3,r7
1000054c:	31a02004 	addi	r6,r6,-32640
10000550:	1946703a 	and	r3,r3,r5
10000554:	1986703a 	and	r3,r3,r6
10000558:	1800091e 	bne	r3,zero,10000580 <strlen+0x78>
1000055c:	10800104 	addi	r2,r2,4
10000560:	10c00017 	ldw	r3,0(r2)
10000564:	19cb883a 	add	r5,r3,r7
10000568:	00c6303a 	nor	r3,zero,r3
1000056c:	28c6703a 	and	r3,r5,r3
10000570:	1986703a 	and	r3,r3,r6
10000574:	183ff926 	beq	r3,zero,1000055c <strlen+0x54>
10000578:	00000106 	br	10000580 <strlen+0x78>
1000057c:	10800044 	addi	r2,r2,1
10000580:	10c00007 	ldb	r3,0(r2)
10000584:	183ffd1e 	bne	r3,zero,1000057c <strlen+0x74>
10000588:	1105c83a 	sub	r2,r2,r4
1000058c:	f800283a 	ret
10000590:	2005883a 	mov	r2,r4
10000594:	003fe706 	br	10000534 <strlen+0x2c>
10000598:	0005883a 	mov	r2,zero
1000059c:	f800283a 	ret

100005a0 <___vfprintf_internal_r>:
100005a0:	defeb604 	addi	sp,sp,-1320
100005a4:	dfc14915 	stw	ra,1316(sp)
100005a8:	ddc14715 	stw	r23,1308(sp)
100005ac:	dd814615 	stw	r22,1304(sp)
100005b0:	202f883a 	mov	r23,r4
100005b4:	282d883a 	mov	r22,r5
100005b8:	d9812a15 	stw	r6,1192(sp)
100005bc:	d9c12d15 	stw	r7,1204(sp)
100005c0:	df014815 	stw	fp,1312(sp)
100005c4:	dd414515 	stw	r21,1300(sp)
100005c8:	dd014415 	stw	r20,1296(sp)
100005cc:	dcc14315 	stw	r19,1292(sp)
100005d0:	dc814215 	stw	r18,1288(sp)
100005d4:	dc414115 	stw	r17,1284(sp)
100005d8:	dc014015 	stw	r16,1280(sp)
100005dc:	00052200 	call	10005220 <_localeconv_r>
100005e0:	10800017 	ldw	r2,0(r2)
100005e4:	1009883a 	mov	r4,r2
100005e8:	d8813515 	stw	r2,1236(sp)
100005ec:	00005080 	call	10000508 <strlen>
100005f0:	d8813815 	stw	r2,1248(sp)
100005f4:	b8000226 	beq	r23,zero,10000600 <___vfprintf_internal_r+0x60>
100005f8:	b8800e17 	ldw	r2,56(r23)
100005fc:	10010526 	beq	r2,zero,10000a14 <___vfprintf_internal_r+0x474>
10000600:	b0c0030b 	ldhu	r3,12(r22)
10000604:	1908000c 	andi	r4,r3,8192
10000608:	1805883a 	mov	r2,r3
1000060c:	2000071e 	bne	r4,zero,1000062c <___vfprintf_internal_r+0x8c>
10000610:	b1001917 	ldw	r4,100(r22)
10000614:	18880014 	ori	r2,r3,8192
10000618:	00f7ffc4 	movi	r3,-8193
1000061c:	20c8703a 	and	r4,r4,r3
10000620:	b080030d 	sth	r2,12(r22)
10000624:	1007883a 	mov	r3,r2
10000628:	b1001915 	stw	r4,100(r22)
1000062c:	1100020c 	andi	r4,r2,8
10000630:	2000a826 	beq	r4,zero,100008d4 <___vfprintf_internal_r+0x334>
10000634:	b1000417 	ldw	r4,16(r22)
10000638:	2000a626 	beq	r4,zero,100008d4 <___vfprintf_internal_r+0x334>
1000063c:	1080068c 	andi	r2,r2,26
10000640:	01000284 	movi	r4,10
10000644:	1100ac26 	beq	r2,r4,100008f8 <___vfprintf_internal_r+0x358>
10000648:	d8c10e04 	addi	r3,sp,1080
1000064c:	d9010dc4 	addi	r4,sp,1079
10000650:	d9400404 	addi	r5,sp,16
10000654:	05040074 	movhi	r20,4097
10000658:	1905c83a 	sub	r2,r3,r4
1000065c:	a53d8384 	addi	r20,r20,-2546
10000660:	d8c12815 	stw	r3,1184(sp)
10000664:	d9012915 	stw	r4,1188(sp)
10000668:	d9411e15 	stw	r5,1144(sp)
1000066c:	d8012015 	stw	zero,1152(sp)
10000670:	d8011f15 	stw	zero,1148(sp)
10000674:	d8013315 	stw	zero,1228(sp)
10000678:	d8013715 	stw	zero,1244(sp)
1000067c:	d8013915 	stw	zero,1252(sp)
10000680:	d8013b15 	stw	zero,1260(sp)
10000684:	d8013a15 	stw	zero,1256(sp)
10000688:	d8012f15 	stw	zero,1212(sp)
1000068c:	2811883a 	mov	r8,r5
10000690:	d8813c15 	stw	r2,1264(sp)
10000694:	d8c12a17 	ldw	r3,1192(sp)
10000698:	18800007 	ldb	r2,0(r3)
1000069c:	10021326 	beq	r2,zero,10000eec <___vfprintf_internal_r+0x94c>
100006a0:	00c00944 	movi	r3,37
100006a4:	dc012a17 	ldw	r16,1192(sp)
100006a8:	10c0021e 	bne	r2,r3,100006b4 <___vfprintf_internal_r+0x114>
100006ac:	00001606 	br	10000708 <___vfprintf_internal_r+0x168>
100006b0:	10c08526 	beq	r2,r3,100008c8 <___vfprintf_internal_r+0x328>
100006b4:	84000044 	addi	r16,r16,1
100006b8:	80800007 	ldb	r2,0(r16)
100006bc:	103ffc1e 	bne	r2,zero,100006b0 <___vfprintf_internal_r+0x110>
100006c0:	d9012a17 	ldw	r4,1192(sp)
100006c4:	8123c83a 	sub	r17,r16,r4
100006c8:	88000f26 	beq	r17,zero,10000708 <___vfprintf_internal_r+0x168>
100006cc:	d8812a17 	ldw	r2,1192(sp)
100006d0:	d8c12017 	ldw	r3,1152(sp)
100006d4:	44400115 	stw	r17,4(r8)
100006d8:	40800015 	stw	r2,0(r8)
100006dc:	d8811f17 	ldw	r2,1148(sp)
100006e0:	1c47883a 	add	r3,r3,r17
100006e4:	d8c12015 	stw	r3,1152(sp)
100006e8:	10800044 	addi	r2,r2,1
100006ec:	d8811f15 	stw	r2,1148(sp)
100006f0:	00c001c4 	movi	r3,7
100006f4:	1880b516 	blt	r3,r2,100009cc <___vfprintf_internal_r+0x42c>
100006f8:	42000204 	addi	r8,r8,8
100006fc:	d8c12f17 	ldw	r3,1212(sp)
10000700:	1c47883a 	add	r3,r3,r17
10000704:	d8c12f15 	stw	r3,1212(sp)
10000708:	80800007 	ldb	r2,0(r16)
1000070c:	1000b626 	beq	r2,zero,100009e8 <___vfprintf_internal_r+0x448>
10000710:	80800044 	addi	r2,r16,1
10000714:	84000047 	ldb	r16,1(r16)
10000718:	0027883a 	mov	r19,zero
1000071c:	0039883a 	mov	fp,zero
10000720:	dcc12b05 	stb	r19,1196(sp)
10000724:	d8012785 	stb	zero,1182(sp)
10000728:	027fffc4 	movi	r9,-1
1000072c:	d8012e15 	stw	zero,1208(sp)
10000730:	04401604 	movi	r17,88
10000734:	04800244 	movi	r18,9
10000738:	da012a15 	stw	r8,1192(sp)
1000073c:	e027883a 	mov	r19,fp
10000740:	17000044 	addi	fp,r2,1
10000744:	80bff804 	addi	r2,r16,-32
10000748:	88831236 	bltu	r17,r2,10001394 <___vfprintf_internal_r+0xdf4>
1000074c:	100490ba 	slli	r2,r2,2
10000750:	01040034 	movhi	r4,4096
10000754:	2101d904 	addi	r4,r4,1892
10000758:	1105883a 	add	r2,r2,r4
1000075c:	10800017 	ldw	r2,0(r2)
10000760:	1000683a 	jmp	r2
10000764:	100012b0 	cmpltui	zero,r2,74
10000768:	10001394 	ori	zero,r2,78
1000076c:	10001394 	ori	zero,r2,78
10000770:	100012cc 	andi	zero,r2,75
10000774:	10001394 	ori	zero,r2,78
10000778:	10001394 	ori	zero,r2,78
1000077c:	10001394 	ori	zero,r2,78
10000780:	10001394 	ori	zero,r2,78
10000784:	10001394 	ori	zero,r2,78
10000788:	10001394 	ori	zero,r2,78
1000078c:	100012dc 	xori	zero,r2,75
10000790:	10001304 	addi	zero,r2,76
10000794:	10001394 	ori	zero,r2,78
10000798:	10000a20 	cmpeqi	zero,r2,40
1000079c:	10000a30 	cmpltui	zero,r2,40
100007a0:	10001394 	ori	zero,r2,78
100007a4:	10000a80 	call	110000a8 <_gp+0xfe6d34>
100007a8:	10000a90 	cmplti	zero,r2,42
100007ac:	10000a90 	cmplti	zero,r2,42
100007b0:	10000a90 	cmplti	zero,r2,42
100007b4:	10000a90 	cmplti	zero,r2,42
100007b8:	10000a90 	cmplti	zero,r2,42
100007bc:	10000a90 	cmplti	zero,r2,42
100007c0:	10000a90 	cmplti	zero,r2,42
100007c4:	10000a90 	cmplti	zero,r2,42
100007c8:	10000a90 	cmplti	zero,r2,42
100007cc:	10001394 	ori	zero,r2,78
100007d0:	10001394 	ori	zero,r2,78
100007d4:	10001394 	ori	zero,r2,78
100007d8:	10001394 	ori	zero,r2,78
100007dc:	10001394 	ori	zero,r2,78
100007e0:	10001394 	ori	zero,r2,78
100007e4:	10001394 	ori	zero,r2,78
100007e8:	10001394 	ori	zero,r2,78
100007ec:	10001394 	ori	zero,r2,78
100007f0:	10001394 	ori	zero,r2,78
100007f4:	10000ad4 	ori	zero,r2,43
100007f8:	10000ef4 	orhi	zero,r2,59
100007fc:	10001394 	ori	zero,r2,78
10000800:	10000ef4 	orhi	zero,r2,59
10000804:	10001394 	ori	zero,r2,78
10000808:	10001394 	ori	zero,r2,78
1000080c:	10001394 	ori	zero,r2,78
10000810:	10001394 	ori	zero,r2,78
10000814:	10000f9c 	xori	zero,r2,62
10000818:	10001394 	ori	zero,r2,78
1000081c:	10001394 	ori	zero,r2,78
10000820:	10000fac 	andhi	zero,r2,62
10000824:	10001394 	ori	zero,r2,78
10000828:	10001394 	ori	zero,r2,78
1000082c:	10001394 	ori	zero,r2,78
10000830:	10001394 	ori	zero,r2,78
10000834:	10001394 	ori	zero,r2,78
10000838:	10000ff0 	cmpltui	zero,r2,63
1000083c:	10001394 	ori	zero,r2,78
10000840:	10001394 	ori	zero,r2,78
10000844:	10001028 	cmpgeui	zero,r2,64
10000848:	10001394 	ori	zero,r2,78
1000084c:	10001394 	ori	zero,r2,78
10000850:	10001394 	ori	zero,r2,78
10000854:	10001394 	ori	zero,r2,78
10000858:	10001394 	ori	zero,r2,78
1000085c:	10001394 	ori	zero,r2,78
10000860:	10001394 	ori	zero,r2,78
10000864:	10001394 	ori	zero,r2,78
10000868:	10001394 	ori	zero,r2,78
1000086c:	10001394 	ori	zero,r2,78
10000870:	10001264 	muli	zero,r2,73
10000874:	10001210 	cmplti	zero,r2,72
10000878:	10000ef4 	orhi	zero,r2,59
1000087c:	10000ef4 	orhi	zero,r2,59
10000880:	10000ef4 	orhi	zero,r2,59
10000884:	10001254 	ori	zero,r2,73
10000888:	10001210 	cmplti	zero,r2,72
1000088c:	10001394 	ori	zero,r2,78
10000890:	10001394 	ori	zero,r2,78
10000894:	1000112c 	andhi	zero,r2,68
10000898:	10001394 	ori	zero,r2,78
1000089c:	10001144 	addi	zero,r2,69
100008a0:	10001184 	addi	zero,r2,70
100008a4:	100011c4 	addi	zero,r2,71
100008a8:	10001090 	cmplti	zero,r2,66
100008ac:	10001394 	ori	zero,r2,78
100008b0:	10001318 	cmpnei	zero,r2,76
100008b4:	10001394 	ori	zero,r2,78
100008b8:	100010a0 	cmpeqi	zero,r2,66
100008bc:	10001394 	ori	zero,r2,78
100008c0:	10001394 	ori	zero,r2,78
100008c4:	100010e0 	cmpeqi	zero,r2,67
100008c8:	d9412a17 	ldw	r5,1192(sp)
100008cc:	8163c83a 	sub	r17,r16,r5
100008d0:	003f7d06 	br	100006c8 <___vfprintf_internal_r+0x128>
100008d4:	b809883a 	mov	r4,r23
100008d8:	b00b883a 	mov	r5,r22
100008dc:	00026c00 	call	100026c0 <__swsetup_r>
100008e0:	10002d1e 	bne	r2,zero,10000998 <___vfprintf_internal_r+0x3f8>
100008e4:	b0c0030b 	ldhu	r3,12(r22)
100008e8:	01000284 	movi	r4,10
100008ec:	1805883a 	mov	r2,r3
100008f0:	1080068c 	andi	r2,r2,26
100008f4:	113f541e 	bne	r2,r4,10000648 <___vfprintf_internal_r+0xa8>
100008f8:	b080038b 	ldhu	r2,14(r22)
100008fc:	113fffcc 	andi	r4,r2,65535
10000900:	2120001c 	xori	r4,r4,32768
10000904:	21200004 	addi	r4,r4,-32768
10000908:	203f4f16 	blt	r4,zero,10000648 <___vfprintf_internal_r+0xa8>
1000090c:	b2c01917 	ldw	r11,100(r22)
10000910:	b2800717 	ldw	r10,28(r22)
10000914:	b2400917 	ldw	r9,36(r22)
10000918:	d9812a17 	ldw	r6,1192(sp)
1000091c:	d9c12d17 	ldw	r7,1204(sp)
10000920:	02010004 	movi	r8,1024
10000924:	18ffff4c 	andi	r3,r3,65533
10000928:	d881078d 	sth	r2,1054(sp)
1000092c:	b809883a 	mov	r4,r23
10000930:	d8800404 	addi	r2,sp,16
10000934:	d9410404 	addi	r5,sp,1040
10000938:	d8c1070d 	sth	r3,1052(sp)
1000093c:	dac11d15 	stw	r11,1140(sp)
10000940:	da810b15 	stw	r10,1068(sp)
10000944:	da410d15 	stw	r9,1076(sp)
10000948:	d8810415 	stw	r2,1040(sp)
1000094c:	d8810815 	stw	r2,1056(sp)
10000950:	da010615 	stw	r8,1048(sp)
10000954:	da010915 	stw	r8,1060(sp)
10000958:	d8010a15 	stw	zero,1064(sp)
1000095c:	00005a00 	call	100005a0 <___vfprintf_internal_r>
10000960:	1021883a 	mov	r16,r2
10000964:	10000416 	blt	r2,zero,10000978 <___vfprintf_internal_r+0x3d8>
10000968:	b809883a 	mov	r4,r23
1000096c:	d9410404 	addi	r5,sp,1040
10000970:	00041400 	call	10004140 <_fflush_r>
10000974:	1007301e 	bne	r2,zero,10002638 <___vfprintf_internal_r+0x2098>
10000978:	d881070b 	ldhu	r2,1052(sp)
1000097c:	1080100c 	andi	r2,r2,64
10000980:	10000326 	beq	r2,zero,10000990 <___vfprintf_internal_r+0x3f0>
10000984:	b080030b 	ldhu	r2,12(r22)
10000988:	10801014 	ori	r2,r2,64
1000098c:	b080030d 	sth	r2,12(r22)
10000990:	8005883a 	mov	r2,r16
10000994:	00000106 	br	1000099c <___vfprintf_internal_r+0x3fc>
10000998:	00bfffc4 	movi	r2,-1
1000099c:	dfc14917 	ldw	ra,1316(sp)
100009a0:	df014817 	ldw	fp,1312(sp)
100009a4:	ddc14717 	ldw	r23,1308(sp)
100009a8:	dd814617 	ldw	r22,1304(sp)
100009ac:	dd414517 	ldw	r21,1300(sp)
100009b0:	dd014417 	ldw	r20,1296(sp)
100009b4:	dcc14317 	ldw	r19,1292(sp)
100009b8:	dc814217 	ldw	r18,1288(sp)
100009bc:	dc414117 	ldw	r17,1284(sp)
100009c0:	dc014017 	ldw	r16,1280(sp)
100009c4:	dec14a04 	addi	sp,sp,1320
100009c8:	f800283a 	ret
100009cc:	b809883a 	mov	r4,r23
100009d0:	b00b883a 	mov	r5,r22
100009d4:	d9811e04 	addi	r6,sp,1144
100009d8:	0007b480 	call	10007b48 <__sprint_r>
100009dc:	1000081e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
100009e0:	da000404 	addi	r8,sp,16
100009e4:	003f4506 	br	100006fc <___vfprintf_internal_r+0x15c>
100009e8:	d8812017 	ldw	r2,1152(sp)
100009ec:	10000426 	beq	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
100009f0:	b809883a 	mov	r4,r23
100009f4:	b00b883a 	mov	r5,r22
100009f8:	d9811e04 	addi	r6,sp,1144
100009fc:	0007b480 	call	10007b48 <__sprint_r>
10000a00:	b080030b 	ldhu	r2,12(r22)
10000a04:	1080100c 	andi	r2,r2,64
10000a08:	103fe31e 	bne	r2,zero,10000998 <___vfprintf_internal_r+0x3f8>
10000a0c:	d8812f17 	ldw	r2,1212(sp)
10000a10:	003fe206 	br	1000099c <___vfprintf_internal_r+0x3fc>
10000a14:	b809883a 	mov	r4,r23
10000a18:	00046fc0 	call	100046fc <__sinit>
10000a1c:	003ef806 	br	10000600 <___vfprintf_internal_r+0x60>
10000a20:	e005883a 	mov	r2,fp
10000a24:	9cc00114 	ori	r19,r19,4
10000a28:	e4000007 	ldb	r16,0(fp)
10000a2c:	003f4406 	br	10000740 <___vfprintf_internal_r+0x1a0>
10000a30:	e4000007 	ldb	r16,0(fp)
10000a34:	01000a84 	movi	r4,42
10000a38:	e0800044 	addi	r2,fp,1
10000a3c:	8106f626 	beq	r16,r4,10002618 <___vfprintf_internal_r+0x2078>
10000a40:	857ff404 	addi	r21,r16,-48
10000a44:	1039883a 	mov	fp,r2
10000a48:	0013883a 	mov	r9,zero
10000a4c:	957f3d36 	bltu	r18,r21,10000744 <___vfprintf_internal_r+0x1a4>
10000a50:	0009883a 	mov	r4,zero
10000a54:	01400284 	movi	r5,10
10000a58:	000a67c0 	call	1000a67c <__mulsi3>
10000a5c:	e4000007 	ldb	r16,0(fp)
10000a60:	a889883a 	add	r4,r21,r2
10000a64:	e7000044 	addi	fp,fp,1
10000a68:	857ff404 	addi	r21,r16,-48
10000a6c:	957ff92e 	bgeu	r18,r21,10000a54 <___vfprintf_internal_r+0x4b4>
10000a70:	2013883a 	mov	r9,r4
10000a74:	203f330e 	bge	r4,zero,10000744 <___vfprintf_internal_r+0x1a4>
10000a78:	027fffc4 	movi	r9,-1
10000a7c:	003f3106 	br	10000744 <___vfprintf_internal_r+0x1a4>
10000a80:	9cc02014 	ori	r19,r19,128
10000a84:	e005883a 	mov	r2,fp
10000a88:	e4000007 	ldb	r16,0(fp)
10000a8c:	003f2c06 	br	10000740 <___vfprintf_internal_r+0x1a0>
10000a90:	857ff404 	addi	r21,r16,-48
10000a94:	d8012e15 	stw	zero,1208(sp)
10000a98:	e021883a 	mov	r16,fp
10000a9c:	0009883a 	mov	r4,zero
10000aa0:	da412c15 	stw	r9,1200(sp)
10000aa4:	01400284 	movi	r5,10
10000aa8:	000a67c0 	call	1000a67c <__mulsi3>
10000aac:	81400007 	ldb	r5,0(r16)
10000ab0:	1549883a 	add	r4,r2,r21
10000ab4:	e7000044 	addi	fp,fp,1
10000ab8:	2d7ff404 	addi	r21,r5,-48
10000abc:	e021883a 	mov	r16,fp
10000ac0:	957ff82e 	bgeu	r18,r21,10000aa4 <___vfprintf_internal_r+0x504>
10000ac4:	2821883a 	mov	r16,r5
10000ac8:	d9012e15 	stw	r4,1208(sp)
10000acc:	da412c17 	ldw	r9,1200(sp)
10000ad0:	003f1c06 	br	10000744 <___vfprintf_internal_r+0x1a4>
10000ad4:	da012a17 	ldw	r8,1192(sp)
10000ad8:	df012a15 	stw	fp,1192(sp)
10000adc:	9839883a 	mov	fp,r19
10000ae0:	dcc12b03 	ldbu	r19,1196(sp)
10000ae4:	e7000414 	ori	fp,fp,16
10000ae8:	e080080c 	andi	r2,fp,32
10000aec:	dcc12785 	stb	r19,1182(sp)
10000af0:	d8c12d17 	ldw	r3,1204(sp)
10000af4:	1001ce26 	beq	r2,zero,10001230 <___vfprintf_internal_r+0xc90>
10000af8:	d9012d17 	ldw	r4,1204(sp)
10000afc:	18800117 	ldw	r2,4(r3)
10000b00:	1c800017 	ldw	r18,0(r3)
10000b04:	21000204 	addi	r4,r4,8
10000b08:	d9012d15 	stw	r4,1204(sp)
10000b0c:	102b883a 	mov	r21,r2
10000b10:	10044916 	blt	r2,zero,10001c38 <___vfprintf_internal_r+0x1698>
10000b14:	dcc12783 	ldbu	r19,1182(sp)
10000b18:	da413215 	stw	r9,1224(sp)
10000b1c:	00800044 	movi	r2,1
10000b20:	9546b03a 	or	r3,r18,r21
10000b24:	48000216 	blt	r9,zero,10000b30 <___vfprintf_internal_r+0x590>
10000b28:	013fdfc4 	movi	r4,-129
10000b2c:	e138703a 	and	fp,fp,r4
10000b30:	1802251e 	bne	r3,zero,100013c8 <___vfprintf_internal_r+0xe28>
10000b34:	48031726 	beq	r9,zero,10001794 <___vfprintf_internal_r+0x11f4>
10000b38:	10803fcc 	andi	r2,r2,255
10000b3c:	00c00044 	movi	r3,1
10000b40:	10c24526 	beq	r2,r3,10001458 <___vfprintf_internal_r+0xeb8>
10000b44:	00c00084 	movi	r3,2
10000b48:	10c33426 	beq	r2,r3,1000181c <___vfprintf_internal_r+0x127c>
10000b4c:	d8c10e04 	addi	r3,sp,1080
10000b50:	9008d0fa 	srli	r4,r18,3
10000b54:	a80a977a 	slli	r5,r21,29
10000b58:	a82ad0fa 	srli	r21,r21,3
10000b5c:	948001cc 	andi	r18,r18,7
10000b60:	90800c04 	addi	r2,r18,48
10000b64:	18ffffc4 	addi	r3,r3,-1
10000b68:	2924b03a 	or	r18,r5,r4
10000b6c:	18800005 	stb	r2,0(r3)
10000b70:	9548b03a 	or	r4,r18,r21
10000b74:	203ff61e 	bne	r4,zero,10000b50 <___vfprintf_internal_r+0x5b0>
10000b78:	e100004c 	andi	r4,fp,1
10000b7c:	d8c13115 	stw	r3,1220(sp)
10000b80:	20039a1e 	bne	r4,zero,100019ec <___vfprintf_internal_r+0x144c>
10000b84:	d8812817 	ldw	r2,1184(sp)
10000b88:	10e3c83a 	sub	r17,r2,r3
10000b8c:	8805883a 	mov	r2,r17
10000b90:	8a40010e 	bge	r17,r9,10000b98 <___vfprintf_internal_r+0x5f8>
10000b94:	4805883a 	mov	r2,r9
10000b98:	d8812b15 	stw	r2,1196(sp)
10000b9c:	d8013415 	stw	zero,1232(sp)
10000ba0:	98803fcc 	andi	r2,r19,255
10000ba4:	1080201c 	xori	r2,r2,128
10000ba8:	10bfe004 	addi	r2,r2,-128
10000bac:	10000326 	beq	r2,zero,10000bbc <___vfprintf_internal_r+0x61c>
10000bb0:	d8c12b17 	ldw	r3,1196(sp)
10000bb4:	18c00044 	addi	r3,r3,1
10000bb8:	d8c12b15 	stw	r3,1196(sp)
10000bbc:	e0c0008c 	andi	r3,fp,2
10000bc0:	d8c12c15 	stw	r3,1200(sp)
10000bc4:	18000326 	beq	r3,zero,10000bd4 <___vfprintf_internal_r+0x634>
10000bc8:	d8c12b17 	ldw	r3,1196(sp)
10000bcc:	18c00084 	addi	r3,r3,2
10000bd0:	d8c12b15 	stw	r3,1196(sp)
10000bd4:	e0c0210c 	andi	r3,fp,132
10000bd8:	d8c13015 	stw	r3,1216(sp)
10000bdc:	1801f81e 	bne	r3,zero,100013c0 <___vfprintf_internal_r+0xe20>
10000be0:	d9012e17 	ldw	r4,1208(sp)
10000be4:	d8c12b17 	ldw	r3,1196(sp)
10000be8:	20ebc83a 	sub	r21,r4,r3
10000bec:	0541f40e 	bge	zero,r21,100013c0 <___vfprintf_internal_r+0xe20>
10000bf0:	02400404 	movi	r9,16
10000bf4:	d8c12017 	ldw	r3,1152(sp)
10000bf8:	d8811f17 	ldw	r2,1148(sp)
10000bfc:	4d45750e 	bge	r9,r21,100021d4 <___vfprintf_internal_r+0x1c34>
10000c00:	01440074 	movhi	r5,4097
10000c04:	297d8784 	addi	r5,r5,-2530
10000c08:	d9413615 	stw	r5,1240(sp)
10000c0c:	4827883a 	mov	r19,r9
10000c10:	048001c4 	movi	r18,7
10000c14:	00000306 	br	10000c24 <___vfprintf_internal_r+0x684>
10000c18:	ad7ffc04 	addi	r21,r21,-16
10000c1c:	42000204 	addi	r8,r8,8
10000c20:	9d40130e 	bge	r19,r21,10000c70 <___vfprintf_internal_r+0x6d0>
10000c24:	01040074 	movhi	r4,4097
10000c28:	18c00404 	addi	r3,r3,16
10000c2c:	10800044 	addi	r2,r2,1
10000c30:	213d8784 	addi	r4,r4,-2530
10000c34:	41000015 	stw	r4,0(r8)
10000c38:	44c00115 	stw	r19,4(r8)
10000c3c:	d8c12015 	stw	r3,1152(sp)
10000c40:	d8811f15 	stw	r2,1148(sp)
10000c44:	90bff40e 	bge	r18,r2,10000c18 <___vfprintf_internal_r+0x678>
10000c48:	b809883a 	mov	r4,r23
10000c4c:	b00b883a 	mov	r5,r22
10000c50:	d9811e04 	addi	r6,sp,1144
10000c54:	0007b480 	call	10007b48 <__sprint_r>
10000c58:	103f691e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10000c5c:	ad7ffc04 	addi	r21,r21,-16
10000c60:	d8c12017 	ldw	r3,1152(sp)
10000c64:	d8811f17 	ldw	r2,1148(sp)
10000c68:	da000404 	addi	r8,sp,16
10000c6c:	9d7fed16 	blt	r19,r21,10000c24 <___vfprintf_internal_r+0x684>
10000c70:	d9413617 	ldw	r5,1240(sp)
10000c74:	a8c7883a 	add	r3,r21,r3
10000c78:	10800044 	addi	r2,r2,1
10000c7c:	41400015 	stw	r5,0(r8)
10000c80:	45400115 	stw	r21,4(r8)
10000c84:	d8c12015 	stw	r3,1152(sp)
10000c88:	d8811f15 	stw	r2,1148(sp)
10000c8c:	010001c4 	movi	r4,7
10000c90:	20832b16 	blt	r4,r2,10001940 <___vfprintf_internal_r+0x13a0>
10000c94:	d8812787 	ldb	r2,1182(sp)
10000c98:	42000204 	addi	r8,r8,8
10000c9c:	10000c26 	beq	r2,zero,10000cd0 <___vfprintf_internal_r+0x730>
10000ca0:	d8811f17 	ldw	r2,1148(sp)
10000ca4:	d9012784 	addi	r4,sp,1182
10000ca8:	18c00044 	addi	r3,r3,1
10000cac:	10800044 	addi	r2,r2,1
10000cb0:	41000015 	stw	r4,0(r8)
10000cb4:	01000044 	movi	r4,1
10000cb8:	41000115 	stw	r4,4(r8)
10000cbc:	d8c12015 	stw	r3,1152(sp)
10000cc0:	d8811f15 	stw	r2,1148(sp)
10000cc4:	010001c4 	movi	r4,7
10000cc8:	2082c416 	blt	r4,r2,100017dc <___vfprintf_internal_r+0x123c>
10000ccc:	42000204 	addi	r8,r8,8
10000cd0:	d8812c17 	ldw	r2,1200(sp)
10000cd4:	10000c26 	beq	r2,zero,10000d08 <___vfprintf_internal_r+0x768>
10000cd8:	d8811f17 	ldw	r2,1148(sp)
10000cdc:	d9012704 	addi	r4,sp,1180
10000ce0:	18c00084 	addi	r3,r3,2
10000ce4:	10800044 	addi	r2,r2,1
10000ce8:	41000015 	stw	r4,0(r8)
10000cec:	01000084 	movi	r4,2
10000cf0:	41000115 	stw	r4,4(r8)
10000cf4:	d8c12015 	stw	r3,1152(sp)
10000cf8:	d8811f15 	stw	r2,1148(sp)
10000cfc:	010001c4 	movi	r4,7
10000d00:	2082be16 	blt	r4,r2,100017fc <___vfprintf_internal_r+0x125c>
10000d04:	42000204 	addi	r8,r8,8
10000d08:	d9013017 	ldw	r4,1216(sp)
10000d0c:	00802004 	movi	r2,128
10000d10:	20822026 	beq	r4,r2,10001594 <___vfprintf_internal_r+0xff4>
10000d14:	d9413217 	ldw	r5,1224(sp)
10000d18:	2c67c83a 	sub	r19,r5,r17
10000d1c:	04c0260e 	bge	zero,r19,10000db8 <___vfprintf_internal_r+0x818>
10000d20:	05400404 	movi	r21,16
10000d24:	d8811f17 	ldw	r2,1148(sp)
10000d28:	acc4720e 	bge	r21,r19,10001ef4 <___vfprintf_internal_r+0x1954>
10000d2c:	01440074 	movhi	r5,4097
10000d30:	297d8384 	addi	r5,r5,-2546
10000d34:	d9412c15 	stw	r5,1200(sp)
10000d38:	048001c4 	movi	r18,7
10000d3c:	00000306 	br	10000d4c <___vfprintf_internal_r+0x7ac>
10000d40:	9cfffc04 	addi	r19,r19,-16
10000d44:	42000204 	addi	r8,r8,8
10000d48:	acc0110e 	bge	r21,r19,10000d90 <___vfprintf_internal_r+0x7f0>
10000d4c:	18c00404 	addi	r3,r3,16
10000d50:	10800044 	addi	r2,r2,1
10000d54:	45000015 	stw	r20,0(r8)
10000d58:	45400115 	stw	r21,4(r8)
10000d5c:	d8c12015 	stw	r3,1152(sp)
10000d60:	d8811f15 	stw	r2,1148(sp)
10000d64:	90bff60e 	bge	r18,r2,10000d40 <___vfprintf_internal_r+0x7a0>
10000d68:	b809883a 	mov	r4,r23
10000d6c:	b00b883a 	mov	r5,r22
10000d70:	d9811e04 	addi	r6,sp,1144
10000d74:	0007b480 	call	10007b48 <__sprint_r>
10000d78:	103f211e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10000d7c:	9cfffc04 	addi	r19,r19,-16
10000d80:	d8c12017 	ldw	r3,1152(sp)
10000d84:	d8811f17 	ldw	r2,1148(sp)
10000d88:	da000404 	addi	r8,sp,16
10000d8c:	acffef16 	blt	r21,r19,10000d4c <___vfprintf_internal_r+0x7ac>
10000d90:	d9012c17 	ldw	r4,1200(sp)
10000d94:	1cc7883a 	add	r3,r3,r19
10000d98:	10800044 	addi	r2,r2,1
10000d9c:	41000015 	stw	r4,0(r8)
10000da0:	44c00115 	stw	r19,4(r8)
10000da4:	d8c12015 	stw	r3,1152(sp)
10000da8:	d8811f15 	stw	r2,1148(sp)
10000dac:	010001c4 	movi	r4,7
10000db0:	20828216 	blt	r4,r2,100017bc <___vfprintf_internal_r+0x121c>
10000db4:	42000204 	addi	r8,r8,8
10000db8:	e080400c 	andi	r2,fp,256
10000dbc:	1001ac1e 	bne	r2,zero,10001470 <___vfprintf_internal_r+0xed0>
10000dc0:	d8811f17 	ldw	r2,1148(sp)
10000dc4:	d9413117 	ldw	r5,1220(sp)
10000dc8:	1c47883a 	add	r3,r3,r17
10000dcc:	10800044 	addi	r2,r2,1
10000dd0:	41400015 	stw	r5,0(r8)
10000dd4:	44400115 	stw	r17,4(r8)
10000dd8:	d8c12015 	stw	r3,1152(sp)
10000ddc:	d8811f15 	stw	r2,1148(sp)
10000de0:	010001c4 	movi	r4,7
10000de4:	20825d16 	blt	r4,r2,1000175c <___vfprintf_internal_r+0x11bc>
10000de8:	42000204 	addi	r8,r8,8
10000dec:	e080010c 	andi	r2,fp,4
10000df0:	10003126 	beq	r2,zero,10000eb8 <___vfprintf_internal_r+0x918>
10000df4:	d8812e17 	ldw	r2,1208(sp)
10000df8:	d9012b17 	ldw	r4,1196(sp)
10000dfc:	1121c83a 	sub	r16,r2,r4
10000e00:	04002d0e 	bge	zero,r16,10000eb8 <___vfprintf_internal_r+0x918>
10000e04:	04400404 	movi	r17,16
10000e08:	d8811f17 	ldw	r2,1148(sp)
10000e0c:	8c05340e 	bge	r17,r16,100022e0 <___vfprintf_internal_r+0x1d40>
10000e10:	01040074 	movhi	r4,4097
10000e14:	213d8784 	addi	r4,r4,-2530
10000e18:	d9013615 	stw	r4,1240(sp)
10000e1c:	048001c4 	movi	r18,7
10000e20:	00000306 	br	10000e30 <___vfprintf_internal_r+0x890>
10000e24:	843ffc04 	addi	r16,r16,-16
10000e28:	42000204 	addi	r8,r8,8
10000e2c:	8c00130e 	bge	r17,r16,10000e7c <___vfprintf_internal_r+0x8dc>
10000e30:	01440074 	movhi	r5,4097
10000e34:	18c00404 	addi	r3,r3,16
10000e38:	10800044 	addi	r2,r2,1
10000e3c:	297d8784 	addi	r5,r5,-2530
10000e40:	41400015 	stw	r5,0(r8)
10000e44:	44400115 	stw	r17,4(r8)
10000e48:	d8c12015 	stw	r3,1152(sp)
10000e4c:	d8811f15 	stw	r2,1148(sp)
10000e50:	90bff40e 	bge	r18,r2,10000e24 <___vfprintf_internal_r+0x884>
10000e54:	b809883a 	mov	r4,r23
10000e58:	b00b883a 	mov	r5,r22
10000e5c:	d9811e04 	addi	r6,sp,1144
10000e60:	0007b480 	call	10007b48 <__sprint_r>
10000e64:	103ee61e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10000e68:	843ffc04 	addi	r16,r16,-16
10000e6c:	d8c12017 	ldw	r3,1152(sp)
10000e70:	d8811f17 	ldw	r2,1148(sp)
10000e74:	da000404 	addi	r8,sp,16
10000e78:	8c3fed16 	blt	r17,r16,10000e30 <___vfprintf_internal_r+0x890>
10000e7c:	d9013617 	ldw	r4,1240(sp)
10000e80:	1c07883a 	add	r3,r3,r16
10000e84:	10800044 	addi	r2,r2,1
10000e88:	41000015 	stw	r4,0(r8)
10000e8c:	44000115 	stw	r16,4(r8)
10000e90:	d8c12015 	stw	r3,1152(sp)
10000e94:	d8811f15 	stw	r2,1148(sp)
10000e98:	010001c4 	movi	r4,7
10000e9c:	2080060e 	bge	r4,r2,10000eb8 <___vfprintf_internal_r+0x918>
10000ea0:	b809883a 	mov	r4,r23
10000ea4:	b00b883a 	mov	r5,r22
10000ea8:	d9811e04 	addi	r6,sp,1144
10000eac:	0007b480 	call	10007b48 <__sprint_r>
10000eb0:	103ed31e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10000eb4:	d8c12017 	ldw	r3,1152(sp)
10000eb8:	df012b17 	ldw	fp,1196(sp)
10000ebc:	d9412e17 	ldw	r5,1208(sp)
10000ec0:	e140010e 	bge	fp,r5,10000ec8 <___vfprintf_internal_r+0x928>
10000ec4:	2839883a 	mov	fp,r5
10000ec8:	d8812f17 	ldw	r2,1212(sp)
10000ecc:	1705883a 	add	r2,r2,fp
10000ed0:	d8812f15 	stw	r2,1212(sp)
10000ed4:	1802291e 	bne	r3,zero,1000177c <___vfprintf_internal_r+0x11dc>
10000ed8:	d8c12a17 	ldw	r3,1192(sp)
10000edc:	d8011f15 	stw	zero,1148(sp)
10000ee0:	da000404 	addi	r8,sp,16
10000ee4:	18800007 	ldb	r2,0(r3)
10000ee8:	103ded1e 	bne	r2,zero,100006a0 <___vfprintf_internal_r+0x100>
10000eec:	dc012a17 	ldw	r16,1192(sp)
10000ef0:	003e0506 	br	10000708 <___vfprintf_internal_r+0x168>
10000ef4:	d9012d17 	ldw	r4,1204(sp)
10000ef8:	d9412d17 	ldw	r5,1204(sp)
10000efc:	da012a17 	ldw	r8,1192(sp)
10000f00:	21000017 	ldw	r4,0(r4)
10000f04:	29400117 	ldw	r5,4(r5)
10000f08:	df012a15 	stw	fp,1192(sp)
10000f0c:	9839883a 	mov	fp,r19
10000f10:	dcc12b03 	ldbu	r19,1196(sp)
10000f14:	d9013715 	stw	r4,1244(sp)
10000f18:	d9413915 	stw	r5,1252(sp)
10000f1c:	da013f15 	stw	r8,1276(sp)
10000f20:	da413e15 	stw	r9,1272(sp)
10000f24:	dcc12785 	stb	r19,1182(sp)
10000f28:	00077a40 	call	100077a4 <__fpclassifyd>
10000f2c:	d8c12d17 	ldw	r3,1204(sp)
10000f30:	04400044 	movi	r17,1
10000f34:	da013f17 	ldw	r8,1276(sp)
10000f38:	1c800204 	addi	r18,r3,8
10000f3c:	da413e17 	ldw	r9,1272(sp)
10000f40:	d9013717 	ldw	r4,1244(sp)
10000f44:	d9413917 	ldw	r5,1252(sp)
10000f48:	1443451e 	bne	r2,r17,10001c60 <___vfprintf_internal_r+0x16c0>
10000f4c:	000d883a 	mov	r6,zero
10000f50:	000f883a 	mov	r7,zero
10000f54:	000ba240 	call	1000ba24 <__ledf2>
10000f58:	da013f17 	ldw	r8,1276(sp)
10000f5c:	1004fe16 	blt	r2,zero,10002358 <___vfprintf_internal_r+0x1db8>
10000f60:	dcc12783 	ldbu	r19,1182(sp)
10000f64:	008011c4 	movi	r2,71
10000f68:	14045d0e 	bge	r2,r16,100020e0 <___vfprintf_internal_r+0x1b40>
10000f6c:	01440074 	movhi	r5,4097
10000f70:	297d7404 	addi	r5,r5,-2608
10000f74:	d9413115 	stw	r5,1220(sp)
10000f78:	00c000c4 	movi	r3,3
10000f7c:	00bfdfc4 	movi	r2,-129
10000f80:	d8c12b15 	stw	r3,1196(sp)
10000f84:	e0b8703a 	and	fp,fp,r2
10000f88:	dc812d15 	stw	r18,1204(sp)
10000f8c:	1823883a 	mov	r17,r3
10000f90:	d8013215 	stw	zero,1224(sp)
10000f94:	d8013415 	stw	zero,1232(sp)
10000f98:	003f0106 	br	10000ba0 <___vfprintf_internal_r+0x600>
10000f9c:	9cc00214 	ori	r19,r19,8
10000fa0:	e005883a 	mov	r2,fp
10000fa4:	e4000007 	ldb	r16,0(fp)
10000fa8:	003de506 	br	10000740 <___vfprintf_internal_r+0x1a0>
10000fac:	da012a17 	ldw	r8,1192(sp)
10000fb0:	df012a15 	stw	fp,1192(sp)
10000fb4:	9f000414 	ori	fp,r19,16
10000fb8:	e0c0080c 	andi	r3,fp,32
10000fbc:	d8812d17 	ldw	r2,1204(sp)
10000fc0:	18007626 	beq	r3,zero,1000119c <___vfprintf_internal_r+0xbfc>
10000fc4:	d9412d17 	ldw	r5,1204(sp)
10000fc8:	14800017 	ldw	r18,0(r2)
10000fcc:	15400117 	ldw	r21,4(r2)
10000fd0:	29400204 	addi	r5,r5,8
10000fd4:	d9412d15 	stw	r5,1204(sp)
10000fd8:	0005883a 	mov	r2,zero
10000fdc:	9546b03a 	or	r3,r18,r21
10000fe0:	d8012785 	stb	zero,1182(sp)
10000fe4:	da413215 	stw	r9,1224(sp)
10000fe8:	0027883a 	mov	r19,zero
10000fec:	003ecd06 	br	10000b24 <___vfprintf_internal_r+0x584>
10000ff0:	da012a17 	ldw	r8,1192(sp)
10000ff4:	df012a15 	stw	fp,1192(sp)
10000ff8:	9f000414 	ori	fp,r19,16
10000ffc:	e0c0080c 	andi	r3,fp,32
10001000:	d8812d17 	ldw	r2,1204(sp)
10001004:	18002c26 	beq	r3,zero,100010b8 <___vfprintf_internal_r+0xb18>
10001008:	d9012d17 	ldw	r4,1204(sp)
1000100c:	14800017 	ldw	r18,0(r2)
10001010:	15400117 	ldw	r21,4(r2)
10001014:	21000204 	addi	r4,r4,8
10001018:	d9012d15 	stw	r4,1204(sp)
1000101c:	00800044 	movi	r2,1
10001020:	9546b03a 	or	r3,r18,r21
10001024:	003fee06 	br	10000fe0 <___vfprintf_internal_r+0xa40>
10001028:	da012a17 	ldw	r8,1192(sp)
1000102c:	df012a15 	stw	fp,1192(sp)
10001030:	9839883a 	mov	fp,r19
10001034:	dcc12b03 	ldbu	r19,1196(sp)
10001038:	01440074 	movhi	r5,4097
1000103c:	297d7704 	addi	r5,r5,-2596
10001040:	dcc12785 	stb	r19,1182(sp)
10001044:	d9413b15 	stw	r5,1260(sp)
10001048:	e0c0080c 	andi	r3,fp,32
1000104c:	d8812d17 	ldw	r2,1204(sp)
10001050:	18002e26 	beq	r3,zero,1000110c <___vfprintf_internal_r+0xb6c>
10001054:	d9412d17 	ldw	r5,1204(sp)
10001058:	14800017 	ldw	r18,0(r2)
1000105c:	15400117 	ldw	r21,4(r2)
10001060:	29400204 	addi	r5,r5,8
10001064:	d9412d15 	stw	r5,1204(sp)
10001068:	e080004c 	andi	r2,fp,1
1000106c:	10025c26 	beq	r2,zero,100019e0 <___vfprintf_internal_r+0x1440>
10001070:	9546b03a 	or	r3,r18,r21
10001074:	18038f26 	beq	r3,zero,10001eb4 <___vfprintf_internal_r+0x1914>
10001078:	00800c04 	movi	r2,48
1000107c:	d8812705 	stb	r2,1180(sp)
10001080:	dc012745 	stb	r16,1181(sp)
10001084:	e7000094 	ori	fp,fp,2
10001088:	00800084 	movi	r2,2
1000108c:	003fd406 	br	10000fe0 <___vfprintf_internal_r+0xa40>
10001090:	9cc00814 	ori	r19,r19,32
10001094:	e005883a 	mov	r2,fp
10001098:	e4000007 	ldb	r16,0(fp)
1000109c:	003da806 	br	10000740 <___vfprintf_internal_r+0x1a0>
100010a0:	da012a17 	ldw	r8,1192(sp)
100010a4:	df012a15 	stw	fp,1192(sp)
100010a8:	9839883a 	mov	fp,r19
100010ac:	e0c0080c 	andi	r3,fp,32
100010b0:	d8812d17 	ldw	r2,1204(sp)
100010b4:	183fd41e 	bne	r3,zero,10001008 <___vfprintf_internal_r+0xa68>
100010b8:	e0c0040c 	andi	r3,fp,16
100010bc:	18035f26 	beq	r3,zero,10001e3c <___vfprintf_internal_r+0x189c>
100010c0:	d9412d17 	ldw	r5,1204(sp)
100010c4:	14800017 	ldw	r18,0(r2)
100010c8:	002b883a 	mov	r21,zero
100010cc:	29400104 	addi	r5,r5,4
100010d0:	d9412d15 	stw	r5,1204(sp)
100010d4:	00800044 	movi	r2,1
100010d8:	9007883a 	mov	r3,r18
100010dc:	003fc006 	br	10000fe0 <___vfprintf_internal_r+0xa40>
100010e0:	da012a17 	ldw	r8,1192(sp)
100010e4:	df012a15 	stw	fp,1192(sp)
100010e8:	9839883a 	mov	fp,r19
100010ec:	dcc12b03 	ldbu	r19,1196(sp)
100010f0:	01040074 	movhi	r4,4097
100010f4:	213d7c04 	addi	r4,r4,-2576
100010f8:	d9013b15 	stw	r4,1260(sp)
100010fc:	dcc12785 	stb	r19,1182(sp)
10001100:	e0c0080c 	andi	r3,fp,32
10001104:	d8812d17 	ldw	r2,1204(sp)
10001108:	183fd21e 	bne	r3,zero,10001054 <___vfprintf_internal_r+0xab4>
1000110c:	e0c0040c 	andi	r3,fp,16
10001110:	18035426 	beq	r3,zero,10001e64 <___vfprintf_internal_r+0x18c4>
10001114:	d8c12d17 	ldw	r3,1204(sp)
10001118:	14800017 	ldw	r18,0(r2)
1000111c:	002b883a 	mov	r21,zero
10001120:	18c00104 	addi	r3,r3,4
10001124:	d8c12d15 	stw	r3,1204(sp)
10001128:	003fcf06 	br	10001068 <___vfprintf_internal_r+0xac8>
1000112c:	e4000007 	ldb	r16,0(fp)
10001130:	00801b04 	movi	r2,108
10001134:	8083f726 	beq	r16,r2,10002114 <___vfprintf_internal_r+0x1b74>
10001138:	9cc00414 	ori	r19,r19,16
1000113c:	e005883a 	mov	r2,fp
10001140:	003d7f06 	br	10000740 <___vfprintf_internal_r+0x1a0>
10001144:	da012a17 	ldw	r8,1192(sp)
10001148:	df012a15 	stw	fp,1192(sp)
1000114c:	9839883a 	mov	fp,r19
10001150:	dcc12b03 	ldbu	r19,1196(sp)
10001154:	e080080c 	andi	r2,fp,32
10001158:	dcc12785 	stb	r19,1182(sp)
1000115c:	10032226 	beq	r2,zero,10001de8 <___vfprintf_internal_r+0x1848>
10001160:	d9412d17 	ldw	r5,1204(sp)
10001164:	d9012f17 	ldw	r4,1212(sp)
10001168:	28800017 	ldw	r2,0(r5)
1000116c:	2007d7fa 	srai	r3,r4,31
10001170:	29400104 	addi	r5,r5,4
10001174:	d9412d15 	stw	r5,1204(sp)
10001178:	11000015 	stw	r4,0(r2)
1000117c:	10c00115 	stw	r3,4(r2)
10001180:	003d4406 	br	10000694 <___vfprintf_internal_r+0xf4>
10001184:	da012a17 	ldw	r8,1192(sp)
10001188:	df012a15 	stw	fp,1192(sp)
1000118c:	9839883a 	mov	fp,r19
10001190:	e0c0080c 	andi	r3,fp,32
10001194:	d8812d17 	ldw	r2,1204(sp)
10001198:	183f8a1e 	bne	r3,zero,10000fc4 <___vfprintf_internal_r+0xa24>
1000119c:	e0c0040c 	andi	r3,fp,16
100011a0:	18031c26 	beq	r3,zero,10001e14 <___vfprintf_internal_r+0x1874>
100011a4:	14800017 	ldw	r18,0(r2)
100011a8:	d8812d17 	ldw	r2,1204(sp)
100011ac:	002b883a 	mov	r21,zero
100011b0:	9007883a 	mov	r3,r18
100011b4:	10800104 	addi	r2,r2,4
100011b8:	d8812d15 	stw	r2,1204(sp)
100011bc:	0005883a 	mov	r2,zero
100011c0:	003f8706 	br	10000fe0 <___vfprintf_internal_r+0xa40>
100011c4:	d9412d17 	ldw	r5,1204(sp)
100011c8:	00800c04 	movi	r2,48
100011cc:	d8812705 	stb	r2,1180(sp)
100011d0:	2c800017 	ldw	r18,0(r5)
100011d4:	00801e04 	movi	r2,120
100011d8:	d8812745 	stb	r2,1181(sp)
100011dc:	00840074 	movhi	r2,4097
100011e0:	10bd7c04 	addi	r2,r2,-2576
100011e4:	29400104 	addi	r5,r5,4
100011e8:	da012a17 	ldw	r8,1192(sp)
100011ec:	d8813b15 	stw	r2,1260(sp)
100011f0:	df012a15 	stw	fp,1192(sp)
100011f4:	002b883a 	mov	r21,zero
100011f8:	9f000094 	ori	fp,r19,2
100011fc:	d9412d15 	stw	r5,1204(sp)
10001200:	00800084 	movi	r2,2
10001204:	04001e04 	movi	r16,120
10001208:	9007883a 	mov	r3,r18
1000120c:	003f7406 	br	10000fe0 <___vfprintf_internal_r+0xa40>
10001210:	da012a17 	ldw	r8,1192(sp)
10001214:	df012a15 	stw	fp,1192(sp)
10001218:	9839883a 	mov	fp,r19
1000121c:	dcc12b03 	ldbu	r19,1196(sp)
10001220:	e080080c 	andi	r2,fp,32
10001224:	d8c12d17 	ldw	r3,1204(sp)
10001228:	dcc12785 	stb	r19,1182(sp)
1000122c:	103e321e 	bne	r2,zero,10000af8 <___vfprintf_internal_r+0x558>
10001230:	e080040c 	andi	r2,fp,16
10001234:	10031326 	beq	r2,zero,10001e84 <___vfprintf_internal_r+0x18e4>
10001238:	1c800017 	ldw	r18,0(r3)
1000123c:	d9412d17 	ldw	r5,1204(sp)
10001240:	902bd7fa 	srai	r21,r18,31
10001244:	29400104 	addi	r5,r5,4
10001248:	d9412d15 	stw	r5,1204(sp)
1000124c:	a805883a 	mov	r2,r21
10001250:	003e2f06 	br	10000b10 <___vfprintf_internal_r+0x570>
10001254:	9cc01014 	ori	r19,r19,64
10001258:	e005883a 	mov	r2,fp
1000125c:	e4000007 	ldb	r16,0(fp)
10001260:	003d3706 	br	10000740 <___vfprintf_internal_r+0x1a0>
10001264:	d8c12d17 	ldw	r3,1204(sp)
10001268:	d9012d17 	ldw	r4,1204(sp)
1000126c:	da012a17 	ldw	r8,1192(sp)
10001270:	18800017 	ldw	r2,0(r3)
10001274:	21000104 	addi	r4,r4,4
10001278:	00c00044 	movi	r3,1
1000127c:	df012a15 	stw	fp,1192(sp)
10001280:	d8c12b15 	stw	r3,1196(sp)
10001284:	9839883a 	mov	fp,r19
10001288:	d8012785 	stb	zero,1182(sp)
1000128c:	d8810405 	stb	r2,1040(sp)
10001290:	d9012d15 	stw	r4,1204(sp)
10001294:	1823883a 	mov	r17,r3
10001298:	d8c10404 	addi	r3,sp,1040
1000129c:	d8013215 	stw	zero,1224(sp)
100012a0:	d8013415 	stw	zero,1232(sp)
100012a4:	d8c13115 	stw	r3,1220(sp)
100012a8:	0005883a 	mov	r2,zero
100012ac:	003e4306 	br	10000bbc <___vfprintf_internal_r+0x61c>
100012b0:	d8812b07 	ldb	r2,1196(sp)
100012b4:	1002fc1e 	bne	r2,zero,10001ea8 <___vfprintf_internal_r+0x1908>
100012b8:	00c00804 	movi	r3,32
100012bc:	d8c12b05 	stb	r3,1196(sp)
100012c0:	e005883a 	mov	r2,fp
100012c4:	e4000007 	ldb	r16,0(fp)
100012c8:	003d1d06 	br	10000740 <___vfprintf_internal_r+0x1a0>
100012cc:	9cc00054 	ori	r19,r19,1
100012d0:	e005883a 	mov	r2,fp
100012d4:	e4000007 	ldb	r16,0(fp)
100012d8:	003d1906 	br	10000740 <___vfprintf_internal_r+0x1a0>
100012dc:	d9012d17 	ldw	r4,1204(sp)
100012e0:	d9412d17 	ldw	r5,1204(sp)
100012e4:	21000017 	ldw	r4,0(r4)
100012e8:	28c00104 	addi	r3,r5,4
100012ec:	d9012e15 	stw	r4,1208(sp)
100012f0:	20038c16 	blt	r4,zero,10002124 <___vfprintf_internal_r+0x1b84>
100012f4:	d8c12d15 	stw	r3,1204(sp)
100012f8:	e005883a 	mov	r2,fp
100012fc:	e4000007 	ldb	r16,0(fp)
10001300:	003d0f06 	br	10000740 <___vfprintf_internal_r+0x1a0>
10001304:	00c00ac4 	movi	r3,43
10001308:	d8c12b05 	stb	r3,1196(sp)
1000130c:	e005883a 	mov	r2,fp
10001310:	e4000007 	ldb	r16,0(fp)
10001314:	003d0a06 	br	10000740 <___vfprintf_internal_r+0x1a0>
10001318:	d8c12d17 	ldw	r3,1204(sp)
1000131c:	d9012d17 	ldw	r4,1204(sp)
10001320:	da012a17 	ldw	r8,1192(sp)
10001324:	18c00017 	ldw	r3,0(r3)
10001328:	df012a15 	stw	fp,1192(sp)
1000132c:	d8012785 	stb	zero,1182(sp)
10001330:	d8c13115 	stw	r3,1220(sp)
10001334:	9839883a 	mov	fp,r19
10001338:	24800104 	addi	r18,r4,4
1000133c:	1803f726 	beq	r3,zero,1000231c <___vfprintf_internal_r+0x1d7c>
10001340:	d9013117 	ldw	r4,1220(sp)
10001344:	48038916 	blt	r9,zero,1000216c <___vfprintf_internal_r+0x1bcc>
10001348:	480d883a 	mov	r6,r9
1000134c:	000b883a 	mov	r5,zero
10001350:	da013f15 	stw	r8,1276(sp)
10001354:	da413e15 	stw	r9,1272(sp)
10001358:	0005bb40 	call	10005bb4 <memchr>
1000135c:	da013f17 	ldw	r8,1276(sp)
10001360:	da413e17 	ldw	r9,1272(sp)
10001364:	10045926 	beq	r2,zero,100024cc <___vfprintf_internal_r+0x1f2c>
10001368:	d8c13117 	ldw	r3,1220(sp)
1000136c:	10e3c83a 	sub	r17,r2,r3
10001370:	4c433516 	blt	r9,r17,10002048 <___vfprintf_internal_r+0x1aa8>
10001374:	8805883a 	mov	r2,r17
10001378:	88038116 	blt	r17,zero,10002180 <___vfprintf_internal_r+0x1be0>
1000137c:	dcc12783 	ldbu	r19,1182(sp)
10001380:	d8812b15 	stw	r2,1196(sp)
10001384:	dc812d15 	stw	r18,1204(sp)
10001388:	d8013215 	stw	zero,1224(sp)
1000138c:	d8013415 	stw	zero,1232(sp)
10001390:	003e0306 	br	10000ba0 <___vfprintf_internal_r+0x600>
10001394:	da012a17 	ldw	r8,1192(sp)
10001398:	df012a15 	stw	fp,1192(sp)
1000139c:	9839883a 	mov	fp,r19
100013a0:	dcc12b03 	ldbu	r19,1196(sp)
100013a4:	dcc12785 	stb	r19,1182(sp)
100013a8:	803d8f26 	beq	r16,zero,100009e8 <___vfprintf_internal_r+0x448>
100013ac:	00c00044 	movi	r3,1
100013b0:	d8c12b15 	stw	r3,1196(sp)
100013b4:	dc010405 	stb	r16,1040(sp)
100013b8:	d8012785 	stb	zero,1182(sp)
100013bc:	003fb506 	br	10001294 <___vfprintf_internal_r+0xcf4>
100013c0:	d8c12017 	ldw	r3,1152(sp)
100013c4:	003e3506 	br	10000c9c <___vfprintf_internal_r+0x6fc>
100013c8:	10803fcc 	andi	r2,r2,255
100013cc:	00c00044 	movi	r3,1
100013d0:	10fddc1e 	bne	r2,r3,10000b44 <___vfprintf_internal_r+0x5a4>
100013d4:	a800021e 	bne	r21,zero,100013e0 <___vfprintf_internal_r+0xe40>
100013d8:	00800244 	movi	r2,9
100013dc:	14801e2e 	bgeu	r2,r18,10001458 <___vfprintf_internal_r+0xeb8>
100013e0:	dc012b15 	stw	r16,1196(sp)
100013e4:	dc410e04 	addi	r17,sp,1080
100013e8:	9021883a 	mov	r16,r18
100013ec:	da012c15 	stw	r8,1200(sp)
100013f0:	a825883a 	mov	r18,r21
100013f4:	482b883a 	mov	r21,r9
100013f8:	8009883a 	mov	r4,r16
100013fc:	900b883a 	mov	r5,r18
10001400:	01800284 	movi	r6,10
10001404:	000f883a 	mov	r7,zero
10001408:	0009f340 	call	10009f34 <__umoddi3>
1000140c:	10800c04 	addi	r2,r2,48
10001410:	8c7fffc4 	addi	r17,r17,-1
10001414:	8009883a 	mov	r4,r16
10001418:	900b883a 	mov	r5,r18
1000141c:	01800284 	movi	r6,10
10001420:	000f883a 	mov	r7,zero
10001424:	88800005 	stb	r2,0(r17)
10001428:	00098f40 	call	100098f4 <__udivdi3>
1000142c:	1021883a 	mov	r16,r2
10001430:	10c4b03a 	or	r2,r2,r3
10001434:	1825883a 	mov	r18,r3
10001438:	103fef1e 	bne	r2,zero,100013f8 <___vfprintf_internal_r+0xe58>
1000143c:	d9012817 	ldw	r4,1184(sp)
10001440:	dc413115 	stw	r17,1220(sp)
10001444:	dc012b17 	ldw	r16,1196(sp)
10001448:	da012c17 	ldw	r8,1200(sp)
1000144c:	a813883a 	mov	r9,r21
10001450:	2463c83a 	sub	r17,r4,r17
10001454:	003dcd06 	br	10000b8c <___vfprintf_internal_r+0x5ec>
10001458:	94800c04 	addi	r18,r18,48
1000145c:	d8c10dc4 	addi	r3,sp,1079
10001460:	dc810dc5 	stb	r18,1079(sp)
10001464:	dc413c17 	ldw	r17,1264(sp)
10001468:	d8c13115 	stw	r3,1220(sp)
1000146c:	003dc706 	br	10000b8c <___vfprintf_internal_r+0x5ec>
10001470:	00801944 	movi	r2,101
10001474:	1400720e 	bge	r2,r16,10001640 <___vfprintf_internal_r+0x10a0>
10001478:	d9013717 	ldw	r4,1244(sp)
1000147c:	d9413917 	ldw	r5,1252(sp)
10001480:	000d883a 	mov	r6,zero
10001484:	000f883a 	mov	r7,zero
10001488:	d8c13d15 	stw	r3,1268(sp)
1000148c:	da013f15 	stw	r8,1276(sp)
10001490:	000b8c00 	call	1000b8c0 <__eqdf2>
10001494:	d8c13d17 	ldw	r3,1268(sp)
10001498:	da013f17 	ldw	r8,1276(sp)
1000149c:	1000f41e 	bne	r2,zero,10001870 <___vfprintf_internal_r+0x12d0>
100014a0:	d8811f17 	ldw	r2,1148(sp)
100014a4:	01040074 	movhi	r4,4097
100014a8:	213d8304 	addi	r4,r4,-2548
100014ac:	18c00044 	addi	r3,r3,1
100014b0:	10800044 	addi	r2,r2,1
100014b4:	41000015 	stw	r4,0(r8)
100014b8:	01000044 	movi	r4,1
100014bc:	41000115 	stw	r4,4(r8)
100014c0:	d8c12015 	stw	r3,1152(sp)
100014c4:	d8811f15 	stw	r2,1148(sp)
100014c8:	010001c4 	movi	r4,7
100014cc:	20828d16 	blt	r4,r2,10001f04 <___vfprintf_internal_r+0x1964>
100014d0:	42000204 	addi	r8,r8,8
100014d4:	d8812617 	ldw	r2,1176(sp)
100014d8:	d9413317 	ldw	r5,1228(sp)
100014dc:	11400216 	blt	r2,r5,100014e8 <___vfprintf_internal_r+0xf48>
100014e0:	e080004c 	andi	r2,fp,1
100014e4:	103e4126 	beq	r2,zero,10000dec <___vfprintf_internal_r+0x84c>
100014e8:	d8813817 	ldw	r2,1248(sp)
100014ec:	d9013517 	ldw	r4,1236(sp)
100014f0:	d9413817 	ldw	r5,1248(sp)
100014f4:	1887883a 	add	r3,r3,r2
100014f8:	d8811f17 	ldw	r2,1148(sp)
100014fc:	41000015 	stw	r4,0(r8)
10001500:	41400115 	stw	r5,4(r8)
10001504:	10800044 	addi	r2,r2,1
10001508:	d8c12015 	stw	r3,1152(sp)
1000150c:	d8811f15 	stw	r2,1148(sp)
10001510:	010001c4 	movi	r4,7
10001514:	20830916 	blt	r4,r2,1000213c <___vfprintf_internal_r+0x1b9c>
10001518:	42000204 	addi	r8,r8,8
1000151c:	d8813317 	ldw	r2,1228(sp)
10001520:	143fffc4 	addi	r16,r2,-1
10001524:	043e310e 	bge	zero,r16,10000dec <___vfprintf_internal_r+0x84c>
10001528:	04400404 	movi	r17,16
1000152c:	d8811f17 	ldw	r2,1148(sp)
10001530:	8c007e0e 	bge	r17,r16,1000172c <___vfprintf_internal_r+0x118c>
10001534:	01440074 	movhi	r5,4097
10001538:	297d8384 	addi	r5,r5,-2546
1000153c:	d9412c15 	stw	r5,1200(sp)
10001540:	04c001c4 	movi	r19,7
10001544:	00000306 	br	10001554 <___vfprintf_internal_r+0xfb4>
10001548:	42000204 	addi	r8,r8,8
1000154c:	843ffc04 	addi	r16,r16,-16
10001550:	8c00790e 	bge	r17,r16,10001738 <___vfprintf_internal_r+0x1198>
10001554:	18c00404 	addi	r3,r3,16
10001558:	10800044 	addi	r2,r2,1
1000155c:	45000015 	stw	r20,0(r8)
10001560:	44400115 	stw	r17,4(r8)
10001564:	d8c12015 	stw	r3,1152(sp)
10001568:	d8811f15 	stw	r2,1148(sp)
1000156c:	98bff60e 	bge	r19,r2,10001548 <___vfprintf_internal_r+0xfa8>
10001570:	b809883a 	mov	r4,r23
10001574:	b00b883a 	mov	r5,r22
10001578:	d9811e04 	addi	r6,sp,1144
1000157c:	0007b480 	call	10007b48 <__sprint_r>
10001580:	103d1f1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001584:	d8c12017 	ldw	r3,1152(sp)
10001588:	d8811f17 	ldw	r2,1148(sp)
1000158c:	da000404 	addi	r8,sp,16
10001590:	003fee06 	br	1000154c <___vfprintf_internal_r+0xfac>
10001594:	d9412e17 	ldw	r5,1208(sp)
10001598:	d8812b17 	ldw	r2,1196(sp)
1000159c:	28a7c83a 	sub	r19,r5,r2
100015a0:	04fddc0e 	bge	zero,r19,10000d14 <___vfprintf_internal_r+0x774>
100015a4:	05400404 	movi	r21,16
100015a8:	d8811f17 	ldw	r2,1148(sp)
100015ac:	acc3870e 	bge	r21,r19,100023cc <___vfprintf_internal_r+0x1e2c>
100015b0:	01440074 	movhi	r5,4097
100015b4:	297d8384 	addi	r5,r5,-2546
100015b8:	d9412c15 	stw	r5,1200(sp)
100015bc:	048001c4 	movi	r18,7
100015c0:	00000306 	br	100015d0 <___vfprintf_internal_r+0x1030>
100015c4:	9cfffc04 	addi	r19,r19,-16
100015c8:	42000204 	addi	r8,r8,8
100015cc:	acc0110e 	bge	r21,r19,10001614 <___vfprintf_internal_r+0x1074>
100015d0:	18c00404 	addi	r3,r3,16
100015d4:	10800044 	addi	r2,r2,1
100015d8:	45000015 	stw	r20,0(r8)
100015dc:	45400115 	stw	r21,4(r8)
100015e0:	d8c12015 	stw	r3,1152(sp)
100015e4:	d8811f15 	stw	r2,1148(sp)
100015e8:	90bff60e 	bge	r18,r2,100015c4 <___vfprintf_internal_r+0x1024>
100015ec:	b809883a 	mov	r4,r23
100015f0:	b00b883a 	mov	r5,r22
100015f4:	d9811e04 	addi	r6,sp,1144
100015f8:	0007b480 	call	10007b48 <__sprint_r>
100015fc:	103d001e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001600:	9cfffc04 	addi	r19,r19,-16
10001604:	d8c12017 	ldw	r3,1152(sp)
10001608:	d8811f17 	ldw	r2,1148(sp)
1000160c:	da000404 	addi	r8,sp,16
10001610:	acffef16 	blt	r21,r19,100015d0 <___vfprintf_internal_r+0x1030>
10001614:	d9012c17 	ldw	r4,1200(sp)
10001618:	1cc7883a 	add	r3,r3,r19
1000161c:	10800044 	addi	r2,r2,1
10001620:	41000015 	stw	r4,0(r8)
10001624:	44c00115 	stw	r19,4(r8)
10001628:	d8c12015 	stw	r3,1152(sp)
1000162c:	d8811f15 	stw	r2,1148(sp)
10001630:	010001c4 	movi	r4,7
10001634:	20817816 	blt	r4,r2,10001c18 <___vfprintf_internal_r+0x1678>
10001638:	42000204 	addi	r8,r8,8
1000163c:	003db506 	br	10000d14 <___vfprintf_internal_r+0x774>
10001640:	d9413317 	ldw	r5,1228(sp)
10001644:	00800044 	movi	r2,1
10001648:	18c00044 	addi	r3,r3,1
1000164c:	11413e0e 	bge	r2,r5,10001b48 <___vfprintf_internal_r+0x15a8>
10001650:	dc011f17 	ldw	r16,1148(sp)
10001654:	d8813117 	ldw	r2,1220(sp)
10001658:	d8c12015 	stw	r3,1152(sp)
1000165c:	84000044 	addi	r16,r16,1
10001660:	40800015 	stw	r2,0(r8)
10001664:	00800044 	movi	r2,1
10001668:	40800115 	stw	r2,4(r8)
1000166c:	dc011f15 	stw	r16,1148(sp)
10001670:	008001c4 	movi	r2,7
10001674:	14015616 	blt	r2,r16,10001bd0 <___vfprintf_internal_r+0x1630>
10001678:	42000204 	addi	r8,r8,8
1000167c:	d9013817 	ldw	r4,1248(sp)
10001680:	d9413517 	ldw	r5,1236(sp)
10001684:	84000044 	addi	r16,r16,1
10001688:	1907883a 	add	r3,r3,r4
1000168c:	41400015 	stw	r5,0(r8)
10001690:	41000115 	stw	r4,4(r8)
10001694:	d8c12015 	stw	r3,1152(sp)
10001698:	dc011f15 	stw	r16,1148(sp)
1000169c:	008001c4 	movi	r2,7
100016a0:	14015416 	blt	r2,r16,10001bf4 <___vfprintf_internal_r+0x1654>
100016a4:	44400204 	addi	r17,r8,8
100016a8:	d9013717 	ldw	r4,1244(sp)
100016ac:	d9413917 	ldw	r5,1252(sp)
100016b0:	000d883a 	mov	r6,zero
100016b4:	000f883a 	mov	r7,zero
100016b8:	d8c13d15 	stw	r3,1268(sp)
100016bc:	000b8c00 	call	1000b8c0 <__eqdf2>
100016c0:	d8c13d17 	ldw	r3,1268(sp)
100016c4:	1000a726 	beq	r2,zero,10001964 <___vfprintf_internal_r+0x13c4>
100016c8:	d9013317 	ldw	r4,1228(sp)
100016cc:	d9413117 	ldw	r5,1220(sp)
100016d0:	84000044 	addi	r16,r16,1
100016d4:	20bfffc4 	addi	r2,r4,-1
100016d8:	1887883a 	add	r3,r3,r2
100016dc:	29000044 	addi	r4,r5,1
100016e0:	88800115 	stw	r2,4(r17)
100016e4:	89000015 	stw	r4,0(r17)
100016e8:	d8c12015 	stw	r3,1152(sp)
100016ec:	dc011f15 	stw	r16,1148(sp)
100016f0:	008001c4 	movi	r2,7
100016f4:	14012d16 	blt	r2,r16,10001bac <___vfprintf_internal_r+0x160c>
100016f8:	8c400204 	addi	r17,r17,8
100016fc:	d9413a17 	ldw	r5,1256(sp)
10001700:	dcc122c4 	addi	r19,sp,1163
10001704:	84000044 	addi	r16,r16,1
10001708:	28c7883a 	add	r3,r5,r3
1000170c:	8cc00015 	stw	r19,0(r17)
10001710:	89400115 	stw	r5,4(r17)
10001714:	d8c12015 	stw	r3,1152(sp)
10001718:	dc011f15 	stw	r16,1148(sp)
1000171c:	008001c4 	movi	r2,7
10001720:	14000e16 	blt	r2,r16,1000175c <___vfprintf_internal_r+0x11bc>
10001724:	8a000204 	addi	r8,r17,8
10001728:	003db006 	br	10000dec <___vfprintf_internal_r+0x84c>
1000172c:	01040074 	movhi	r4,4097
10001730:	213d8384 	addi	r4,r4,-2546
10001734:	d9012c15 	stw	r4,1200(sp)
10001738:	d9012c17 	ldw	r4,1200(sp)
1000173c:	1c07883a 	add	r3,r3,r16
10001740:	44000115 	stw	r16,4(r8)
10001744:	41000015 	stw	r4,0(r8)
10001748:	10800044 	addi	r2,r2,1
1000174c:	d8c12015 	stw	r3,1152(sp)
10001750:	d8811f15 	stw	r2,1148(sp)
10001754:	010001c4 	movi	r4,7
10001758:	20bda30e 	bge	r4,r2,10000de8 <___vfprintf_internal_r+0x848>
1000175c:	b809883a 	mov	r4,r23
10001760:	b00b883a 	mov	r5,r22
10001764:	d9811e04 	addi	r6,sp,1144
10001768:	0007b480 	call	10007b48 <__sprint_r>
1000176c:	103ca41e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001770:	d8c12017 	ldw	r3,1152(sp)
10001774:	da000404 	addi	r8,sp,16
10001778:	003d9c06 	br	10000dec <___vfprintf_internal_r+0x84c>
1000177c:	b809883a 	mov	r4,r23
10001780:	b00b883a 	mov	r5,r22
10001784:	d9811e04 	addi	r6,sp,1144
10001788:	0007b480 	call	10007b48 <__sprint_r>
1000178c:	103dd226 	beq	r2,zero,10000ed8 <___vfprintf_internal_r+0x938>
10001790:	003c9b06 	br	10000a00 <___vfprintf_internal_r+0x460>
10001794:	10803fcc 	andi	r2,r2,255
10001798:	1000311e 	bne	r2,zero,10001860 <___vfprintf_internal_r+0x12c0>
1000179c:	e080004c 	andi	r2,fp,1
100017a0:	10002f26 	beq	r2,zero,10001860 <___vfprintf_internal_r+0x12c0>
100017a4:	00800c04 	movi	r2,48
100017a8:	d8c10dc4 	addi	r3,sp,1079
100017ac:	d8810dc5 	stb	r2,1079(sp)
100017b0:	dc413c17 	ldw	r17,1264(sp)
100017b4:	d8c13115 	stw	r3,1220(sp)
100017b8:	003cf406 	br	10000b8c <___vfprintf_internal_r+0x5ec>
100017bc:	b809883a 	mov	r4,r23
100017c0:	b00b883a 	mov	r5,r22
100017c4:	d9811e04 	addi	r6,sp,1144
100017c8:	0007b480 	call	10007b48 <__sprint_r>
100017cc:	103c8c1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
100017d0:	d8c12017 	ldw	r3,1152(sp)
100017d4:	da000404 	addi	r8,sp,16
100017d8:	003d7706 	br	10000db8 <___vfprintf_internal_r+0x818>
100017dc:	b809883a 	mov	r4,r23
100017e0:	b00b883a 	mov	r5,r22
100017e4:	d9811e04 	addi	r6,sp,1144
100017e8:	0007b480 	call	10007b48 <__sprint_r>
100017ec:	103c841e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
100017f0:	d8c12017 	ldw	r3,1152(sp)
100017f4:	da000404 	addi	r8,sp,16
100017f8:	003d3506 	br	10000cd0 <___vfprintf_internal_r+0x730>
100017fc:	b809883a 	mov	r4,r23
10001800:	b00b883a 	mov	r5,r22
10001804:	d9811e04 	addi	r6,sp,1144
10001808:	0007b480 	call	10007b48 <__sprint_r>
1000180c:	103c7c1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001810:	d8c12017 	ldw	r3,1152(sp)
10001814:	da000404 	addi	r8,sp,16
10001818:	003d3b06 	br	10000d08 <___vfprintf_internal_r+0x768>
1000181c:	d9413b17 	ldw	r5,1260(sp)
10001820:	d8c10e04 	addi	r3,sp,1080
10001824:	908003cc 	andi	r2,r18,15
10001828:	a808973a 	slli	r4,r21,28
1000182c:	2885883a 	add	r2,r5,r2
10001830:	9024d13a 	srli	r18,r18,4
10001834:	10800003 	ldbu	r2,0(r2)
10001838:	a82ad13a 	srli	r21,r21,4
1000183c:	18ffffc4 	addi	r3,r3,-1
10001840:	24a4b03a 	or	r18,r4,r18
10001844:	18800005 	stb	r2,0(r3)
10001848:	9544b03a 	or	r2,r18,r21
1000184c:	103ff51e 	bne	r2,zero,10001824 <___vfprintf_internal_r+0x1284>
10001850:	d9412817 	ldw	r5,1184(sp)
10001854:	d8c13115 	stw	r3,1220(sp)
10001858:	28e3c83a 	sub	r17,r5,r3
1000185c:	003ccb06 	br	10000b8c <___vfprintf_internal_r+0x5ec>
10001860:	d8c10e04 	addi	r3,sp,1080
10001864:	0023883a 	mov	r17,zero
10001868:	d8c13115 	stw	r3,1220(sp)
1000186c:	003cc706 	br	10000b8c <___vfprintf_internal_r+0x5ec>
10001870:	dc012617 	ldw	r16,1176(sp)
10001874:	0401ab0e 	bge	zero,r16,10001f24 <___vfprintf_internal_r+0x1984>
10001878:	d8813317 	ldw	r2,1228(sp)
1000187c:	d9413117 	ldw	r5,1220(sp)
10001880:	d9013417 	ldw	r4,1232(sp)
10001884:	1023883a 	mov	r17,r2
10001888:	28a1883a 	add	r16,r5,r2
1000188c:	2080010e 	bge	r4,r2,10001894 <___vfprintf_internal_r+0x12f4>
10001890:	2023883a 	mov	r17,r4
10001894:	04400b0e 	bge	zero,r17,100018c4 <___vfprintf_internal_r+0x1324>
10001898:	d8811f17 	ldw	r2,1148(sp)
1000189c:	d9413117 	ldw	r5,1220(sp)
100018a0:	1c47883a 	add	r3,r3,r17
100018a4:	10800044 	addi	r2,r2,1
100018a8:	41400015 	stw	r5,0(r8)
100018ac:	44400115 	stw	r17,4(r8)
100018b0:	d8c12015 	stw	r3,1152(sp)
100018b4:	d8811f15 	stw	r2,1148(sp)
100018b8:	010001c4 	movi	r4,7
100018bc:	20826716 	blt	r4,r2,1000225c <___vfprintf_internal_r+0x1cbc>
100018c0:	42000204 	addi	r8,r8,8
100018c4:	88026316 	blt	r17,zero,10002254 <___vfprintf_internal_r+0x1cb4>
100018c8:	d8813417 	ldw	r2,1232(sp)
100018cc:	1463c83a 	sub	r17,r2,r17
100018d0:	0440590e 	bge	zero,r17,10001a38 <___vfprintf_internal_r+0x1498>
100018d4:	04c00404 	movi	r19,16
100018d8:	d8811f17 	ldw	r2,1148(sp)
100018dc:	9c41770e 	bge	r19,r17,10001ebc <___vfprintf_internal_r+0x191c>
100018e0:	01440074 	movhi	r5,4097
100018e4:	297d8384 	addi	r5,r5,-2546
100018e8:	d9412c15 	stw	r5,1200(sp)
100018ec:	054001c4 	movi	r21,7
100018f0:	00000306 	br	10001900 <___vfprintf_internal_r+0x1360>
100018f4:	42000204 	addi	r8,r8,8
100018f8:	8c7ffc04 	addi	r17,r17,-16
100018fc:	9c41720e 	bge	r19,r17,10001ec8 <___vfprintf_internal_r+0x1928>
10001900:	18c00404 	addi	r3,r3,16
10001904:	10800044 	addi	r2,r2,1
10001908:	45000015 	stw	r20,0(r8)
1000190c:	44c00115 	stw	r19,4(r8)
10001910:	d8c12015 	stw	r3,1152(sp)
10001914:	d8811f15 	stw	r2,1148(sp)
10001918:	a8bff60e 	bge	r21,r2,100018f4 <___vfprintf_internal_r+0x1354>
1000191c:	b809883a 	mov	r4,r23
10001920:	b00b883a 	mov	r5,r22
10001924:	d9811e04 	addi	r6,sp,1144
10001928:	0007b480 	call	10007b48 <__sprint_r>
1000192c:	103c341e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001930:	d8c12017 	ldw	r3,1152(sp)
10001934:	d8811f17 	ldw	r2,1148(sp)
10001938:	da000404 	addi	r8,sp,16
1000193c:	003fee06 	br	100018f8 <___vfprintf_internal_r+0x1358>
10001940:	b809883a 	mov	r4,r23
10001944:	b00b883a 	mov	r5,r22
10001948:	d9811e04 	addi	r6,sp,1144
1000194c:	0007b480 	call	10007b48 <__sprint_r>
10001950:	103c2b1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001954:	d8c12017 	ldw	r3,1152(sp)
10001958:	d8812787 	ldb	r2,1182(sp)
1000195c:	da000404 	addi	r8,sp,16
10001960:	003cce06 	br	10000c9c <___vfprintf_internal_r+0x6fc>
10001964:	d8813317 	ldw	r2,1228(sp)
10001968:	14ffffc4 	addi	r19,r2,-1
1000196c:	04ff630e 	bge	zero,r19,100016fc <___vfprintf_internal_r+0x115c>
10001970:	05400404 	movi	r21,16
10001974:	acc0810e 	bge	r21,r19,10001b7c <___vfprintf_internal_r+0x15dc>
10001978:	01440074 	movhi	r5,4097
1000197c:	297d8384 	addi	r5,r5,-2546
10001980:	d9412c15 	stw	r5,1200(sp)
10001984:	01c001c4 	movi	r7,7
10001988:	00000306 	br	10001998 <___vfprintf_internal_r+0x13f8>
1000198c:	8c400204 	addi	r17,r17,8
10001990:	9cfffc04 	addi	r19,r19,-16
10001994:	acc07c0e 	bge	r21,r19,10001b88 <___vfprintf_internal_r+0x15e8>
10001998:	18c00404 	addi	r3,r3,16
1000199c:	84000044 	addi	r16,r16,1
100019a0:	8d000015 	stw	r20,0(r17)
100019a4:	8d400115 	stw	r21,4(r17)
100019a8:	d8c12015 	stw	r3,1152(sp)
100019ac:	dc011f15 	stw	r16,1148(sp)
100019b0:	3c3ff60e 	bge	r7,r16,1000198c <___vfprintf_internal_r+0x13ec>
100019b4:	b809883a 	mov	r4,r23
100019b8:	b00b883a 	mov	r5,r22
100019bc:	d9811e04 	addi	r6,sp,1144
100019c0:	d9c13d15 	stw	r7,1268(sp)
100019c4:	0007b480 	call	10007b48 <__sprint_r>
100019c8:	d9c13d17 	ldw	r7,1268(sp)
100019cc:	103c0c1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
100019d0:	d8c12017 	ldw	r3,1152(sp)
100019d4:	dc011f17 	ldw	r16,1148(sp)
100019d8:	dc400404 	addi	r17,sp,16
100019dc:	003fec06 	br	10001990 <___vfprintf_internal_r+0x13f0>
100019e0:	00800084 	movi	r2,2
100019e4:	9546b03a 	or	r3,r18,r21
100019e8:	003d7d06 	br	10000fe0 <___vfprintf_internal_r+0xa40>
100019ec:	10803fcc 	andi	r2,r2,255
100019f0:	1080201c 	xori	r2,r2,128
100019f4:	10bfe004 	addi	r2,r2,-128
100019f8:	01000c04 	movi	r4,48
100019fc:	1101d726 	beq	r2,r4,1000215c <___vfprintf_internal_r+0x1bbc>
10001a00:	d9413117 	ldw	r5,1220(sp)
10001a04:	d8812817 	ldw	r2,1184(sp)
10001a08:	193fffc5 	stb	r4,-1(r3)
10001a0c:	297fffc4 	addi	r5,r5,-1
10001a10:	d9413115 	stw	r5,1220(sp)
10001a14:	1163c83a 	sub	r17,r2,r5
10001a18:	003c5c06 	br	10000b8c <___vfprintf_internal_r+0x5ec>
10001a1c:	b809883a 	mov	r4,r23
10001a20:	b00b883a 	mov	r5,r22
10001a24:	d9811e04 	addi	r6,sp,1144
10001a28:	0007b480 	call	10007b48 <__sprint_r>
10001a2c:	103bf41e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001a30:	d8c12017 	ldw	r3,1152(sp)
10001a34:	da000404 	addi	r8,sp,16
10001a38:	d9413117 	ldw	r5,1220(sp)
10001a3c:	d9013417 	ldw	r4,1232(sp)
10001a40:	d8812617 	ldw	r2,1176(sp)
10001a44:	2923883a 	add	r17,r5,r4
10001a48:	d9413317 	ldw	r5,1228(sp)
10001a4c:	11400216 	blt	r2,r5,10001a58 <___vfprintf_internal_r+0x14b8>
10001a50:	e100004c 	andi	r4,fp,1
10001a54:	20000d26 	beq	r4,zero,10001a8c <___vfprintf_internal_r+0x14ec>
10001a58:	d9013817 	ldw	r4,1248(sp)
10001a5c:	d9413517 	ldw	r5,1236(sp)
10001a60:	1907883a 	add	r3,r3,r4
10001a64:	d9011f17 	ldw	r4,1148(sp)
10001a68:	41400015 	stw	r5,0(r8)
10001a6c:	d9413817 	ldw	r5,1248(sp)
10001a70:	21000044 	addi	r4,r4,1
10001a74:	d8c12015 	stw	r3,1152(sp)
10001a78:	41400115 	stw	r5,4(r8)
10001a7c:	d9011f15 	stw	r4,1148(sp)
10001a80:	014001c4 	movi	r5,7
10001a84:	2901fd16 	blt	r5,r4,1000227c <___vfprintf_internal_r+0x1cdc>
10001a88:	42000204 	addi	r8,r8,8
10001a8c:	d9013317 	ldw	r4,1228(sp)
10001a90:	2085c83a 	sub	r2,r4,r2
10001a94:	8449c83a 	sub	r4,r16,r17
10001a98:	1021883a 	mov	r16,r2
10001a9c:	2080010e 	bge	r4,r2,10001aa4 <___vfprintf_internal_r+0x1504>
10001aa0:	2021883a 	mov	r16,r4
10001aa4:	04000a0e 	bge	zero,r16,10001ad0 <___vfprintf_internal_r+0x1530>
10001aa8:	d9011f17 	ldw	r4,1148(sp)
10001aac:	1c07883a 	add	r3,r3,r16
10001ab0:	44400015 	stw	r17,0(r8)
10001ab4:	21000044 	addi	r4,r4,1
10001ab8:	44000115 	stw	r16,4(r8)
10001abc:	d8c12015 	stw	r3,1152(sp)
10001ac0:	d9011f15 	stw	r4,1148(sp)
10001ac4:	014001c4 	movi	r5,7
10001ac8:	29020916 	blt	r5,r4,100022f0 <___vfprintf_internal_r+0x1d50>
10001acc:	42000204 	addi	r8,r8,8
10001ad0:	80020116 	blt	r16,zero,100022d8 <___vfprintf_internal_r+0x1d38>
10001ad4:	1421c83a 	sub	r16,r2,r16
10001ad8:	043cc40e 	bge	zero,r16,10000dec <___vfprintf_internal_r+0x84c>
10001adc:	04400404 	movi	r17,16
10001ae0:	d8811f17 	ldw	r2,1148(sp)
10001ae4:	8c3f110e 	bge	r17,r16,1000172c <___vfprintf_internal_r+0x118c>
10001ae8:	01440074 	movhi	r5,4097
10001aec:	297d8384 	addi	r5,r5,-2546
10001af0:	d9412c15 	stw	r5,1200(sp)
10001af4:	04c001c4 	movi	r19,7
10001af8:	00000306 	br	10001b08 <___vfprintf_internal_r+0x1568>
10001afc:	42000204 	addi	r8,r8,8
10001b00:	843ffc04 	addi	r16,r16,-16
10001b04:	8c3f0c0e 	bge	r17,r16,10001738 <___vfprintf_internal_r+0x1198>
10001b08:	18c00404 	addi	r3,r3,16
10001b0c:	10800044 	addi	r2,r2,1
10001b10:	45000015 	stw	r20,0(r8)
10001b14:	44400115 	stw	r17,4(r8)
10001b18:	d8c12015 	stw	r3,1152(sp)
10001b1c:	d8811f15 	stw	r2,1148(sp)
10001b20:	98bff60e 	bge	r19,r2,10001afc <___vfprintf_internal_r+0x155c>
10001b24:	b809883a 	mov	r4,r23
10001b28:	b00b883a 	mov	r5,r22
10001b2c:	d9811e04 	addi	r6,sp,1144
10001b30:	0007b480 	call	10007b48 <__sprint_r>
10001b34:	103bb21e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001b38:	d8c12017 	ldw	r3,1152(sp)
10001b3c:	d8811f17 	ldw	r2,1148(sp)
10001b40:	da000404 	addi	r8,sp,16
10001b44:	003fee06 	br	10001b00 <___vfprintf_internal_r+0x1560>
10001b48:	e088703a 	and	r4,fp,r2
10001b4c:	203ec01e 	bne	r4,zero,10001650 <___vfprintf_internal_r+0x10b0>
10001b50:	dc011f17 	ldw	r16,1148(sp)
10001b54:	d9013117 	ldw	r4,1220(sp)
10001b58:	40800115 	stw	r2,4(r8)
10001b5c:	84000044 	addi	r16,r16,1
10001b60:	41000015 	stw	r4,0(r8)
10001b64:	d8c12015 	stw	r3,1152(sp)
10001b68:	dc011f15 	stw	r16,1148(sp)
10001b6c:	008001c4 	movi	r2,7
10001b70:	14000e16 	blt	r2,r16,10001bac <___vfprintf_internal_r+0x160c>
10001b74:	44400204 	addi	r17,r8,8
10001b78:	003ee006 	br	100016fc <___vfprintf_internal_r+0x115c>
10001b7c:	01040074 	movhi	r4,4097
10001b80:	213d8384 	addi	r4,r4,-2546
10001b84:	d9012c15 	stw	r4,1200(sp)
10001b88:	d8812c17 	ldw	r2,1200(sp)
10001b8c:	1cc7883a 	add	r3,r3,r19
10001b90:	84000044 	addi	r16,r16,1
10001b94:	88800015 	stw	r2,0(r17)
10001b98:	8cc00115 	stw	r19,4(r17)
10001b9c:	d8c12015 	stw	r3,1152(sp)
10001ba0:	dc011f15 	stw	r16,1148(sp)
10001ba4:	008001c4 	movi	r2,7
10001ba8:	143ed30e 	bge	r2,r16,100016f8 <___vfprintf_internal_r+0x1158>
10001bac:	b809883a 	mov	r4,r23
10001bb0:	b00b883a 	mov	r5,r22
10001bb4:	d9811e04 	addi	r6,sp,1144
10001bb8:	0007b480 	call	10007b48 <__sprint_r>
10001bbc:	103b901e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001bc0:	d8c12017 	ldw	r3,1152(sp)
10001bc4:	dc011f17 	ldw	r16,1148(sp)
10001bc8:	dc400404 	addi	r17,sp,16
10001bcc:	003ecb06 	br	100016fc <___vfprintf_internal_r+0x115c>
10001bd0:	b809883a 	mov	r4,r23
10001bd4:	b00b883a 	mov	r5,r22
10001bd8:	d9811e04 	addi	r6,sp,1144
10001bdc:	0007b480 	call	10007b48 <__sprint_r>
10001be0:	103b871e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001be4:	d8c12017 	ldw	r3,1152(sp)
10001be8:	dc011f17 	ldw	r16,1148(sp)
10001bec:	da000404 	addi	r8,sp,16
10001bf0:	003ea206 	br	1000167c <___vfprintf_internal_r+0x10dc>
10001bf4:	b809883a 	mov	r4,r23
10001bf8:	b00b883a 	mov	r5,r22
10001bfc:	d9811e04 	addi	r6,sp,1144
10001c00:	0007b480 	call	10007b48 <__sprint_r>
10001c04:	103b7e1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001c08:	d8c12017 	ldw	r3,1152(sp)
10001c0c:	dc011f17 	ldw	r16,1148(sp)
10001c10:	dc400404 	addi	r17,sp,16
10001c14:	003ea406 	br	100016a8 <___vfprintf_internal_r+0x1108>
10001c18:	b809883a 	mov	r4,r23
10001c1c:	b00b883a 	mov	r5,r22
10001c20:	d9811e04 	addi	r6,sp,1144
10001c24:	0007b480 	call	10007b48 <__sprint_r>
10001c28:	103b751e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001c2c:	d8c12017 	ldw	r3,1152(sp)
10001c30:	da000404 	addi	r8,sp,16
10001c34:	003c3706 	br	10000d14 <___vfprintf_internal_r+0x774>
10001c38:	04a5c83a 	sub	r18,zero,r18
10001c3c:	9004c03a 	cmpne	r2,r18,zero
10001c40:	056bc83a 	sub	r21,zero,r21
10001c44:	a8abc83a 	sub	r21,r21,r2
10001c48:	04c00b44 	movi	r19,45
10001c4c:	dcc12785 	stb	r19,1182(sp)
10001c50:	da413215 	stw	r9,1224(sp)
10001c54:	00800044 	movi	r2,1
10001c58:	9546b03a 	or	r3,r18,r21
10001c5c:	003bb106 	br	10000b24 <___vfprintf_internal_r+0x584>
10001c60:	da013f15 	stw	r8,1276(sp)
10001c64:	da413e15 	stw	r9,1272(sp)
10001c68:	00077a40 	call	100077a4 <__fpclassifyd>
10001c6c:	da013f17 	ldw	r8,1276(sp)
10001c70:	da413e17 	ldw	r9,1272(sp)
10001c74:	1000e526 	beq	r2,zero,1000200c <___vfprintf_internal_r+0x1a6c>
10001c78:	04fff7c4 	movi	r19,-33
10001c7c:	00bfffc4 	movi	r2,-1
10001c80:	84e6703a 	and	r19,r16,r19
10001c84:	48822926 	beq	r9,r2,1000252c <___vfprintf_internal_r+0x1f8c>
10001c88:	008011c4 	movi	r2,71
10001c8c:	98821626 	beq	r19,r2,100024e8 <___vfprintf_internal_r+0x1f48>
10001c90:	d9013917 	ldw	r4,1252(sp)
10001c94:	e0c04014 	ori	r3,fp,256
10001c98:	d8c12d15 	stw	r3,1204(sp)
10001c9c:	20021f16 	blt	r4,zero,1000251c <___vfprintf_internal_r+0x1f7c>
10001ca0:	dc413917 	ldw	r17,1252(sp)
10001ca4:	d8012b05 	stb	zero,1196(sp)
10001ca8:	00801984 	movi	r2,102
10001cac:	80814d26 	beq	r16,r2,100021e4 <___vfprintf_internal_r+0x1c44>
10001cb0:	00801184 	movi	r2,70
10001cb4:	80814b26 	beq	r16,r2,100021e4 <___vfprintf_internal_r+0x1c44>
10001cb8:	00801144 	movi	r2,69
10001cbc:	98821d26 	beq	r19,r2,10002534 <___vfprintf_internal_r+0x1f94>
10001cc0:	482b883a 	mov	r21,r9
10001cc4:	d8812604 	addi	r2,sp,1176
10001cc8:	d8800115 	stw	r2,4(sp)
10001ccc:	d9413717 	ldw	r5,1244(sp)
10001cd0:	d8812504 	addi	r2,sp,1172
10001cd4:	d8800215 	stw	r2,8(sp)
10001cd8:	d8812104 	addi	r2,sp,1156
10001cdc:	dd400015 	stw	r21,0(sp)
10001ce0:	d8800315 	stw	r2,12(sp)
10001ce4:	b809883a 	mov	r4,r23
10001ce8:	880d883a 	mov	r6,r17
10001cec:	01c00084 	movi	r7,2
10001cf0:	da013f15 	stw	r8,1276(sp)
10001cf4:	da413e15 	stw	r9,1272(sp)
10001cf8:	0002a180 	call	10002a18 <_dtoa_r>
10001cfc:	d8813115 	stw	r2,1220(sp)
10001d00:	008019c4 	movi	r2,103
10001d04:	da013f17 	ldw	r8,1276(sp)
10001d08:	da413e17 	ldw	r9,1272(sp)
10001d0c:	80800226 	beq	r16,r2,10001d18 <___vfprintf_internal_r+0x1778>
10001d10:	008011c4 	movi	r2,71
10001d14:	8081451e 	bne	r16,r2,1000222c <___vfprintf_internal_r+0x1c8c>
10001d18:	e080004c 	andi	r2,fp,1
10001d1c:	10021e26 	beq	r2,zero,10002598 <___vfprintf_internal_r+0x1ff8>
10001d20:	d8c13117 	ldw	r3,1220(sp)
10001d24:	1d55883a 	add	r10,r3,r21
10001d28:	d9013717 	ldw	r4,1244(sp)
10001d2c:	880b883a 	mov	r5,r17
10001d30:	000d883a 	mov	r6,zero
10001d34:	000f883a 	mov	r7,zero
10001d38:	da013f15 	stw	r8,1276(sp)
10001d3c:	da413e15 	stw	r9,1272(sp)
10001d40:	da813d15 	stw	r10,1268(sp)
10001d44:	000b8c00 	call	1000b8c0 <__eqdf2>
10001d48:	da013f17 	ldw	r8,1276(sp)
10001d4c:	da413e17 	ldw	r9,1272(sp)
10001d50:	da813d17 	ldw	r10,1268(sp)
10001d54:	1001a126 	beq	r2,zero,100023dc <___vfprintf_internal_r+0x1e3c>
10001d58:	d8812117 	ldw	r2,1156(sp)
10001d5c:	1280062e 	bgeu	r2,r10,10001d78 <___vfprintf_internal_r+0x17d8>
10001d60:	01000c04 	movi	r4,48
10001d64:	10c00044 	addi	r3,r2,1
10001d68:	d8c12115 	stw	r3,1156(sp)
10001d6c:	11000005 	stb	r4,0(r2)
10001d70:	d8812117 	ldw	r2,1156(sp)
10001d74:	12bffb36 	bltu	r2,r10,10001d64 <___vfprintf_internal_r+0x17c4>
10001d78:	d8c13117 	ldw	r3,1220(sp)
10001d7c:	10c5c83a 	sub	r2,r2,r3
10001d80:	d8813315 	stw	r2,1228(sp)
10001d84:	008011c4 	movi	r2,71
10001d88:	98818926 	beq	r19,r2,100023b0 <___vfprintf_internal_r+0x1e10>
10001d8c:	00801944 	movi	r2,101
10001d90:	14023c0e 	bge	r2,r16,10002684 <___vfprintf_internal_r+0x20e4>
10001d94:	d8c12617 	ldw	r3,1176(sp)
10001d98:	00801984 	movi	r2,102
10001d9c:	d8c13415 	stw	r3,1232(sp)
10001da0:	8081ef26 	beq	r16,r2,10002560 <___vfprintf_internal_r+0x1fc0>
10001da4:	d8c13417 	ldw	r3,1232(sp)
10001da8:	d9013317 	ldw	r4,1228(sp)
10001dac:	1901e316 	blt	r3,r4,1000253c <___vfprintf_internal_r+0x1f9c>
10001db0:	e080004c 	andi	r2,fp,1
10001db4:	1001f426 	beq	r2,zero,10002588 <___vfprintf_internal_r+0x1fe8>
10001db8:	d8c13417 	ldw	r3,1232(sp)
10001dbc:	1c400044 	addi	r17,r3,1
10001dc0:	8839883a 	mov	fp,r17
10001dc4:	8801e416 	blt	r17,zero,10002558 <___vfprintf_internal_r+0x1fb8>
10001dc8:	dd412b07 	ldb	r21,1196(sp)
10001dcc:	a801701e 	bne	r21,zero,10002390 <___vfprintf_internal_r+0x1df0>
10001dd0:	df012b15 	stw	fp,1196(sp)
10001dd4:	dcc12783 	ldbu	r19,1182(sp)
10001dd8:	df012d17 	ldw	fp,1204(sp)
10001ddc:	d8013215 	stw	zero,1224(sp)
10001de0:	dc812d15 	stw	r18,1204(sp)
10001de4:	003b6e06 	br	10000ba0 <___vfprintf_internal_r+0x600>
10001de8:	e080040c 	andi	r2,fp,16
10001dec:	1000b51e 	bne	r2,zero,100020c4 <___vfprintf_internal_r+0x1b24>
10001df0:	e080100c 	andi	r2,fp,64
10001df4:	10015b26 	beq	r2,zero,10002364 <___vfprintf_internal_r+0x1dc4>
10001df8:	d9012d17 	ldw	r4,1204(sp)
10001dfc:	d9412f17 	ldw	r5,1212(sp)
10001e00:	20800017 	ldw	r2,0(r4)
10001e04:	21000104 	addi	r4,r4,4
10001e08:	d9012d15 	stw	r4,1204(sp)
10001e0c:	1140000d 	sth	r5,0(r2)
10001e10:	003a2006 	br	10000694 <___vfprintf_internal_r+0xf4>
10001e14:	e0c0100c 	andi	r3,fp,64
10001e18:	1800a226 	beq	r3,zero,100020a4 <___vfprintf_internal_r+0x1b04>
10001e1c:	d8c12d17 	ldw	r3,1204(sp)
10001e20:	1480000b 	ldhu	r18,0(r2)
10001e24:	002b883a 	mov	r21,zero
10001e28:	18c00104 	addi	r3,r3,4
10001e2c:	d8c12d15 	stw	r3,1204(sp)
10001e30:	0005883a 	mov	r2,zero
10001e34:	9007883a 	mov	r3,r18
10001e38:	003c6906 	br	10000fe0 <___vfprintf_internal_r+0xa40>
10001e3c:	e0c0100c 	andi	r3,fp,64
10001e40:	18009026 	beq	r3,zero,10002084 <___vfprintf_internal_r+0x1ae4>
10001e44:	1480000b 	ldhu	r18,0(r2)
10001e48:	d8812d17 	ldw	r2,1204(sp)
10001e4c:	002b883a 	mov	r21,zero
10001e50:	9007883a 	mov	r3,r18
10001e54:	10800104 	addi	r2,r2,4
10001e58:	d8812d15 	stw	r2,1204(sp)
10001e5c:	00800044 	movi	r2,1
10001e60:	003c5f06 	br	10000fe0 <___vfprintf_internal_r+0xa40>
10001e64:	e0c0100c 	andi	r3,fp,64
10001e68:	18008026 	beq	r3,zero,1000206c <___vfprintf_internal_r+0x1acc>
10001e6c:	d9012d17 	ldw	r4,1204(sp)
10001e70:	1480000b 	ldhu	r18,0(r2)
10001e74:	002b883a 	mov	r21,zero
10001e78:	21000104 	addi	r4,r4,4
10001e7c:	d9012d15 	stw	r4,1204(sp)
10001e80:	003c7906 	br	10001068 <___vfprintf_internal_r+0xac8>
10001e84:	e080100c 	andi	r2,fp,64
10001e88:	10007126 	beq	r2,zero,10002050 <___vfprintf_internal_r+0x1ab0>
10001e8c:	1c80000f 	ldh	r18,0(r3)
10001e90:	d8812d17 	ldw	r2,1204(sp)
10001e94:	902bd7fa 	srai	r21,r18,31
10001e98:	10800104 	addi	r2,r2,4
10001e9c:	d8812d15 	stw	r2,1204(sp)
10001ea0:	a805883a 	mov	r2,r21
10001ea4:	003b1a06 	br	10000b10 <___vfprintf_internal_r+0x570>
10001ea8:	e4000007 	ldb	r16,0(fp)
10001eac:	e005883a 	mov	r2,fp
10001eb0:	003a2306 	br	10000740 <___vfprintf_internal_r+0x1a0>
10001eb4:	00800084 	movi	r2,2
10001eb8:	003c4906 	br	10000fe0 <___vfprintf_internal_r+0xa40>
10001ebc:	01040074 	movhi	r4,4097
10001ec0:	213d8384 	addi	r4,r4,-2546
10001ec4:	d9012c15 	stw	r4,1200(sp)
10001ec8:	d9012c17 	ldw	r4,1200(sp)
10001ecc:	1c47883a 	add	r3,r3,r17
10001ed0:	10800044 	addi	r2,r2,1
10001ed4:	41000015 	stw	r4,0(r8)
10001ed8:	44400115 	stw	r17,4(r8)
10001edc:	d8c12015 	stw	r3,1152(sp)
10001ee0:	d8811f15 	stw	r2,1148(sp)
10001ee4:	010001c4 	movi	r4,7
10001ee8:	20becc16 	blt	r4,r2,10001a1c <___vfprintf_internal_r+0x147c>
10001eec:	42000204 	addi	r8,r8,8
10001ef0:	003ed106 	br	10001a38 <___vfprintf_internal_r+0x1498>
10001ef4:	01040074 	movhi	r4,4097
10001ef8:	213d8384 	addi	r4,r4,-2546
10001efc:	d9012c15 	stw	r4,1200(sp)
10001f00:	003ba306 	br	10000d90 <___vfprintf_internal_r+0x7f0>
10001f04:	b809883a 	mov	r4,r23
10001f08:	b00b883a 	mov	r5,r22
10001f0c:	d9811e04 	addi	r6,sp,1144
10001f10:	0007b480 	call	10007b48 <__sprint_r>
10001f14:	103aba1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001f18:	d8c12017 	ldw	r3,1152(sp)
10001f1c:	da000404 	addi	r8,sp,16
10001f20:	003d6c06 	br	100014d4 <___vfprintf_internal_r+0xf34>
10001f24:	d8811f17 	ldw	r2,1148(sp)
10001f28:	01440074 	movhi	r5,4097
10001f2c:	01000044 	movi	r4,1
10001f30:	18c00044 	addi	r3,r3,1
10001f34:	10800044 	addi	r2,r2,1
10001f38:	297d8304 	addi	r5,r5,-2548
10001f3c:	41000115 	stw	r4,4(r8)
10001f40:	41400015 	stw	r5,0(r8)
10001f44:	d8c12015 	stw	r3,1152(sp)
10001f48:	d8811f15 	stw	r2,1148(sp)
10001f4c:	010001c4 	movi	r4,7
10001f50:	20806716 	blt	r4,r2,100020f0 <___vfprintf_internal_r+0x1b50>
10001f54:	42000204 	addi	r8,r8,8
10001f58:	8000041e 	bne	r16,zero,10001f6c <___vfprintf_internal_r+0x19cc>
10001f5c:	d8813317 	ldw	r2,1228(sp)
10001f60:	1000021e 	bne	r2,zero,10001f6c <___vfprintf_internal_r+0x19cc>
10001f64:	e080004c 	andi	r2,fp,1
10001f68:	103ba026 	beq	r2,zero,10000dec <___vfprintf_internal_r+0x84c>
10001f6c:	d9013817 	ldw	r4,1248(sp)
10001f70:	d8811f17 	ldw	r2,1148(sp)
10001f74:	d9413517 	ldw	r5,1236(sp)
10001f78:	1907883a 	add	r3,r3,r4
10001f7c:	10800044 	addi	r2,r2,1
10001f80:	41000115 	stw	r4,4(r8)
10001f84:	41400015 	stw	r5,0(r8)
10001f88:	d8c12015 	stw	r3,1152(sp)
10001f8c:	d8811f15 	stw	r2,1148(sp)
10001f90:	010001c4 	movi	r4,7
10001f94:	20815716 	blt	r4,r2,100024f4 <___vfprintf_internal_r+0x1f54>
10001f98:	42000204 	addi	r8,r8,8
10001f9c:	0421c83a 	sub	r16,zero,r16
10001fa0:	0400810e 	bge	zero,r16,100021a8 <___vfprintf_internal_r+0x1c08>
10001fa4:	04400404 	movi	r17,16
10001fa8:	8c00bd0e 	bge	r17,r16,100022a0 <___vfprintf_internal_r+0x1d00>
10001fac:	01440074 	movhi	r5,4097
10001fb0:	297d8384 	addi	r5,r5,-2546
10001fb4:	d9412c15 	stw	r5,1200(sp)
10001fb8:	04c001c4 	movi	r19,7
10001fbc:	00000306 	br	10001fcc <___vfprintf_internal_r+0x1a2c>
10001fc0:	42000204 	addi	r8,r8,8
10001fc4:	843ffc04 	addi	r16,r16,-16
10001fc8:	8c00b80e 	bge	r17,r16,100022ac <___vfprintf_internal_r+0x1d0c>
10001fcc:	18c00404 	addi	r3,r3,16
10001fd0:	10800044 	addi	r2,r2,1
10001fd4:	45000015 	stw	r20,0(r8)
10001fd8:	44400115 	stw	r17,4(r8)
10001fdc:	d8c12015 	stw	r3,1152(sp)
10001fe0:	d8811f15 	stw	r2,1148(sp)
10001fe4:	98bff60e 	bge	r19,r2,10001fc0 <___vfprintf_internal_r+0x1a20>
10001fe8:	b809883a 	mov	r4,r23
10001fec:	b00b883a 	mov	r5,r22
10001ff0:	d9811e04 	addi	r6,sp,1144
10001ff4:	0007b480 	call	10007b48 <__sprint_r>
10001ff8:	103a811e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10001ffc:	d8c12017 	ldw	r3,1152(sp)
10002000:	d8811f17 	ldw	r2,1148(sp)
10002004:	da000404 	addi	r8,sp,16
10002008:	003fee06 	br	10001fc4 <___vfprintf_internal_r+0x1a24>
1000200c:	008011c4 	movi	r2,71
10002010:	1400db16 	blt	r2,r16,10002380 <___vfprintf_internal_r+0x1de0>
10002014:	01040074 	movhi	r4,4097
10002018:	213d7504 	addi	r4,r4,-2604
1000201c:	d9013115 	stw	r4,1220(sp)
10002020:	00c000c4 	movi	r3,3
10002024:	00bfdfc4 	movi	r2,-129
10002028:	d8c12b15 	stw	r3,1196(sp)
1000202c:	e0b8703a 	and	fp,fp,r2
10002030:	dcc12783 	ldbu	r19,1182(sp)
10002034:	dc812d15 	stw	r18,1204(sp)
10002038:	1823883a 	mov	r17,r3
1000203c:	d8013215 	stw	zero,1224(sp)
10002040:	d8013415 	stw	zero,1232(sp)
10002044:	003ad606 	br	10000ba0 <___vfprintf_internal_r+0x600>
10002048:	4823883a 	mov	r17,r9
1000204c:	003cc906 	br	10001374 <___vfprintf_internal_r+0xdd4>
10002050:	1c800017 	ldw	r18,0(r3)
10002054:	d8c12d17 	ldw	r3,1204(sp)
10002058:	902bd7fa 	srai	r21,r18,31
1000205c:	18c00104 	addi	r3,r3,4
10002060:	d8c12d15 	stw	r3,1204(sp)
10002064:	a805883a 	mov	r2,r21
10002068:	003aa906 	br	10000b10 <___vfprintf_internal_r+0x570>
1000206c:	d9412d17 	ldw	r5,1204(sp)
10002070:	14800017 	ldw	r18,0(r2)
10002074:	002b883a 	mov	r21,zero
10002078:	29400104 	addi	r5,r5,4
1000207c:	d9412d15 	stw	r5,1204(sp)
10002080:	003bf906 	br	10001068 <___vfprintf_internal_r+0xac8>
10002084:	d8c12d17 	ldw	r3,1204(sp)
10002088:	14800017 	ldw	r18,0(r2)
1000208c:	002b883a 	mov	r21,zero
10002090:	18c00104 	addi	r3,r3,4
10002094:	d8c12d15 	stw	r3,1204(sp)
10002098:	00800044 	movi	r2,1
1000209c:	9007883a 	mov	r3,r18
100020a0:	003bcf06 	br	10000fe0 <___vfprintf_internal_r+0xa40>
100020a4:	d9012d17 	ldw	r4,1204(sp)
100020a8:	14800017 	ldw	r18,0(r2)
100020ac:	002b883a 	mov	r21,zero
100020b0:	21000104 	addi	r4,r4,4
100020b4:	d9012d15 	stw	r4,1204(sp)
100020b8:	0005883a 	mov	r2,zero
100020bc:	9007883a 	mov	r3,r18
100020c0:	003bc706 	br	10000fe0 <___vfprintf_internal_r+0xa40>
100020c4:	d9412d17 	ldw	r5,1204(sp)
100020c8:	d8c12f17 	ldw	r3,1212(sp)
100020cc:	28800017 	ldw	r2,0(r5)
100020d0:	29400104 	addi	r5,r5,4
100020d4:	d9412d15 	stw	r5,1204(sp)
100020d8:	10c00015 	stw	r3,0(r2)
100020dc:	00396d06 	br	10000694 <___vfprintf_internal_r+0xf4>
100020e0:	01040074 	movhi	r4,4097
100020e4:	213d7304 	addi	r4,r4,-2612
100020e8:	d9013115 	stw	r4,1220(sp)
100020ec:	003ba206 	br	10000f78 <___vfprintf_internal_r+0x9d8>
100020f0:	b809883a 	mov	r4,r23
100020f4:	b00b883a 	mov	r5,r22
100020f8:	d9811e04 	addi	r6,sp,1144
100020fc:	0007b480 	call	10007b48 <__sprint_r>
10002100:	103a3f1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10002104:	dc012617 	ldw	r16,1176(sp)
10002108:	d8c12017 	ldw	r3,1152(sp)
1000210c:	da000404 	addi	r8,sp,16
10002110:	003f9106 	br	10001f58 <___vfprintf_internal_r+0x19b8>
10002114:	e0800044 	addi	r2,fp,1
10002118:	9cc00814 	ori	r19,r19,32
1000211c:	e4000047 	ldb	r16,1(fp)
10002120:	00398706 	br	10000740 <___vfprintf_internal_r+0x1a0>
10002124:	d8812e17 	ldw	r2,1208(sp)
10002128:	d8c12d15 	stw	r3,1204(sp)
1000212c:	0085c83a 	sub	r2,zero,r2
10002130:	d8812e15 	stw	r2,1208(sp)
10002134:	e005883a 	mov	r2,fp
10002138:	003a3a06 	br	10000a24 <___vfprintf_internal_r+0x484>
1000213c:	b809883a 	mov	r4,r23
10002140:	b00b883a 	mov	r5,r22
10002144:	d9811e04 	addi	r6,sp,1144
10002148:	0007b480 	call	10007b48 <__sprint_r>
1000214c:	103a2c1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10002150:	d8c12017 	ldw	r3,1152(sp)
10002154:	da000404 	addi	r8,sp,16
10002158:	003cf006 	br	1000151c <___vfprintf_internal_r+0xf7c>
1000215c:	d8c12817 	ldw	r3,1184(sp)
10002160:	d9013117 	ldw	r4,1220(sp)
10002164:	1923c83a 	sub	r17,r3,r4
10002168:	003a8806 	br	10000b8c <___vfprintf_internal_r+0x5ec>
1000216c:	da013f15 	stw	r8,1276(sp)
10002170:	00005080 	call	10000508 <strlen>
10002174:	1023883a 	mov	r17,r2
10002178:	da013f17 	ldw	r8,1276(sp)
1000217c:	883c7f0e 	bge	r17,zero,1000137c <___vfprintf_internal_r+0xddc>
10002180:	0005883a 	mov	r2,zero
10002184:	003c7d06 	br	1000137c <___vfprintf_internal_r+0xddc>
10002188:	b809883a 	mov	r4,r23
1000218c:	b00b883a 	mov	r5,r22
10002190:	d9811e04 	addi	r6,sp,1144
10002194:	0007b480 	call	10007b48 <__sprint_r>
10002198:	103a191e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
1000219c:	d8c12017 	ldw	r3,1152(sp)
100021a0:	d8811f17 	ldw	r2,1148(sp)
100021a4:	da000404 	addi	r8,sp,16
100021a8:	d9413317 	ldw	r5,1228(sp)
100021ac:	d9013117 	ldw	r4,1220(sp)
100021b0:	10800044 	addi	r2,r2,1
100021b4:	28c7883a 	add	r3,r5,r3
100021b8:	41000015 	stw	r4,0(r8)
100021bc:	41400115 	stw	r5,4(r8)
100021c0:	d8c12015 	stw	r3,1152(sp)
100021c4:	d8811f15 	stw	r2,1148(sp)
100021c8:	010001c4 	movi	r4,7
100021cc:	20bb060e 	bge	r4,r2,10000de8 <___vfprintf_internal_r+0x848>
100021d0:	003d6206 	br	1000175c <___vfprintf_internal_r+0x11bc>
100021d4:	01040074 	movhi	r4,4097
100021d8:	213d8784 	addi	r4,r4,-2530
100021dc:	d9013615 	stw	r4,1240(sp)
100021e0:	003aa306 	br	10000c70 <___vfprintf_internal_r+0x6d0>
100021e4:	d8812604 	addi	r2,sp,1176
100021e8:	d8800115 	stw	r2,4(sp)
100021ec:	d9413717 	ldw	r5,1244(sp)
100021f0:	d8812504 	addi	r2,sp,1172
100021f4:	d8800215 	stw	r2,8(sp)
100021f8:	d8812104 	addi	r2,sp,1156
100021fc:	da400015 	stw	r9,0(sp)
10002200:	d8800315 	stw	r2,12(sp)
10002204:	b809883a 	mov	r4,r23
10002208:	880d883a 	mov	r6,r17
1000220c:	01c000c4 	movi	r7,3
10002210:	da013f15 	stw	r8,1276(sp)
10002214:	da413e15 	stw	r9,1272(sp)
10002218:	0002a180 	call	10002a18 <_dtoa_r>
1000221c:	da413e17 	ldw	r9,1272(sp)
10002220:	da013f17 	ldw	r8,1276(sp)
10002224:	d8813115 	stw	r2,1220(sp)
10002228:	482b883a 	mov	r21,r9
1000222c:	d8c13117 	ldw	r3,1220(sp)
10002230:	00801184 	movi	r2,70
10002234:	1d55883a 	add	r10,r3,r21
10002238:	98bebb1e 	bne	r19,r2,10001d28 <___vfprintf_internal_r+0x1788>
1000223c:	19000007 	ldb	r4,0(r3)
10002240:	00800c04 	movi	r2,48
10002244:	2080dd26 	beq	r4,r2,100025bc <___vfprintf_internal_r+0x201c>
10002248:	d8c12617 	ldw	r3,1176(sp)
1000224c:	50d5883a 	add	r10,r10,r3
10002250:	003eb506 	br	10001d28 <___vfprintf_internal_r+0x1788>
10002254:	0023883a 	mov	r17,zero
10002258:	003d9b06 	br	100018c8 <___vfprintf_internal_r+0x1328>
1000225c:	b809883a 	mov	r4,r23
10002260:	b00b883a 	mov	r5,r22
10002264:	d9811e04 	addi	r6,sp,1144
10002268:	0007b480 	call	10007b48 <__sprint_r>
1000226c:	1039e41e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10002270:	d8c12017 	ldw	r3,1152(sp)
10002274:	da000404 	addi	r8,sp,16
10002278:	003d9206 	br	100018c4 <___vfprintf_internal_r+0x1324>
1000227c:	b809883a 	mov	r4,r23
10002280:	b00b883a 	mov	r5,r22
10002284:	d9811e04 	addi	r6,sp,1144
10002288:	0007b480 	call	10007b48 <__sprint_r>
1000228c:	1039dc1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10002290:	d8812617 	ldw	r2,1176(sp)
10002294:	d8c12017 	ldw	r3,1152(sp)
10002298:	da000404 	addi	r8,sp,16
1000229c:	003dfb06 	br	10001a8c <___vfprintf_internal_r+0x14ec>
100022a0:	01040074 	movhi	r4,4097
100022a4:	213d8384 	addi	r4,r4,-2546
100022a8:	d9012c15 	stw	r4,1200(sp)
100022ac:	d9012c17 	ldw	r4,1200(sp)
100022b0:	1c07883a 	add	r3,r3,r16
100022b4:	10800044 	addi	r2,r2,1
100022b8:	41000015 	stw	r4,0(r8)
100022bc:	44000115 	stw	r16,4(r8)
100022c0:	d8c12015 	stw	r3,1152(sp)
100022c4:	d8811f15 	stw	r2,1148(sp)
100022c8:	010001c4 	movi	r4,7
100022cc:	20bfae16 	blt	r4,r2,10002188 <___vfprintf_internal_r+0x1be8>
100022d0:	42000204 	addi	r8,r8,8
100022d4:	003fb406 	br	100021a8 <___vfprintf_internal_r+0x1c08>
100022d8:	0021883a 	mov	r16,zero
100022dc:	003dfd06 	br	10001ad4 <___vfprintf_internal_r+0x1534>
100022e0:	01440074 	movhi	r5,4097
100022e4:	297d8784 	addi	r5,r5,-2530
100022e8:	d9413615 	stw	r5,1240(sp)
100022ec:	003ae306 	br	10000e7c <___vfprintf_internal_r+0x8dc>
100022f0:	b809883a 	mov	r4,r23
100022f4:	b00b883a 	mov	r5,r22
100022f8:	d9811e04 	addi	r6,sp,1144
100022fc:	0007b480 	call	10007b48 <__sprint_r>
10002300:	1039bf1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10002304:	d8812617 	ldw	r2,1176(sp)
10002308:	d9413317 	ldw	r5,1228(sp)
1000230c:	d8c12017 	ldw	r3,1152(sp)
10002310:	da000404 	addi	r8,sp,16
10002314:	2885c83a 	sub	r2,r5,r2
10002318:	003ded06 	br	10001ad0 <___vfprintf_internal_r+0x1530>
1000231c:	00800184 	movi	r2,6
10002320:	1240012e 	bgeu	r2,r9,10002328 <___vfprintf_internal_r+0x1d88>
10002324:	1013883a 	mov	r9,r2
10002328:	4823883a 	mov	r17,r9
1000232c:	4805883a 	mov	r2,r9
10002330:	4800b216 	blt	r9,zero,100025fc <___vfprintf_internal_r+0x205c>
10002334:	01440074 	movhi	r5,4097
10002338:	297d8104 	addi	r5,r5,-2556
1000233c:	d8812b15 	stw	r2,1196(sp)
10002340:	dc812d15 	stw	r18,1204(sp)
10002344:	d8013215 	stw	zero,1224(sp)
10002348:	d8013415 	stw	zero,1232(sp)
1000234c:	d9413115 	stw	r5,1220(sp)
10002350:	0005883a 	mov	r2,zero
10002354:	003a1906 	br	10000bbc <___vfprintf_internal_r+0x61c>
10002358:	04c00b44 	movi	r19,45
1000235c:	dcc12785 	stb	r19,1182(sp)
10002360:	003b0006 	br	10000f64 <___vfprintf_internal_r+0x9c4>
10002364:	d8c12d17 	ldw	r3,1204(sp)
10002368:	d9012f17 	ldw	r4,1212(sp)
1000236c:	18800017 	ldw	r2,0(r3)
10002370:	18c00104 	addi	r3,r3,4
10002374:	d8c12d15 	stw	r3,1204(sp)
10002378:	11000015 	stw	r4,0(r2)
1000237c:	0038c506 	br	10000694 <___vfprintf_internal_r+0xf4>
10002380:	01440074 	movhi	r5,4097
10002384:	297d7604 	addi	r5,r5,-2600
10002388:	d9413115 	stw	r5,1220(sp)
1000238c:	003f2406 	br	10002020 <___vfprintf_internal_r+0x1a80>
10002390:	00800b44 	movi	r2,45
10002394:	d8812785 	stb	r2,1182(sp)
10002398:	df012b15 	stw	fp,1196(sp)
1000239c:	d8013215 	stw	zero,1224(sp)
100023a0:	df012d17 	ldw	fp,1204(sp)
100023a4:	00800b44 	movi	r2,45
100023a8:	dc812d15 	stw	r18,1204(sp)
100023ac:	003a0006 	br	10000bb0 <___vfprintf_internal_r+0x610>
100023b0:	d8c12617 	ldw	r3,1176(sp)
100023b4:	00bfff44 	movi	r2,-3
100023b8:	18800a16 	blt	r3,r2,100023e4 <___vfprintf_internal_r+0x1e44>
100023bc:	48c00916 	blt	r9,r3,100023e4 <___vfprintf_internal_r+0x1e44>
100023c0:	d8c13415 	stw	r3,1232(sp)
100023c4:	040019c4 	movi	r16,103
100023c8:	003e7606 	br	10001da4 <___vfprintf_internal_r+0x1804>
100023cc:	01040074 	movhi	r4,4097
100023d0:	213d8384 	addi	r4,r4,-2546
100023d4:	d9012c15 	stw	r4,1200(sp)
100023d8:	003c8e06 	br	10001614 <___vfprintf_internal_r+0x1074>
100023dc:	5005883a 	mov	r2,r10
100023e0:	003e6506 	br	10001d78 <___vfprintf_internal_r+0x17d8>
100023e4:	843fff84 	addi	r16,r16,-2
100023e8:	1d7fffc4 	addi	r21,r3,-1
100023ec:	dd412615 	stw	r21,1176(sp)
100023f0:	dc0122c5 	stb	r16,1163(sp)
100023f4:	a8009216 	blt	r21,zero,10002640 <___vfprintf_internal_r+0x20a0>
100023f8:	00800ac4 	movi	r2,43
100023fc:	d8812305 	stb	r2,1164(sp)
10002400:	00800244 	movi	r2,9
10002404:	1540660e 	bge	r2,r21,100025a0 <___vfprintf_internal_r+0x2000>
10002408:	dcc122c4 	addi	r19,sp,1163
1000240c:	dc012c15 	stw	r16,1200(sp)
10002410:	4023883a 	mov	r17,r8
10002414:	9821883a 	mov	r16,r19
10002418:	a809883a 	mov	r4,r21
1000241c:	01400284 	movi	r5,10
10002420:	000a6100 	call	1000a610 <__modsi3>
10002424:	10800c04 	addi	r2,r2,48
10002428:	843fffc4 	addi	r16,r16,-1
1000242c:	a809883a 	mov	r4,r21
10002430:	01400284 	movi	r5,10
10002434:	80800005 	stb	r2,0(r16)
10002438:	000a5bc0 	call	1000a5bc <__divsi3>
1000243c:	01000244 	movi	r4,9
10002440:	102b883a 	mov	r21,r2
10002444:	20bff416 	blt	r4,r2,10002418 <___vfprintf_internal_r+0x1e78>
10002448:	8811883a 	mov	r8,r17
1000244c:	10800c04 	addi	r2,r2,48
10002450:	8023883a 	mov	r17,r16
10002454:	897fffc4 	addi	r5,r17,-1
10002458:	88bfffc5 	stb	r2,-1(r17)
1000245c:	dc012c17 	ldw	r16,1200(sp)
10002460:	2cc08a2e 	bgeu	r5,r19,1000268c <___vfprintf_internal_r+0x20ec>
10002464:	d9812384 	addi	r6,sp,1166
10002468:	344dc83a 	sub	r6,r6,r17
1000246c:	d9012344 	addi	r4,sp,1165
10002470:	998d883a 	add	r6,r19,r6
10002474:	00000106 	br	1000247c <___vfprintf_internal_r+0x1edc>
10002478:	28800003 	ldbu	r2,0(r5)
1000247c:	20800005 	stb	r2,0(r4)
10002480:	21000044 	addi	r4,r4,1
10002484:	29400044 	addi	r5,r5,1
10002488:	21bffb1e 	bne	r4,r6,10002478 <___vfprintf_internal_r+0x1ed8>
1000248c:	d8812304 	addi	r2,sp,1164
10002490:	1445c83a 	sub	r2,r2,r17
10002494:	d9412344 	addi	r5,sp,1165
10002498:	2885883a 	add	r2,r5,r2
1000249c:	14e7c83a 	sub	r19,r2,r19
100024a0:	d8813317 	ldw	r2,1228(sp)
100024a4:	d8c13317 	ldw	r3,1228(sp)
100024a8:	dcc13a15 	stw	r19,1256(sp)
100024ac:	14e3883a 	add	r17,r2,r19
100024b0:	00800044 	movi	r2,1
100024b4:	10c0550e 	bge	r2,r3,1000260c <___vfprintf_internal_r+0x206c>
100024b8:	8c400044 	addi	r17,r17,1
100024bc:	8839883a 	mov	fp,r17
100024c0:	88005016 	blt	r17,zero,10002604 <___vfprintf_internal_r+0x2064>
100024c4:	d8013415 	stw	zero,1232(sp)
100024c8:	003e3f06 	br	10001dc8 <___vfprintf_internal_r+0x1828>
100024cc:	da412b15 	stw	r9,1196(sp)
100024d0:	dcc12783 	ldbu	r19,1182(sp)
100024d4:	4823883a 	mov	r17,r9
100024d8:	dc812d15 	stw	r18,1204(sp)
100024dc:	d8013215 	stw	zero,1224(sp)
100024e0:	d8013415 	stw	zero,1232(sp)
100024e4:	0039ae06 	br	10000ba0 <___vfprintf_internal_r+0x600>
100024e8:	483de91e 	bne	r9,zero,10001c90 <___vfprintf_internal_r+0x16f0>
100024ec:	8813883a 	mov	r9,r17
100024f0:	003de706 	br	10001c90 <___vfprintf_internal_r+0x16f0>
100024f4:	b809883a 	mov	r4,r23
100024f8:	b00b883a 	mov	r5,r22
100024fc:	d9811e04 	addi	r6,sp,1144
10002500:	0007b480 	call	10007b48 <__sprint_r>
10002504:	10393e1e 	bne	r2,zero,10000a00 <___vfprintf_internal_r+0x460>
10002508:	dc012617 	ldw	r16,1176(sp)
1000250c:	d8c12017 	ldw	r3,1152(sp)
10002510:	d8811f17 	ldw	r2,1148(sp)
10002514:	da000404 	addi	r8,sp,16
10002518:	003ea006 	br	10001f9c <___vfprintf_internal_r+0x19fc>
1000251c:	00c00b44 	movi	r3,45
10002520:	2460003c 	xorhi	r17,r4,32768
10002524:	d8c12b05 	stb	r3,1196(sp)
10002528:	003ddf06 	br	10001ca8 <___vfprintf_internal_r+0x1708>
1000252c:	02400184 	movi	r9,6
10002530:	003dd706 	br	10001c90 <___vfprintf_internal_r+0x16f0>
10002534:	4d400044 	addi	r21,r9,1
10002538:	003de206 	br	10001cc4 <___vfprintf_internal_r+0x1724>
1000253c:	d8c13417 	ldw	r3,1232(sp)
10002540:	00c0490e 	bge	zero,r3,10002668 <___vfprintf_internal_r+0x20c8>
10002544:	04400044 	movi	r17,1
10002548:	d9013317 	ldw	r4,1228(sp)
1000254c:	8923883a 	add	r17,r17,r4
10002550:	8839883a 	mov	fp,r17
10002554:	883e1c0e 	bge	r17,zero,10001dc8 <___vfprintf_internal_r+0x1828>
10002558:	0039883a 	mov	fp,zero
1000255c:	003e1a06 	br	10001dc8 <___vfprintf_internal_r+0x1828>
10002560:	00c03b0e 	bge	zero,r3,10002650 <___vfprintf_internal_r+0x20b0>
10002564:	4800021e 	bne	r9,zero,10002570 <___vfprintf_internal_r+0x1fd0>
10002568:	e080004c 	andi	r2,fp,1
1000256c:	10000626 	beq	r2,zero,10002588 <___vfprintf_internal_r+0x1fe8>
10002570:	d8c13417 	ldw	r3,1232(sp)
10002574:	4a400044 	addi	r9,r9,1
10002578:	1a63883a 	add	r17,r3,r9
1000257c:	8839883a 	mov	fp,r17
10002580:	883e110e 	bge	r17,zero,10001dc8 <___vfprintf_internal_r+0x1828>
10002584:	003ff406 	br	10002558 <___vfprintf_internal_r+0x1fb8>
10002588:	1839883a 	mov	fp,r3
1000258c:	18004116 	blt	r3,zero,10002694 <___vfprintf_internal_r+0x20f4>
10002590:	dc413417 	ldw	r17,1232(sp)
10002594:	003e0c06 	br	10001dc8 <___vfprintf_internal_r+0x1828>
10002598:	d8812117 	ldw	r2,1156(sp)
1000259c:	003df606 	br	10001d78 <___vfprintf_internal_r+0x17d8>
100025a0:	00800c04 	movi	r2,48
100025a4:	a8c00c04 	addi	r3,r21,48
100025a8:	d8812345 	stb	r2,1165(sp)
100025ac:	d8c12385 	stb	r3,1166(sp)
100025b0:	d88123c4 	addi	r2,sp,1167
100025b4:	dcc122c4 	addi	r19,sp,1163
100025b8:	003fb806 	br	1000249c <___vfprintf_internal_r+0x1efc>
100025bc:	d9013717 	ldw	r4,1244(sp)
100025c0:	880b883a 	mov	r5,r17
100025c4:	000d883a 	mov	r6,zero
100025c8:	000f883a 	mov	r7,zero
100025cc:	da013f15 	stw	r8,1276(sp)
100025d0:	da413e15 	stw	r9,1272(sp)
100025d4:	da813d15 	stw	r10,1268(sp)
100025d8:	000b8c00 	call	1000b8c0 <__eqdf2>
100025dc:	da013f17 	ldw	r8,1276(sp)
100025e0:	da413e17 	ldw	r9,1272(sp)
100025e4:	da813d17 	ldw	r10,1268(sp)
100025e8:	103f1726 	beq	r2,zero,10002248 <___vfprintf_internal_r+0x1ca8>
100025ec:	00800044 	movi	r2,1
100025f0:	1547c83a 	sub	r3,r2,r21
100025f4:	d8c12615 	stw	r3,1176(sp)
100025f8:	003f1406 	br	1000224c <___vfprintf_internal_r+0x1cac>
100025fc:	0005883a 	mov	r2,zero
10002600:	003f4c06 	br	10002334 <___vfprintf_internal_r+0x1d94>
10002604:	0039883a 	mov	fp,zero
10002608:	003fae06 	br	100024c4 <___vfprintf_internal_r+0x1f24>
1000260c:	e084703a 	and	r2,fp,r2
10002610:	103faa26 	beq	r2,zero,100024bc <___vfprintf_internal_r+0x1f1c>
10002614:	003fa806 	br	100024b8 <___vfprintf_internal_r+0x1f18>
10002618:	d9412d17 	ldw	r5,1204(sp)
1000261c:	2a400017 	ldw	r9,0(r5)
10002620:	28c00104 	addi	r3,r5,4
10002624:	d8c12d15 	stw	r3,1204(sp)
10002628:	483ebc0e 	bge	r9,zero,1000211c <___vfprintf_internal_r+0x1b7c>
1000262c:	027fffc4 	movi	r9,-1
10002630:	e4000047 	ldb	r16,1(fp)
10002634:	00384206 	br	10000740 <___vfprintf_internal_r+0x1a0>
10002638:	043fffc4 	movi	r16,-1
1000263c:	0038ce06 	br	10000978 <___vfprintf_internal_r+0x3d8>
10002640:	00800b44 	movi	r2,45
10002644:	056bc83a 	sub	r21,zero,r21
10002648:	d8812305 	stb	r2,1164(sp)
1000264c:	003f6c06 	br	10002400 <___vfprintf_internal_r+0x1e60>
10002650:	4800081e 	bne	r9,zero,10002674 <___vfprintf_internal_r+0x20d4>
10002654:	e080004c 	andi	r2,fp,1
10002658:	1000061e 	bne	r2,zero,10002674 <___vfprintf_internal_r+0x20d4>
1000265c:	07000044 	movi	fp,1
10002660:	e023883a 	mov	r17,fp
10002664:	003dd806 	br	10001dc8 <___vfprintf_internal_r+0x1828>
10002668:	04400084 	movi	r17,2
1000266c:	88e3c83a 	sub	r17,r17,r3
10002670:	003fb506 	br	10002548 <___vfprintf_internal_r+0x1fa8>
10002674:	4c400084 	addi	r17,r9,2
10002678:	8839883a 	mov	fp,r17
1000267c:	883dd20e 	bge	r17,zero,10001dc8 <___vfprintf_internal_r+0x1828>
10002680:	003fb506 	br	10002558 <___vfprintf_internal_r+0x1fb8>
10002684:	d8c12617 	ldw	r3,1176(sp)
10002688:	003f5706 	br	100023e8 <___vfprintf_internal_r+0x1e48>
1000268c:	d8812344 	addi	r2,sp,1165
10002690:	003f8206 	br	1000249c <___vfprintf_internal_r+0x1efc>
10002694:	0039883a 	mov	fp,zero
10002698:	003fbd06 	br	10002590 <___vfprintf_internal_r+0x1ff0>

1000269c <__vfprintf_internal>:
1000269c:	2007883a 	mov	r3,r4
100026a0:	01040074 	movhi	r4,4097
100026a4:	2104e004 	addi	r4,r4,4992
100026a8:	21000017 	ldw	r4,0(r4)
100026ac:	2805883a 	mov	r2,r5
100026b0:	300f883a 	mov	r7,r6
100026b4:	180b883a 	mov	r5,r3
100026b8:	100d883a 	mov	r6,r2
100026bc:	00005a01 	jmpi	100005a0 <___vfprintf_internal_r>

100026c0 <__swsetup_r>:
100026c0:	00840074 	movhi	r2,4097
100026c4:	defffd04 	addi	sp,sp,-12
100026c8:	1084e004 	addi	r2,r2,4992
100026cc:	dc400115 	stw	r17,4(sp)
100026d0:	2023883a 	mov	r17,r4
100026d4:	11000017 	ldw	r4,0(r2)
100026d8:	dc000015 	stw	r16,0(sp)
100026dc:	dfc00215 	stw	ra,8(sp)
100026e0:	2821883a 	mov	r16,r5
100026e4:	20000226 	beq	r4,zero,100026f0 <__swsetup_r+0x30>
100026e8:	20c00e17 	ldw	r3,56(r4)
100026ec:	18002e26 	beq	r3,zero,100027a8 <__swsetup_r+0xe8>
100026f0:	8080030b 	ldhu	r2,12(r16)
100026f4:	10c0020c 	andi	r3,r2,8
100026f8:	100d883a 	mov	r6,r2
100026fc:	18000f26 	beq	r3,zero,1000273c <__swsetup_r+0x7c>
10002700:	80c00417 	ldw	r3,16(r16)
10002704:	18001526 	beq	r3,zero,1000275c <__swsetup_r+0x9c>
10002708:	1100004c 	andi	r4,r2,1
1000270c:	20001c1e 	bne	r4,zero,10002780 <__swsetup_r+0xc0>
10002710:	1080008c 	andi	r2,r2,2
10002714:	1000261e 	bne	r2,zero,100027b0 <__swsetup_r+0xf0>
10002718:	80800517 	ldw	r2,20(r16)
1000271c:	80800215 	stw	r2,8(r16)
10002720:	18001c26 	beq	r3,zero,10002794 <__swsetup_r+0xd4>
10002724:	0005883a 	mov	r2,zero
10002728:	dfc00217 	ldw	ra,8(sp)
1000272c:	dc400117 	ldw	r17,4(sp)
10002730:	dc000017 	ldw	r16,0(sp)
10002734:	dec00304 	addi	sp,sp,12
10002738:	f800283a 	ret
1000273c:	3080040c 	andi	r2,r6,16
10002740:	10001726 	beq	r2,zero,100027a0 <__swsetup_r+0xe0>
10002744:	3080010c 	andi	r2,r6,4
10002748:	10001b1e 	bne	r2,zero,100027b8 <__swsetup_r+0xf8>
1000274c:	80c00417 	ldw	r3,16(r16)
10002750:	30800214 	ori	r2,r6,8
10002754:	8080030d 	sth	r2,12(r16)
10002758:	183feb1e 	bne	r3,zero,10002708 <__swsetup_r+0x48>
1000275c:	1140a00c 	andi	r5,r2,640
10002760:	01008004 	movi	r4,512
10002764:	293fe826 	beq	r5,r4,10002708 <__swsetup_r+0x48>
10002768:	8809883a 	mov	r4,r17
1000276c:	800b883a 	mov	r5,r16
10002770:	00052540 	call	10005254 <__smakebuf_r>
10002774:	8080030b 	ldhu	r2,12(r16)
10002778:	80c00417 	ldw	r3,16(r16)
1000277c:	003fe206 	br	10002708 <__swsetup_r+0x48>
10002780:	80800517 	ldw	r2,20(r16)
10002784:	80000215 	stw	zero,8(r16)
10002788:	0085c83a 	sub	r2,zero,r2
1000278c:	80800615 	stw	r2,24(r16)
10002790:	183fe41e 	bne	r3,zero,10002724 <__swsetup_r+0x64>
10002794:	8080030b 	ldhu	r2,12(r16)
10002798:	1080200c 	andi	r2,r2,128
1000279c:	103fe226 	beq	r2,zero,10002728 <__swsetup_r+0x68>
100027a0:	00bfffc4 	movi	r2,-1
100027a4:	003fe006 	br	10002728 <__swsetup_r+0x68>
100027a8:	00046fc0 	call	100046fc <__sinit>
100027ac:	003fd006 	br	100026f0 <__swsetup_r+0x30>
100027b0:	0005883a 	mov	r2,zero
100027b4:	003fd906 	br	1000271c <__swsetup_r+0x5c>
100027b8:	81400c17 	ldw	r5,48(r16)
100027bc:	28000626 	beq	r5,zero,100027d8 <__swsetup_r+0x118>
100027c0:	80801004 	addi	r2,r16,64
100027c4:	28800326 	beq	r5,r2,100027d4 <__swsetup_r+0x114>
100027c8:	8809883a 	mov	r4,r17
100027cc:	00048700 	call	10004870 <_free_r>
100027d0:	8180030b 	ldhu	r6,12(r16)
100027d4:	80000c15 	stw	zero,48(r16)
100027d8:	80c00417 	ldw	r3,16(r16)
100027dc:	00bff6c4 	movi	r2,-37
100027e0:	118c703a 	and	r6,r2,r6
100027e4:	80000115 	stw	zero,4(r16)
100027e8:	80c00015 	stw	r3,0(r16)
100027ec:	003fd806 	br	10002750 <__swsetup_r+0x90>

100027f0 <quorem>:
100027f0:	defff204 	addi	sp,sp,-56
100027f4:	ddc00b15 	stw	r23,44(sp)
100027f8:	20800417 	ldw	r2,16(r4)
100027fc:	2dc00417 	ldw	r23,16(r5)
10002800:	dfc00d15 	stw	ra,52(sp)
10002804:	df000c15 	stw	fp,48(sp)
10002808:	dd800a15 	stw	r22,40(sp)
1000280c:	dd400915 	stw	r21,36(sp)
10002810:	dd000815 	stw	r20,32(sp)
10002814:	dcc00715 	stw	r19,28(sp)
10002818:	dc800615 	stw	r18,24(sp)
1000281c:	dc400515 	stw	r17,20(sp)
10002820:	dc000415 	stw	r16,16(sp)
10002824:	15c07a16 	blt	r2,r23,10002a10 <quorem+0x220>
10002828:	bdffffc4 	addi	r23,r23,-1
1000282c:	bde9883a 	add	r20,r23,r23
10002830:	28c00504 	addi	r3,r5,20
10002834:	a529883a 	add	r20,r20,r20
10002838:	1d39883a 	add	fp,r3,r20
1000283c:	24c00504 	addi	r19,r4,20
10002840:	d9400215 	stw	r5,8(sp)
10002844:	9d29883a 	add	r20,r19,r20
10002848:	e1400017 	ldw	r5,0(fp)
1000284c:	d9000015 	stw	r4,0(sp)
10002850:	a1000017 	ldw	r4,0(r20)
10002854:	29400044 	addi	r5,r5,1
10002858:	d8c00115 	stw	r3,4(sp)
1000285c:	dd000315 	stw	r20,12(sp)
10002860:	000a66c0 	call	1000a66c <__udivsi3>
10002864:	1025883a 	mov	r18,r2
10002868:	10003026 	beq	r2,zero,1000292c <quorem+0x13c>
1000286c:	dc400117 	ldw	r17,4(sp)
10002870:	9829883a 	mov	r20,r19
10002874:	002d883a 	mov	r22,zero
10002878:	0021883a 	mov	r16,zero
1000287c:	8d400017 	ldw	r21,0(r17)
10002880:	900b883a 	mov	r5,r18
10002884:	8c400104 	addi	r17,r17,4
10002888:	a93fffcc 	andi	r4,r21,65535
1000288c:	000a67c0 	call	1000a67c <__mulsi3>
10002890:	a808d43a 	srli	r4,r21,16
10002894:	900b883a 	mov	r5,r18
10002898:	b0ad883a 	add	r22,r22,r2
1000289c:	000a67c0 	call	1000a67c <__mulsi3>
100028a0:	a1000017 	ldw	r4,0(r20)
100028a4:	b00cd43a 	srli	r6,r22,16
100028a8:	b0ffffcc 	andi	r3,r22,65535
100028ac:	217fffcc 	andi	r5,r4,65535
100028b0:	2c21883a 	add	r16,r5,r16
100028b4:	80c7c83a 	sub	r3,r16,r3
100028b8:	2008d43a 	srli	r4,r4,16
100028bc:	3085883a 	add	r2,r6,r2
100028c0:	1821d43a 	srai	r16,r3,16
100028c4:	117fffcc 	andi	r5,r2,65535
100028c8:	2149c83a 	sub	r4,r4,r5
100028cc:	2421883a 	add	r16,r4,r16
100028d0:	8008943a 	slli	r4,r16,16
100028d4:	18ffffcc 	andi	r3,r3,65535
100028d8:	102cd43a 	srli	r22,r2,16
100028dc:	20c8b03a 	or	r4,r4,r3
100028e0:	a1000015 	stw	r4,0(r20)
100028e4:	8021d43a 	srai	r16,r16,16
100028e8:	a5000104 	addi	r20,r20,4
100028ec:	e47fe32e 	bgeu	fp,r17,1000287c <quorem+0x8c>
100028f0:	d8c00317 	ldw	r3,12(sp)
100028f4:	18800017 	ldw	r2,0(r3)
100028f8:	10000c1e 	bne	r2,zero,1000292c <quorem+0x13c>
100028fc:	18bfff04 	addi	r2,r3,-4
10002900:	9880082e 	bgeu	r19,r2,10002924 <quorem+0x134>
10002904:	18ffff17 	ldw	r3,-4(r3)
10002908:	18000326 	beq	r3,zero,10002918 <quorem+0x128>
1000290c:	00000506 	br	10002924 <quorem+0x134>
10002910:	10c00017 	ldw	r3,0(r2)
10002914:	1800031e 	bne	r3,zero,10002924 <quorem+0x134>
10002918:	10bfff04 	addi	r2,r2,-4
1000291c:	bdffffc4 	addi	r23,r23,-1
10002920:	98bffb36 	bltu	r19,r2,10002910 <quorem+0x120>
10002924:	d8c00017 	ldw	r3,0(sp)
10002928:	1dc00415 	stw	r23,16(r3)
1000292c:	d9000017 	ldw	r4,0(sp)
10002930:	d9400217 	ldw	r5,8(sp)
10002934:	00069d00 	call	100069d0 <__mcmp>
10002938:	10002816 	blt	r2,zero,100029dc <quorem+0x1ec>
1000293c:	dc400117 	ldw	r17,4(sp)
10002940:	94800044 	addi	r18,r18,1
10002944:	980d883a 	mov	r6,r19
10002948:	0007883a 	mov	r3,zero
1000294c:	31000017 	ldw	r4,0(r6)
10002950:	89400017 	ldw	r5,0(r17)
10002954:	31800104 	addi	r6,r6,4
10002958:	20bfffcc 	andi	r2,r4,65535
1000295c:	10c7883a 	add	r3,r2,r3
10002960:	28bfffcc 	andi	r2,r5,65535
10002964:	1885c83a 	sub	r2,r3,r2
10002968:	280ad43a 	srli	r5,r5,16
1000296c:	2008d43a 	srli	r4,r4,16
10002970:	1007d43a 	srai	r3,r2,16
10002974:	10bfffcc 	andi	r2,r2,65535
10002978:	2149c83a 	sub	r4,r4,r5
1000297c:	20c9883a 	add	r4,r4,r3
10002980:	200a943a 	slli	r5,r4,16
10002984:	8c400104 	addi	r17,r17,4
10002988:	2007d43a 	srai	r3,r4,16
1000298c:	2884b03a 	or	r2,r5,r2
10002990:	30bfff15 	stw	r2,-4(r6)
10002994:	e47fed2e 	bgeu	fp,r17,1000294c <quorem+0x15c>
10002998:	bdc5883a 	add	r2,r23,r23
1000299c:	1085883a 	add	r2,r2,r2
100029a0:	9887883a 	add	r3,r19,r2
100029a4:	18800017 	ldw	r2,0(r3)
100029a8:	10000c1e 	bne	r2,zero,100029dc <quorem+0x1ec>
100029ac:	18bfff04 	addi	r2,r3,-4
100029b0:	9880082e 	bgeu	r19,r2,100029d4 <quorem+0x1e4>
100029b4:	18ffff17 	ldw	r3,-4(r3)
100029b8:	18000326 	beq	r3,zero,100029c8 <quorem+0x1d8>
100029bc:	00000506 	br	100029d4 <quorem+0x1e4>
100029c0:	10c00017 	ldw	r3,0(r2)
100029c4:	1800031e 	bne	r3,zero,100029d4 <quorem+0x1e4>
100029c8:	10bfff04 	addi	r2,r2,-4
100029cc:	bdffffc4 	addi	r23,r23,-1
100029d0:	98bffb36 	bltu	r19,r2,100029c0 <quorem+0x1d0>
100029d4:	d8c00017 	ldw	r3,0(sp)
100029d8:	1dc00415 	stw	r23,16(r3)
100029dc:	9005883a 	mov	r2,r18
100029e0:	dfc00d17 	ldw	ra,52(sp)
100029e4:	df000c17 	ldw	fp,48(sp)
100029e8:	ddc00b17 	ldw	r23,44(sp)
100029ec:	dd800a17 	ldw	r22,40(sp)
100029f0:	dd400917 	ldw	r21,36(sp)
100029f4:	dd000817 	ldw	r20,32(sp)
100029f8:	dcc00717 	ldw	r19,28(sp)
100029fc:	dc800617 	ldw	r18,24(sp)
10002a00:	dc400517 	ldw	r17,20(sp)
10002a04:	dc000417 	ldw	r16,16(sp)
10002a08:	dec00e04 	addi	sp,sp,56
10002a0c:	f800283a 	ret
10002a10:	0005883a 	mov	r2,zero
10002a14:	003ff206 	br	100029e0 <quorem+0x1f0>

10002a18 <_dtoa_r>:
10002a18:	20801017 	ldw	r2,64(r4)
10002a1c:	deffde04 	addi	sp,sp,-136
10002a20:	dd401d15 	stw	r21,116(sp)
10002a24:	dcc01b15 	stw	r19,108(sp)
10002a28:	dc801a15 	stw	r18,104(sp)
10002a2c:	dc401915 	stw	r17,100(sp)
10002a30:	dc001815 	stw	r16,96(sp)
10002a34:	dfc02115 	stw	ra,132(sp)
10002a38:	df002015 	stw	fp,128(sp)
10002a3c:	ddc01f15 	stw	r23,124(sp)
10002a40:	dd801e15 	stw	r22,120(sp)
10002a44:	dd001c15 	stw	r20,112(sp)
10002a48:	d9c00315 	stw	r7,12(sp)
10002a4c:	2021883a 	mov	r16,r4
10002a50:	302b883a 	mov	r21,r6
10002a54:	2825883a 	mov	r18,r5
10002a58:	dc402417 	ldw	r17,144(sp)
10002a5c:	3027883a 	mov	r19,r6
10002a60:	10000826 	beq	r2,zero,10002a84 <_dtoa_r+0x6c>
10002a64:	21801117 	ldw	r6,68(r4)
10002a68:	00c00044 	movi	r3,1
10002a6c:	100b883a 	mov	r5,r2
10002a70:	1986983a 	sll	r3,r3,r6
10002a74:	11800115 	stw	r6,4(r2)
10002a78:	10c00215 	stw	r3,8(r2)
10002a7c:	00060fc0 	call	100060fc <_Bfree>
10002a80:	80001015 	stw	zero,64(r16)
10002a84:	a8002d16 	blt	r21,zero,10002b3c <_dtoa_r+0x124>
10002a88:	88000015 	stw	zero,0(r17)
10002a8c:	a8dffc2c 	andhi	r3,r21,32752
10002a90:	009ffc34 	movhi	r2,32752
10002a94:	18801b26 	beq	r3,r2,10002b04 <_dtoa_r+0xec>
10002a98:	9009883a 	mov	r4,r18
10002a9c:	980b883a 	mov	r5,r19
10002aa0:	000d883a 	mov	r6,zero
10002aa4:	000f883a 	mov	r7,zero
10002aa8:	000b8c00 	call	1000b8c0 <__eqdf2>
10002aac:	10002a1e 	bne	r2,zero,10002b58 <_dtoa_r+0x140>
10002ab0:	d8c02317 	ldw	r3,140(sp)
10002ab4:	d9002517 	ldw	r4,148(sp)
10002ab8:	00800044 	movi	r2,1
10002abc:	18800015 	stw	r2,0(r3)
10002ac0:	2001a226 	beq	r4,zero,1000314c <_dtoa_r+0x734>
10002ac4:	00840074 	movhi	r2,4097
10002ac8:	10bd8344 	addi	r2,r2,-2547
10002acc:	20800015 	stw	r2,0(r4)
10002ad0:	10bfffc4 	addi	r2,r2,-1
10002ad4:	dfc02117 	ldw	ra,132(sp)
10002ad8:	df002017 	ldw	fp,128(sp)
10002adc:	ddc01f17 	ldw	r23,124(sp)
10002ae0:	dd801e17 	ldw	r22,120(sp)
10002ae4:	dd401d17 	ldw	r21,116(sp)
10002ae8:	dd001c17 	ldw	r20,112(sp)
10002aec:	dcc01b17 	ldw	r19,108(sp)
10002af0:	dc801a17 	ldw	r18,104(sp)
10002af4:	dc401917 	ldw	r17,100(sp)
10002af8:	dc001817 	ldw	r16,96(sp)
10002afc:	dec02204 	addi	sp,sp,136
10002b00:	f800283a 	ret
10002b04:	d8c02317 	ldw	r3,140(sp)
10002b08:	0089c3c4 	movi	r2,9999
10002b0c:	18800015 	stw	r2,0(r3)
10002b10:	90017c26 	beq	r18,zero,10003104 <_dtoa_r+0x6ec>
10002b14:	00840074 	movhi	r2,4097
10002b18:	10bd8f04 	addi	r2,r2,-2500
10002b1c:	d9002517 	ldw	r4,148(sp)
10002b20:	203fec26 	beq	r4,zero,10002ad4 <_dtoa_r+0xbc>
10002b24:	10c000c7 	ldb	r3,3(r2)
10002b28:	18017d1e 	bne	r3,zero,10003120 <_dtoa_r+0x708>
10002b2c:	10c000c4 	addi	r3,r2,3
10002b30:	d9802517 	ldw	r6,148(sp)
10002b34:	30c00015 	stw	r3,0(r6)
10002b38:	003fe606 	br	10002ad4 <_dtoa_r+0xbc>
10002b3c:	04e00034 	movhi	r19,32768
10002b40:	9cffffc4 	addi	r19,r19,-1
10002b44:	00800044 	movi	r2,1
10002b48:	ace6703a 	and	r19,r21,r19
10002b4c:	88800015 	stw	r2,0(r17)
10002b50:	982b883a 	mov	r21,r19
10002b54:	003fcd06 	br	10002a8c <_dtoa_r+0x74>
10002b58:	d8800204 	addi	r2,sp,8
10002b5c:	a822d53a 	srli	r17,r21,20
10002b60:	d8800015 	stw	r2,0(sp)
10002b64:	8009883a 	mov	r4,r16
10002b68:	900b883a 	mov	r5,r18
10002b6c:	980d883a 	mov	r6,r19
10002b70:	d9c00104 	addi	r7,sp,4
10002b74:	0006d440 	call	10006d44 <__d2b>
10002b78:	1039883a 	mov	fp,r2
10002b7c:	88016a1e 	bne	r17,zero,10003128 <_dtoa_r+0x710>
10002b80:	dd000217 	ldw	r20,8(sp)
10002b84:	dc400117 	ldw	r17,4(sp)
10002b88:	00befbc4 	movi	r2,-1041
10002b8c:	a463883a 	add	r17,r20,r17
10002b90:	8882ea16 	blt	r17,r2,1000373c <_dtoa_r+0xd24>
10002b94:	00bf0384 	movi	r2,-1010
10002b98:	1445c83a 	sub	r2,r2,r17
10002b9c:	89010484 	addi	r4,r17,1042
10002ba0:	a8aa983a 	sll	r21,r21,r2
10002ba4:	9108d83a 	srl	r4,r18,r4
10002ba8:	a908b03a 	or	r4,r21,r4
10002bac:	000cd980 	call	1000cd98 <__floatunsidf>
10002bb0:	017f8434 	movhi	r5,65040
10002bb4:	01800044 	movi	r6,1
10002bb8:	1009883a 	mov	r4,r2
10002bbc:	194b883a 	add	r5,r3,r5
10002bc0:	8c7fffc4 	addi	r17,r17,-1
10002bc4:	d9800f15 	stw	r6,60(sp)
10002bc8:	000d883a 	mov	r6,zero
10002bcc:	01cffe34 	movhi	r7,16376
10002bd0:	000c3700 	call	1000c370 <__subdf3>
10002bd4:	0198dbf4 	movhi	r6,25455
10002bd8:	01cff4f4 	movhi	r7,16339
10002bdc:	1009883a 	mov	r4,r2
10002be0:	180b883a 	mov	r5,r3
10002be4:	3190d844 	addi	r6,r6,17249
10002be8:	39e1e9c4 	addi	r7,r7,-30809
10002bec:	000bb040 	call	1000bb04 <__muldf3>
10002bf0:	01a2d874 	movhi	r6,35681
10002bf4:	01cff1f4 	movhi	r7,16327
10002bf8:	180b883a 	mov	r5,r3
10002bfc:	31b22cc4 	addi	r6,r6,-14157
10002c00:	39e28a04 	addi	r7,r7,-30168
10002c04:	1009883a 	mov	r4,r2
10002c08:	000a6a40 	call	1000a6a4 <__adddf3>
10002c0c:	8809883a 	mov	r4,r17
10002c10:	102d883a 	mov	r22,r2
10002c14:	182b883a 	mov	r21,r3
10002c18:	000ccc80 	call	1000ccc8 <__floatsidf>
10002c1c:	019427f4 	movhi	r6,20639
10002c20:	01cff4f4 	movhi	r7,16339
10002c24:	1009883a 	mov	r4,r2
10002c28:	180b883a 	mov	r5,r3
10002c2c:	319e7ec4 	addi	r6,r6,31227
10002c30:	39d104c4 	addi	r7,r7,17427
10002c34:	000bb040 	call	1000bb04 <__muldf3>
10002c38:	b009883a 	mov	r4,r22
10002c3c:	a80b883a 	mov	r5,r21
10002c40:	100d883a 	mov	r6,r2
10002c44:	180f883a 	mov	r7,r3
10002c48:	000a6a40 	call	1000a6a4 <__adddf3>
10002c4c:	1009883a 	mov	r4,r2
10002c50:	180b883a 	mov	r5,r3
10002c54:	102d883a 	mov	r22,r2
10002c58:	182b883a 	mov	r21,r3
10002c5c:	000cc400 	call	1000cc40 <__fixdfsi>
10002c60:	b009883a 	mov	r4,r22
10002c64:	a80b883a 	mov	r5,r21
10002c68:	000d883a 	mov	r6,zero
10002c6c:	000f883a 	mov	r7,zero
10002c70:	d8800515 	stw	r2,20(sp)
10002c74:	000ba240 	call	1000ba24 <__ledf2>
10002c78:	10023116 	blt	r2,zero,10003540 <_dtoa_r+0xb28>
10002c7c:	d8c00517 	ldw	r3,20(sp)
10002c80:	00800584 	movi	r2,22
10002c84:	10c21f36 	bltu	r2,r3,10003504 <_dtoa_r+0xaec>
10002c88:	180490fa 	slli	r2,r3,3
10002c8c:	00c40074 	movhi	r3,4097
10002c90:	18fdab04 	addi	r3,r3,-2388
10002c94:	1885883a 	add	r2,r3,r2
10002c98:	11000017 	ldw	r4,0(r2)
10002c9c:	11400117 	ldw	r5,4(r2)
10002ca0:	900d883a 	mov	r6,r18
10002ca4:	980f883a 	mov	r7,r19
10002ca8:	000b9440 	call	1000b944 <__gedf2>
10002cac:	0082a70e 	bge	zero,r2,1000374c <_dtoa_r+0xd34>
10002cb0:	d9000517 	ldw	r4,20(sp)
10002cb4:	d8000c15 	stw	zero,48(sp)
10002cb8:	213fffc4 	addi	r4,r4,-1
10002cbc:	d9000515 	stw	r4,20(sp)
10002cc0:	a463c83a 	sub	r17,r20,r17
10002cc4:	8dbfffc4 	addi	r22,r17,-1
10002cc8:	b0021916 	blt	r22,zero,10003530 <_dtoa_r+0xb18>
10002ccc:	d8000815 	stw	zero,32(sp)
10002cd0:	d8800517 	ldw	r2,20(sp)
10002cd4:	10020e16 	blt	r2,zero,10003510 <_dtoa_r+0xaf8>
10002cd8:	b0ad883a 	add	r22,r22,r2
10002cdc:	d8800a15 	stw	r2,40(sp)
10002ce0:	d8000915 	stw	zero,36(sp)
10002ce4:	d8c00317 	ldw	r3,12(sp)
10002ce8:	00800244 	movi	r2,9
10002cec:	10c11a36 	bltu	r2,r3,10003158 <_dtoa_r+0x740>
10002cf0:	00800144 	movi	r2,5
10002cf4:	10c4fc0e 	bge	r2,r3,100040e8 <_dtoa_r+0x16d0>
10002cf8:	18ffff04 	addi	r3,r3,-4
10002cfc:	d8c00315 	stw	r3,12(sp)
10002d00:	0029883a 	mov	r20,zero
10002d04:	d9800317 	ldw	r6,12(sp)
10002d08:	008000c4 	movi	r2,3
10002d0c:	3083bd26 	beq	r6,r2,10003c04 <_dtoa_r+0x11ec>
10002d10:	1183670e 	bge	r2,r6,10003ab0 <_dtoa_r+0x1098>
10002d14:	d8c00317 	ldw	r3,12(sp)
10002d18:	00800104 	movi	r2,4
10002d1c:	1882e726 	beq	r3,r2,100038bc <_dtoa_r+0xea4>
10002d20:	00800144 	movi	r2,5
10002d24:	1884f21e 	bne	r3,r2,100040f0 <_dtoa_r+0x16d8>
10002d28:	00800044 	movi	r2,1
10002d2c:	d8800b15 	stw	r2,44(sp)
10002d30:	d8c02217 	ldw	r3,136(sp)
10002d34:	d9000517 	ldw	r4,20(sp)
10002d38:	1907883a 	add	r3,r3,r4
10002d3c:	19800044 	addi	r6,r3,1
10002d40:	d8c00d15 	stw	r3,52(sp)
10002d44:	d9800615 	stw	r6,24(sp)
10002d48:	0183c30e 	bge	zero,r6,10003c58 <_dtoa_r+0x1240>
10002d4c:	d9800617 	ldw	r6,24(sp)
10002d50:	3023883a 	mov	r17,r6
10002d54:	80001115 	stw	zero,68(r16)
10002d58:	008005c4 	movi	r2,23
10002d5c:	1184f62e 	bgeu	r2,r6,10004138 <_dtoa_r+0x1720>
10002d60:	00c00044 	movi	r3,1
10002d64:	00800104 	movi	r2,4
10002d68:	1085883a 	add	r2,r2,r2
10002d6c:	11000504 	addi	r4,r2,20
10002d70:	180b883a 	mov	r5,r3
10002d74:	18c00044 	addi	r3,r3,1
10002d78:	313ffb2e 	bgeu	r6,r4,10002d68 <_dtoa_r+0x350>
10002d7c:	81401115 	stw	r5,68(r16)
10002d80:	8009883a 	mov	r4,r16
10002d84:	00060540 	call	10006054 <_Balloc>
10002d88:	d8800715 	stw	r2,28(sp)
10002d8c:	80801015 	stw	r2,64(r16)
10002d90:	00800384 	movi	r2,14
10002d94:	1440fd36 	bltu	r2,r17,1000318c <_dtoa_r+0x774>
10002d98:	a000fc26 	beq	r20,zero,1000318c <_dtoa_r+0x774>
10002d9c:	d8800517 	ldw	r2,20(sp)
10002da0:	0083b90e 	bge	zero,r2,10003c88 <_dtoa_r+0x1270>
10002da4:	d8c00517 	ldw	r3,20(sp)
10002da8:	108003cc 	andi	r2,r2,15
10002dac:	100490fa 	slli	r2,r2,3
10002db0:	182fd13a 	srai	r23,r3,4
10002db4:	00c40074 	movhi	r3,4097
10002db8:	18fdab04 	addi	r3,r3,-2388
10002dbc:	1885883a 	add	r2,r3,r2
10002dc0:	b8c0040c 	andi	r3,r23,16
10002dc4:	12c00017 	ldw	r11,0(r2)
10002dc8:	12800117 	ldw	r10,4(r2)
10002dcc:	18039726 	beq	r3,zero,10003c2c <_dtoa_r+0x1214>
10002dd0:	00840074 	movhi	r2,4097
10002dd4:	10bda104 	addi	r2,r2,-2428
10002dd8:	11800817 	ldw	r6,32(r2)
10002ddc:	11c00917 	ldw	r7,36(r2)
10002de0:	9009883a 	mov	r4,r18
10002de4:	980b883a 	mov	r5,r19
10002de8:	da801615 	stw	r10,88(sp)
10002dec:	dac01515 	stw	r11,84(sp)
10002df0:	000af400 	call	1000af40 <__divdf3>
10002df4:	da801617 	ldw	r10,88(sp)
10002df8:	dac01517 	ldw	r11,84(sp)
10002dfc:	bdc003cc 	andi	r23,r23,15
10002e00:	044000c4 	movi	r17,3
10002e04:	d8800e15 	stw	r2,56(sp)
10002e08:	182b883a 	mov	r21,r3
10002e0c:	b8001126 	beq	r23,zero,10002e54 <_dtoa_r+0x43c>
10002e10:	05040074 	movhi	r20,4097
10002e14:	a53da104 	addi	r20,r20,-2428
10002e18:	5805883a 	mov	r2,r11
10002e1c:	5007883a 	mov	r3,r10
10002e20:	b980004c 	andi	r6,r23,1
10002e24:	1009883a 	mov	r4,r2
10002e28:	b82fd07a 	srai	r23,r23,1
10002e2c:	180b883a 	mov	r5,r3
10002e30:	30000426 	beq	r6,zero,10002e44 <_dtoa_r+0x42c>
10002e34:	a1800017 	ldw	r6,0(r20)
10002e38:	a1c00117 	ldw	r7,4(r20)
10002e3c:	8c400044 	addi	r17,r17,1
10002e40:	000bb040 	call	1000bb04 <__muldf3>
10002e44:	a5000204 	addi	r20,r20,8
10002e48:	b83ff51e 	bne	r23,zero,10002e20 <_dtoa_r+0x408>
10002e4c:	1017883a 	mov	r11,r2
10002e50:	1815883a 	mov	r10,r3
10002e54:	d9000e17 	ldw	r4,56(sp)
10002e58:	a80b883a 	mov	r5,r21
10002e5c:	580d883a 	mov	r6,r11
10002e60:	500f883a 	mov	r7,r10
10002e64:	000af400 	call	1000af40 <__divdf3>
10002e68:	1029883a 	mov	r20,r2
10002e6c:	182b883a 	mov	r21,r3
10002e70:	d9800c17 	ldw	r6,48(sp)
10002e74:	30000626 	beq	r6,zero,10002e90 <_dtoa_r+0x478>
10002e78:	a009883a 	mov	r4,r20
10002e7c:	a80b883a 	mov	r5,r21
10002e80:	000d883a 	mov	r6,zero
10002e84:	01cffc34 	movhi	r7,16368
10002e88:	000ba240 	call	1000ba24 <__ledf2>
10002e8c:	10043216 	blt	r2,zero,10003f58 <_dtoa_r+0x1540>
10002e90:	8809883a 	mov	r4,r17
10002e94:	000ccc80 	call	1000ccc8 <__floatsidf>
10002e98:	1009883a 	mov	r4,r2
10002e9c:	180b883a 	mov	r5,r3
10002ea0:	a00d883a 	mov	r6,r20
10002ea4:	a80f883a 	mov	r7,r21
10002ea8:	000bb040 	call	1000bb04 <__muldf3>
10002eac:	000d883a 	mov	r6,zero
10002eb0:	1009883a 	mov	r4,r2
10002eb4:	180b883a 	mov	r5,r3
10002eb8:	01d00734 	movhi	r7,16412
10002ebc:	000a6a40 	call	1000a6a4 <__adddf3>
10002ec0:	1023883a 	mov	r17,r2
10002ec4:	d9800617 	ldw	r6,24(sp)
10002ec8:	00bf3034 	movhi	r2,64704
10002ecc:	1885883a 	add	r2,r3,r2
10002ed0:	d8800e15 	stw	r2,56(sp)
10002ed4:	30032e26 	beq	r6,zero,10003b90 <_dtoa_r+0x1178>
10002ed8:	d8c00517 	ldw	r3,20(sp)
10002edc:	da800617 	ldw	r10,24(sp)
10002ee0:	d8c01215 	stw	r3,72(sp)
10002ee4:	d9000b17 	ldw	r4,44(sp)
10002ee8:	2003b026 	beq	r4,zero,10003dac <_dtoa_r+0x1394>
10002eec:	50bfffc4 	addi	r2,r10,-1
10002ef0:	100490fa 	slli	r2,r2,3
10002ef4:	00c40074 	movhi	r3,4097
10002ef8:	18fdab04 	addi	r3,r3,-2388
10002efc:	1885883a 	add	r2,r3,r2
10002f00:	11800017 	ldw	r6,0(r2)
10002f04:	11c00117 	ldw	r7,4(r2)
10002f08:	d8800717 	ldw	r2,28(sp)
10002f0c:	0009883a 	mov	r4,zero
10002f10:	014ff834 	movhi	r5,16352
10002f14:	da801615 	stw	r10,88(sp)
10002f18:	15c00044 	addi	r23,r2,1
10002f1c:	000af400 	call	1000af40 <__divdf3>
10002f20:	d9c00e17 	ldw	r7,56(sp)
10002f24:	880d883a 	mov	r6,r17
10002f28:	1009883a 	mov	r4,r2
10002f2c:	180b883a 	mov	r5,r3
10002f30:	000c3700 	call	1000c370 <__subdf3>
10002f34:	a80b883a 	mov	r5,r21
10002f38:	a009883a 	mov	r4,r20
10002f3c:	d8c01015 	stw	r3,64(sp)
10002f40:	d8800e15 	stw	r2,56(sp)
10002f44:	000cc400 	call	1000cc40 <__fixdfsi>
10002f48:	1009883a 	mov	r4,r2
10002f4c:	d8801715 	stw	r2,92(sp)
10002f50:	000ccc80 	call	1000ccc8 <__floatsidf>
10002f54:	a009883a 	mov	r4,r20
10002f58:	a80b883a 	mov	r5,r21
10002f5c:	100d883a 	mov	r6,r2
10002f60:	180f883a 	mov	r7,r3
10002f64:	000c3700 	call	1000c370 <__subdf3>
10002f68:	da001717 	ldw	r8,92(sp)
10002f6c:	1829883a 	mov	r20,r3
10002f70:	d8c00717 	ldw	r3,28(sp)
10002f74:	d9000e17 	ldw	r4,56(sp)
10002f78:	d9401017 	ldw	r5,64(sp)
10002f7c:	42000c04 	addi	r8,r8,48
10002f80:	1023883a 	mov	r17,r2
10002f84:	1a000005 	stb	r8,0(r3)
10002f88:	880d883a 	mov	r6,r17
10002f8c:	a00f883a 	mov	r7,r20
10002f90:	402b883a 	mov	r21,r8
10002f94:	000b9440 	call	1000b944 <__gedf2>
10002f98:	00844516 	blt	zero,r2,100040b0 <_dtoa_r+0x1698>
10002f9c:	0009883a 	mov	r4,zero
10002fa0:	014ffc34 	movhi	r5,16368
10002fa4:	880d883a 	mov	r6,r17
10002fa8:	a00f883a 	mov	r7,r20
10002fac:	000c3700 	call	1000c370 <__subdf3>
10002fb0:	d9000e17 	ldw	r4,56(sp)
10002fb4:	d9401017 	ldw	r5,64(sp)
10002fb8:	100d883a 	mov	r6,r2
10002fbc:	180f883a 	mov	r7,r3
10002fc0:	000b9440 	call	1000b944 <__gedf2>
10002fc4:	da801617 	ldw	r10,88(sp)
10002fc8:	00843616 	blt	zero,r2,100040a4 <_dtoa_r+0x168c>
10002fcc:	00800044 	movi	r2,1
10002fd0:	12806e0e 	bge	r2,r10,1000318c <_dtoa_r+0x774>
10002fd4:	d9000717 	ldw	r4,28(sp)
10002fd8:	dd801315 	stw	r22,76(sp)
10002fdc:	dc001115 	stw	r16,68(sp)
10002fe0:	2295883a 	add	r10,r4,r10
10002fe4:	dcc01415 	stw	r19,80(sp)
10002fe8:	502d883a 	mov	r22,r10
10002fec:	dcc01017 	ldw	r19,64(sp)
10002ff0:	b821883a 	mov	r16,r23
10002ff4:	dc801015 	stw	r18,64(sp)
10002ff8:	dc800e17 	ldw	r18,56(sp)
10002ffc:	00000906 	br	10003024 <_dtoa_r+0x60c>
10003000:	000c3700 	call	1000c370 <__subdf3>
10003004:	1009883a 	mov	r4,r2
10003008:	180b883a 	mov	r5,r3
1000300c:	900d883a 	mov	r6,r18
10003010:	980f883a 	mov	r7,r19
10003014:	000ba240 	call	1000ba24 <__ledf2>
10003018:	10040e16 	blt	r2,zero,10004054 <_dtoa_r+0x163c>
1000301c:	b821883a 	mov	r16,r23
10003020:	bd841026 	beq	r23,r22,10004064 <_dtoa_r+0x164c>
10003024:	9009883a 	mov	r4,r18
10003028:	980b883a 	mov	r5,r19
1000302c:	000d883a 	mov	r6,zero
10003030:	01d00934 	movhi	r7,16420
10003034:	000bb040 	call	1000bb04 <__muldf3>
10003038:	000d883a 	mov	r6,zero
1000303c:	01d00934 	movhi	r7,16420
10003040:	8809883a 	mov	r4,r17
10003044:	a00b883a 	mov	r5,r20
10003048:	1025883a 	mov	r18,r2
1000304c:	1827883a 	mov	r19,r3
10003050:	000bb040 	call	1000bb04 <__muldf3>
10003054:	180b883a 	mov	r5,r3
10003058:	1009883a 	mov	r4,r2
1000305c:	1823883a 	mov	r17,r3
10003060:	1029883a 	mov	r20,r2
10003064:	000cc400 	call	1000cc40 <__fixdfsi>
10003068:	1009883a 	mov	r4,r2
1000306c:	102b883a 	mov	r21,r2
10003070:	000ccc80 	call	1000ccc8 <__floatsidf>
10003074:	a009883a 	mov	r4,r20
10003078:	880b883a 	mov	r5,r17
1000307c:	100d883a 	mov	r6,r2
10003080:	180f883a 	mov	r7,r3
10003084:	000c3700 	call	1000c370 <__subdf3>
10003088:	ad400c04 	addi	r21,r21,48
1000308c:	1009883a 	mov	r4,r2
10003090:	180b883a 	mov	r5,r3
10003094:	900d883a 	mov	r6,r18
10003098:	980f883a 	mov	r7,r19
1000309c:	85400005 	stb	r21,0(r16)
100030a0:	1023883a 	mov	r17,r2
100030a4:	1829883a 	mov	r20,r3
100030a8:	000ba240 	call	1000ba24 <__ledf2>
100030ac:	bdc00044 	addi	r23,r23,1
100030b0:	0009883a 	mov	r4,zero
100030b4:	014ffc34 	movhi	r5,16368
100030b8:	880d883a 	mov	r6,r17
100030bc:	a00f883a 	mov	r7,r20
100030c0:	103fcf0e 	bge	r2,zero,10003000 <_dtoa_r+0x5e8>
100030c4:	d9801217 	ldw	r6,72(sp)
100030c8:	dc001117 	ldw	r16,68(sp)
100030cc:	d9800515 	stw	r6,20(sp)
100030d0:	8009883a 	mov	r4,r16
100030d4:	e00b883a 	mov	r5,fp
100030d8:	00060fc0 	call	100060fc <_Bfree>
100030dc:	d8c00517 	ldw	r3,20(sp)
100030e0:	d9002317 	ldw	r4,140(sp)
100030e4:	d9802517 	ldw	r6,148(sp)
100030e8:	b8000005 	stb	zero,0(r23)
100030ec:	18800044 	addi	r2,r3,1
100030f0:	20800015 	stw	r2,0(r4)
100030f4:	30027226 	beq	r6,zero,10003ac0 <_dtoa_r+0x10a8>
100030f8:	35c00015 	stw	r23,0(r6)
100030fc:	d8800717 	ldw	r2,28(sp)
10003100:	003e7406 	br	10002ad4 <_dtoa_r+0xbc>
10003104:	00800434 	movhi	r2,16
10003108:	10bfffc4 	addi	r2,r2,-1
1000310c:	a8aa703a 	and	r21,r21,r2
10003110:	a83e801e 	bne	r21,zero,10002b14 <_dtoa_r+0xfc>
10003114:	00840074 	movhi	r2,4097
10003118:	10bd8c04 	addi	r2,r2,-2512
1000311c:	003e7f06 	br	10002b1c <_dtoa_r+0x104>
10003120:	10c00204 	addi	r3,r2,8
10003124:	003e8206 	br	10002b30 <_dtoa_r+0x118>
10003128:	01400434 	movhi	r5,16
1000312c:	297fffc4 	addi	r5,r5,-1
10003130:	994a703a 	and	r5,r19,r5
10003134:	9009883a 	mov	r4,r18
10003138:	8c7f0044 	addi	r17,r17,-1023
1000313c:	294ffc34 	orhi	r5,r5,16368
10003140:	dd000217 	ldw	r20,8(sp)
10003144:	d8000f15 	stw	zero,60(sp)
10003148:	003e9f06 	br	10002bc8 <_dtoa_r+0x1b0>
1000314c:	00840074 	movhi	r2,4097
10003150:	10bd8304 	addi	r2,r2,-2548
10003154:	003e5f06 	br	10002ad4 <_dtoa_r+0xbc>
10003158:	80001115 	stw	zero,68(r16)
1000315c:	8009883a 	mov	r4,r16
10003160:	000b883a 	mov	r5,zero
10003164:	00060540 	call	10006054 <_Balloc>
10003168:	01bfffc4 	movi	r6,-1
1000316c:	d8800715 	stw	r2,28(sp)
10003170:	80801015 	stw	r2,64(r16)
10003174:	00800044 	movi	r2,1
10003178:	d9800615 	stw	r6,24(sp)
1000317c:	d8800b15 	stw	r2,44(sp)
10003180:	d8002215 	stw	zero,136(sp)
10003184:	d9800d15 	stw	r6,52(sp)
10003188:	d8000315 	stw	zero,12(sp)
1000318c:	d8800117 	ldw	r2,4(sp)
10003190:	10008e16 	blt	r2,zero,100033cc <_dtoa_r+0x9b4>
10003194:	d9000517 	ldw	r4,20(sp)
10003198:	00c00384 	movi	r3,14
1000319c:	19008b16 	blt	r3,r4,100033cc <_dtoa_r+0x9b4>
100031a0:	200490fa 	slli	r2,r4,3
100031a4:	00c40074 	movhi	r3,4097
100031a8:	d9802217 	ldw	r6,136(sp)
100031ac:	18fdab04 	addi	r3,r3,-2388
100031b0:	1885883a 	add	r2,r3,r2
100031b4:	14400017 	ldw	r17,0(r2)
100031b8:	15000117 	ldw	r20,4(r2)
100031bc:	3001c716 	blt	r6,zero,100038dc <_dtoa_r+0xec4>
100031c0:	880d883a 	mov	r6,r17
100031c4:	a00f883a 	mov	r7,r20
100031c8:	9009883a 	mov	r4,r18
100031cc:	980b883a 	mov	r5,r19
100031d0:	000af400 	call	1000af40 <__divdf3>
100031d4:	180b883a 	mov	r5,r3
100031d8:	1009883a 	mov	r4,r2
100031dc:	000cc400 	call	1000cc40 <__fixdfsi>
100031e0:	1009883a 	mov	r4,r2
100031e4:	102d883a 	mov	r22,r2
100031e8:	000ccc80 	call	1000ccc8 <__floatsidf>
100031ec:	1009883a 	mov	r4,r2
100031f0:	180b883a 	mov	r5,r3
100031f4:	880d883a 	mov	r6,r17
100031f8:	a00f883a 	mov	r7,r20
100031fc:	000bb040 	call	1000bb04 <__muldf3>
10003200:	9009883a 	mov	r4,r18
10003204:	980b883a 	mov	r5,r19
10003208:	100d883a 	mov	r6,r2
1000320c:	180f883a 	mov	r7,r3
10003210:	000c3700 	call	1000c370 <__subdf3>
10003214:	d9000717 	ldw	r4,28(sp)
10003218:	d9800617 	ldw	r6,24(sp)
1000321c:	180b883a 	mov	r5,r3
10003220:	b0c00c04 	addi	r3,r22,48
10003224:	20c00005 	stb	r3,0(r4)
10003228:	25c00044 	addi	r23,r4,1
1000322c:	01000044 	movi	r4,1
10003230:	1011883a 	mov	r8,r2
10003234:	2807883a 	mov	r3,r5
10003238:	31003d26 	beq	r6,r4,10003330 <_dtoa_r+0x918>
1000323c:	000d883a 	mov	r6,zero
10003240:	01d00934 	movhi	r7,16420
10003244:	1009883a 	mov	r4,r2
10003248:	000bb040 	call	1000bb04 <__muldf3>
1000324c:	1009883a 	mov	r4,r2
10003250:	180b883a 	mov	r5,r3
10003254:	000d883a 	mov	r6,zero
10003258:	000f883a 	mov	r7,zero
1000325c:	1027883a 	mov	r19,r2
10003260:	182b883a 	mov	r21,r3
10003264:	000b8c00 	call	1000b8c0 <__eqdf2>
10003268:	103f9926 	beq	r2,zero,100030d0 <_dtoa_r+0x6b8>
1000326c:	d8c00617 	ldw	r3,24(sp)
10003270:	d9000717 	ldw	r4,28(sp)
10003274:	b825883a 	mov	r18,r23
10003278:	18bfffc4 	addi	r2,r3,-1
1000327c:	20ad883a 	add	r22,r4,r2
10003280:	dc000315 	stw	r16,12(sp)
10003284:	00000a06 	br	100032b0 <_dtoa_r+0x898>
10003288:	000bb040 	call	1000bb04 <__muldf3>
1000328c:	1009883a 	mov	r4,r2
10003290:	180b883a 	mov	r5,r3
10003294:	000d883a 	mov	r6,zero
10003298:	000f883a 	mov	r7,zero
1000329c:	1027883a 	mov	r19,r2
100032a0:	182b883a 	mov	r21,r3
100032a4:	b825883a 	mov	r18,r23
100032a8:	000b8c00 	call	1000b8c0 <__eqdf2>
100032ac:	10022626 	beq	r2,zero,10003b48 <_dtoa_r+0x1130>
100032b0:	880d883a 	mov	r6,r17
100032b4:	a00f883a 	mov	r7,r20
100032b8:	9809883a 	mov	r4,r19
100032bc:	a80b883a 	mov	r5,r21
100032c0:	000af400 	call	1000af40 <__divdf3>
100032c4:	180b883a 	mov	r5,r3
100032c8:	1009883a 	mov	r4,r2
100032cc:	000cc400 	call	1000cc40 <__fixdfsi>
100032d0:	1009883a 	mov	r4,r2
100032d4:	1021883a 	mov	r16,r2
100032d8:	000ccc80 	call	1000ccc8 <__floatsidf>
100032dc:	1009883a 	mov	r4,r2
100032e0:	180b883a 	mov	r5,r3
100032e4:	880d883a 	mov	r6,r17
100032e8:	a00f883a 	mov	r7,r20
100032ec:	000bb040 	call	1000bb04 <__muldf3>
100032f0:	9809883a 	mov	r4,r19
100032f4:	a80b883a 	mov	r5,r21
100032f8:	100d883a 	mov	r6,r2
100032fc:	180f883a 	mov	r7,r3
10003300:	000c3700 	call	1000c370 <__subdf3>
10003304:	82000c04 	addi	r8,r16,48
10003308:	92000005 	stb	r8,0(r18)
1000330c:	1009883a 	mov	r4,r2
10003310:	180b883a 	mov	r5,r3
10003314:	000d883a 	mov	r6,zero
10003318:	01d00934 	movhi	r7,16420
1000331c:	1011883a 	mov	r8,r2
10003320:	bdc00044 	addi	r23,r23,1
10003324:	95bfd81e 	bne	r18,r22,10003288 <_dtoa_r+0x870>
10003328:	802d883a 	mov	r22,r16
1000332c:	dc000317 	ldw	r16,12(sp)
10003330:	4009883a 	mov	r4,r8
10003334:	180b883a 	mov	r5,r3
10003338:	400d883a 	mov	r6,r8
1000333c:	180f883a 	mov	r7,r3
10003340:	000a6a40 	call	1000a6a4 <__adddf3>
10003344:	8809883a 	mov	r4,r17
10003348:	a00b883a 	mov	r5,r20
1000334c:	100d883a 	mov	r6,r2
10003350:	180f883a 	mov	r7,r3
10003354:	1027883a 	mov	r19,r2
10003358:	1825883a 	mov	r18,r3
1000335c:	000ba240 	call	1000ba24 <__ledf2>
10003360:	10000816 	blt	r2,zero,10003384 <_dtoa_r+0x96c>
10003364:	8809883a 	mov	r4,r17
10003368:	a00b883a 	mov	r5,r20
1000336c:	980d883a 	mov	r6,r19
10003370:	900f883a 	mov	r7,r18
10003374:	000b8c00 	call	1000b8c0 <__eqdf2>
10003378:	103f551e 	bne	r2,zero,100030d0 <_dtoa_r+0x6b8>
1000337c:	b580004c 	andi	r22,r22,1
10003380:	b03f5326 	beq	r22,zero,100030d0 <_dtoa_r+0x6b8>
10003384:	bd7fffc3 	ldbu	r21,-1(r23)
10003388:	b8bfffc4 	addi	r2,r23,-1
1000338c:	1007883a 	mov	r3,r2
10003390:	01400e44 	movi	r5,57
10003394:	d9800717 	ldw	r6,28(sp)
10003398:	00000506 	br	100033b0 <_dtoa_r+0x998>
1000339c:	18ffffc4 	addi	r3,r3,-1
100033a0:	30825e26 	beq	r6,r2,10003d1c <_dtoa_r+0x1304>
100033a4:	1d400003 	ldbu	r21,0(r3)
100033a8:	102f883a 	mov	r23,r2
100033ac:	10bfffc4 	addi	r2,r2,-1
100033b0:	a9003fcc 	andi	r4,r21,255
100033b4:	2100201c 	xori	r4,r4,128
100033b8:	213fe004 	addi	r4,r4,-128
100033bc:	217ff726 	beq	r4,r5,1000339c <_dtoa_r+0x984>
100033c0:	aa000044 	addi	r8,r21,1
100033c4:	12000005 	stb	r8,0(r2)
100033c8:	003f4106 	br	100030d0 <_dtoa_r+0x6b8>
100033cc:	d8c00b17 	ldw	r3,44(sp)
100033d0:	18006726 	beq	r3,zero,10003570 <_dtoa_r+0xb58>
100033d4:	d9000317 	ldw	r4,12(sp)
100033d8:	00c00044 	movi	r3,1
100033dc:	19016a0e 	bge	r3,r4,10003988 <_dtoa_r+0xf70>
100033e0:	d8800617 	ldw	r2,24(sp)
100033e4:	d8c00917 	ldw	r3,36(sp)
100033e8:	157fffc4 	addi	r21,r2,-1
100033ec:	1d420716 	blt	r3,r21,10003c0c <_dtoa_r+0x11f4>
100033f0:	1d6bc83a 	sub	r21,r3,r21
100033f4:	d8800617 	ldw	r2,24(sp)
100033f8:	1002c716 	blt	r2,zero,10003f18 <_dtoa_r+0x1500>
100033fc:	dd000817 	ldw	r20,32(sp)
10003400:	d8800617 	ldw	r2,24(sp)
10003404:	d9800817 	ldw	r6,32(sp)
10003408:	8009883a 	mov	r4,r16
1000340c:	01400044 	movi	r5,1
10003410:	308d883a 	add	r6,r6,r2
10003414:	d9800815 	stw	r6,32(sp)
10003418:	b0ad883a 	add	r22,r22,r2
1000341c:	000647c0 	call	1000647c <__i2b>
10003420:	1023883a 	mov	r17,r2
10003424:	a0000826 	beq	r20,zero,10003448 <_dtoa_r+0xa30>
10003428:	0580070e 	bge	zero,r22,10003448 <_dtoa_r+0xa30>
1000342c:	b005883a 	mov	r2,r22
10003430:	a5812016 	blt	r20,r22,100038b4 <_dtoa_r+0xe9c>
10003434:	d8c00817 	ldw	r3,32(sp)
10003438:	a0a9c83a 	sub	r20,r20,r2
1000343c:	b0adc83a 	sub	r22,r22,r2
10003440:	1887c83a 	sub	r3,r3,r2
10003444:	d8c00815 	stw	r3,32(sp)
10003448:	d9000917 	ldw	r4,36(sp)
1000344c:	0100140e 	bge	zero,r4,100034a0 <_dtoa_r+0xa88>
10003450:	d9800b17 	ldw	r6,44(sp)
10003454:	3001e526 	beq	r6,zero,10003bec <_dtoa_r+0x11d4>
10003458:	05400e0e 	bge	zero,r21,10003494 <_dtoa_r+0xa7c>
1000345c:	880b883a 	mov	r5,r17
10003460:	8009883a 	mov	r4,r16
10003464:	a80d883a 	mov	r6,r21
10003468:	00067480 	call	10006748 <__pow5mult>
1000346c:	e00d883a 	mov	r6,fp
10003470:	8009883a 	mov	r4,r16
10003474:	100b883a 	mov	r5,r2
10003478:	1023883a 	mov	r17,r2
1000347c:	00064b80 	call	100064b8 <__multiply>
10003480:	102f883a 	mov	r23,r2
10003484:	e00b883a 	mov	r5,fp
10003488:	8009883a 	mov	r4,r16
1000348c:	00060fc0 	call	100060fc <_Bfree>
10003490:	b839883a 	mov	fp,r23
10003494:	d8800917 	ldw	r2,36(sp)
10003498:	154dc83a 	sub	r6,r2,r21
1000349c:	3001281e 	bne	r6,zero,10003940 <_dtoa_r+0xf28>
100034a0:	05c00044 	movi	r23,1
100034a4:	8009883a 	mov	r4,r16
100034a8:	b80b883a 	mov	r5,r23
100034ac:	000647c0 	call	1000647c <__i2b>
100034b0:	d8c00a17 	ldw	r3,40(sp)
100034b4:	102b883a 	mov	r21,r2
100034b8:	00c0310e 	bge	zero,r3,10003580 <_dtoa_r+0xb68>
100034bc:	8009883a 	mov	r4,r16
100034c0:	100b883a 	mov	r5,r2
100034c4:	180d883a 	mov	r6,r3
100034c8:	00067480 	call	10006748 <__pow5mult>
100034cc:	d9000317 	ldw	r4,12(sp)
100034d0:	102b883a 	mov	r21,r2
100034d4:	b9011f0e 	bge	r23,r4,10003954 <_dtoa_r+0xf3c>
100034d8:	0027883a 	mov	r19,zero
100034dc:	a8800417 	ldw	r2,16(r21)
100034e0:	10800104 	addi	r2,r2,4
100034e4:	1085883a 	add	r2,r2,r2
100034e8:	1085883a 	add	r2,r2,r2
100034ec:	a885883a 	add	r2,r21,r2
100034f0:	11000017 	ldw	r4,0(r2)
100034f4:	00063640 	call	10006364 <__hi0bits>
100034f8:	00c00804 	movi	r3,32
100034fc:	1885c83a 	sub	r2,r3,r2
10003500:	00002506 	br	10003598 <_dtoa_r+0xb80>
10003504:	01800044 	movi	r6,1
10003508:	d9800c15 	stw	r6,48(sp)
1000350c:	003dec06 	br	10002cc0 <_dtoa_r+0x2a8>
10003510:	d8c00817 	ldw	r3,32(sp)
10003514:	d9000517 	ldw	r4,20(sp)
10003518:	d8000a15 	stw	zero,40(sp)
1000351c:	1907c83a 	sub	r3,r3,r4
10003520:	010dc83a 	sub	r6,zero,r4
10003524:	d8c00815 	stw	r3,32(sp)
10003528:	d9800915 	stw	r6,36(sp)
1000352c:	003ded06 	br	10002ce4 <_dtoa_r+0x2cc>
10003530:	05adc83a 	sub	r22,zero,r22
10003534:	dd800815 	stw	r22,32(sp)
10003538:	002d883a 	mov	r22,zero
1000353c:	003de406 	br	10002cd0 <_dtoa_r+0x2b8>
10003540:	d9000517 	ldw	r4,20(sp)
10003544:	000ccc80 	call	1000ccc8 <__floatsidf>
10003548:	1009883a 	mov	r4,r2
1000354c:	180b883a 	mov	r5,r3
10003550:	b00d883a 	mov	r6,r22
10003554:	a80f883a 	mov	r7,r21
10003558:	000b8c00 	call	1000b8c0 <__eqdf2>
1000355c:	103dc726 	beq	r2,zero,10002c7c <_dtoa_r+0x264>
10003560:	d8800517 	ldw	r2,20(sp)
10003564:	10bfffc4 	addi	r2,r2,-1
10003568:	d8800515 	stw	r2,20(sp)
1000356c:	003dc306 	br	10002c7c <_dtoa_r+0x264>
10003570:	dd400917 	ldw	r21,36(sp)
10003574:	dd000817 	ldw	r20,32(sp)
10003578:	0023883a 	mov	r17,zero
1000357c:	003fa906 	br	10003424 <_dtoa_r+0xa0c>
10003580:	d9800317 	ldw	r6,12(sp)
10003584:	b981670e 	bge	r23,r6,10003b24 <_dtoa_r+0x110c>
10003588:	0027883a 	mov	r19,zero
1000358c:	d8c00a17 	ldw	r3,40(sp)
10003590:	183fd21e 	bne	r3,zero,100034dc <_dtoa_r+0xac4>
10003594:	00800044 	movi	r2,1
10003598:	1585883a 	add	r2,r2,r22
1000359c:	108007cc 	andi	r2,r2,31
100035a0:	10005f26 	beq	r2,zero,10003720 <_dtoa_r+0xd08>
100035a4:	00c00804 	movi	r3,32
100035a8:	1887c83a 	sub	r3,r3,r2
100035ac:	01000104 	movi	r4,4
100035b0:	20c2dd0e 	bge	r4,r3,10004128 <_dtoa_r+0x1710>
100035b4:	d9000817 	ldw	r4,32(sp)
100035b8:	00c00704 	movi	r3,28
100035bc:	1885c83a 	sub	r2,r3,r2
100035c0:	2089883a 	add	r4,r4,r2
100035c4:	d9000815 	stw	r4,32(sp)
100035c8:	a0a9883a 	add	r20,r20,r2
100035cc:	b0ad883a 	add	r22,r22,r2
100035d0:	d8800817 	ldw	r2,32(sp)
100035d4:	0080050e 	bge	zero,r2,100035ec <_dtoa_r+0xbd4>
100035d8:	e00b883a 	mov	r5,fp
100035dc:	8009883a 	mov	r4,r16
100035e0:	100d883a 	mov	r6,r2
100035e4:	00068880 	call	10006888 <__lshift>
100035e8:	1039883a 	mov	fp,r2
100035ec:	0580050e 	bge	zero,r22,10003604 <_dtoa_r+0xbec>
100035f0:	a80b883a 	mov	r5,r21
100035f4:	8009883a 	mov	r4,r16
100035f8:	b00d883a 	mov	r6,r22
100035fc:	00068880 	call	10006888 <__lshift>
10003600:	102b883a 	mov	r21,r2
10003604:	d8c00c17 	ldw	r3,48(sp)
10003608:	1801161e 	bne	r3,zero,10003a64 <_dtoa_r+0x104c>
1000360c:	d8c00617 	ldw	r3,24(sp)
10003610:	00c12d0e 	bge	zero,r3,10003ac8 <_dtoa_r+0x10b0>
10003614:	d8c00b17 	ldw	r3,44(sp)
10003618:	1800571e 	bne	r3,zero,10003778 <_dtoa_r+0xd60>
1000361c:	dc800717 	ldw	r18,28(sp)
10003620:	dcc00617 	ldw	r19,24(sp)
10003624:	9029883a 	mov	r20,r18
10003628:	00000206 	br	10003634 <_dtoa_r+0xc1c>
1000362c:	00061240 	call	10006124 <__multadd>
10003630:	1039883a 	mov	fp,r2
10003634:	e009883a 	mov	r4,fp
10003638:	a80b883a 	mov	r5,r21
1000363c:	00027f00 	call	100027f0 <quorem>
10003640:	10800c04 	addi	r2,r2,48
10003644:	90800005 	stb	r2,0(r18)
10003648:	94800044 	addi	r18,r18,1
1000364c:	9507c83a 	sub	r3,r18,r20
10003650:	8009883a 	mov	r4,r16
10003654:	e00b883a 	mov	r5,fp
10003658:	01800284 	movi	r6,10
1000365c:	000f883a 	mov	r7,zero
10003660:	1cfff216 	blt	r3,r19,1000362c <_dtoa_r+0xc14>
10003664:	1011883a 	mov	r8,r2
10003668:	d8800617 	ldw	r2,24(sp)
1000366c:	00822e0e 	bge	zero,r2,10003f28 <_dtoa_r+0x1510>
10003670:	d9000717 	ldw	r4,28(sp)
10003674:	0025883a 	mov	r18,zero
10003678:	20af883a 	add	r23,r4,r2
1000367c:	e00b883a 	mov	r5,fp
10003680:	01800044 	movi	r6,1
10003684:	8009883a 	mov	r4,r16
10003688:	da001715 	stw	r8,92(sp)
1000368c:	00068880 	call	10006888 <__lshift>
10003690:	1009883a 	mov	r4,r2
10003694:	a80b883a 	mov	r5,r21
10003698:	1039883a 	mov	fp,r2
1000369c:	00069d00 	call	100069d0 <__mcmp>
100036a0:	da001717 	ldw	r8,92(sp)
100036a4:	00816e0e 	bge	zero,r2,10003c60 <_dtoa_r+0x1248>
100036a8:	b93fffc3 	ldbu	r4,-1(r23)
100036ac:	b8bfffc4 	addi	r2,r23,-1
100036b0:	1007883a 	mov	r3,r2
100036b4:	01800e44 	movi	r6,57
100036b8:	d9c00717 	ldw	r7,28(sp)
100036bc:	00000506 	br	100036d4 <_dtoa_r+0xcbc>
100036c0:	18ffffc4 	addi	r3,r3,-1
100036c4:	38811926 	beq	r7,r2,10003b2c <_dtoa_r+0x1114>
100036c8:	19000003 	ldbu	r4,0(r3)
100036cc:	102f883a 	mov	r23,r2
100036d0:	10bfffc4 	addi	r2,r2,-1
100036d4:	21403fcc 	andi	r5,r4,255
100036d8:	2940201c 	xori	r5,r5,128
100036dc:	297fe004 	addi	r5,r5,-128
100036e0:	29bff726 	beq	r5,r6,100036c0 <_dtoa_r+0xca8>
100036e4:	21000044 	addi	r4,r4,1
100036e8:	11000005 	stb	r4,0(r2)
100036ec:	8009883a 	mov	r4,r16
100036f0:	a80b883a 	mov	r5,r21
100036f4:	00060fc0 	call	100060fc <_Bfree>
100036f8:	883e7526 	beq	r17,zero,100030d0 <_dtoa_r+0x6b8>
100036fc:	90000426 	beq	r18,zero,10003710 <_dtoa_r+0xcf8>
10003700:	94400326 	beq	r18,r17,10003710 <_dtoa_r+0xcf8>
10003704:	8009883a 	mov	r4,r16
10003708:	900b883a 	mov	r5,r18
1000370c:	00060fc0 	call	100060fc <_Bfree>
10003710:	8009883a 	mov	r4,r16
10003714:	880b883a 	mov	r5,r17
10003718:	00060fc0 	call	100060fc <_Bfree>
1000371c:	003e6c06 	br	100030d0 <_dtoa_r+0x6b8>
10003720:	00800704 	movi	r2,28
10003724:	d9800817 	ldw	r6,32(sp)
10003728:	a0a9883a 	add	r20,r20,r2
1000372c:	b0ad883a 	add	r22,r22,r2
10003730:	308d883a 	add	r6,r6,r2
10003734:	d9800815 	stw	r6,32(sp)
10003738:	003fa506 	br	100035d0 <_dtoa_r+0xbb8>
1000373c:	013efb84 	movi	r4,-1042
10003740:	246bc83a 	sub	r21,r4,r17
10003744:	9548983a 	sll	r4,r18,r21
10003748:	003d1806 	br	10002bac <_dtoa_r+0x194>
1000374c:	d8000c15 	stw	zero,48(sp)
10003750:	003d5b06 	br	10002cc0 <_dtoa_r+0x2a8>
10003754:	880b883a 	mov	r5,r17
10003758:	8009883a 	mov	r4,r16
1000375c:	01800284 	movi	r6,10
10003760:	000f883a 	mov	r7,zero
10003764:	00061240 	call	10006124 <__multadd>
10003768:	1023883a 	mov	r17,r2
1000376c:	d8800d17 	ldw	r2,52(sp)
10003770:	0082550e 	bge	zero,r2,100040c8 <_dtoa_r+0x16b0>
10003774:	d8800615 	stw	r2,24(sp)
10003778:	0500050e 	bge	zero,r20,10003790 <_dtoa_r+0xd78>
1000377c:	880b883a 	mov	r5,r17
10003780:	8009883a 	mov	r4,r16
10003784:	a00d883a 	mov	r6,r20
10003788:	00068880 	call	10006888 <__lshift>
1000378c:	1023883a 	mov	r17,r2
10003790:	98016a1e 	bne	r19,zero,10003d3c <_dtoa_r+0x1324>
10003794:	8829883a 	mov	r20,r17
10003798:	d9000617 	ldw	r4,24(sp)
1000379c:	dcc00717 	ldw	r19,28(sp)
100037a0:	9480004c 	andi	r18,r18,1
100037a4:	20bfffc4 	addi	r2,r4,-1
100037a8:	9885883a 	add	r2,r19,r2
100037ac:	d8800415 	stw	r2,16(sp)
100037b0:	dc800615 	stw	r18,24(sp)
100037b4:	e009883a 	mov	r4,fp
100037b8:	a80b883a 	mov	r5,r21
100037bc:	00027f00 	call	100027f0 <quorem>
100037c0:	e009883a 	mov	r4,fp
100037c4:	880b883a 	mov	r5,r17
100037c8:	102f883a 	mov	r23,r2
100037cc:	00069d00 	call	100069d0 <__mcmp>
100037d0:	8009883a 	mov	r4,r16
100037d4:	a80b883a 	mov	r5,r21
100037d8:	a00d883a 	mov	r6,r20
100037dc:	102d883a 	mov	r22,r2
100037e0:	0006a300 	call	10006a30 <__mdiff>
100037e4:	1007883a 	mov	r3,r2
100037e8:	10800317 	ldw	r2,12(r2)
100037ec:	bc800c04 	addi	r18,r23,48
100037f0:	1000971e 	bne	r2,zero,10003a50 <_dtoa_r+0x1038>
100037f4:	180b883a 	mov	r5,r3
100037f8:	e009883a 	mov	r4,fp
100037fc:	d8c01515 	stw	r3,84(sp)
10003800:	00069d00 	call	100069d0 <__mcmp>
10003804:	d8c01517 	ldw	r3,84(sp)
10003808:	8009883a 	mov	r4,r16
1000380c:	d8801515 	stw	r2,84(sp)
10003810:	180b883a 	mov	r5,r3
10003814:	00060fc0 	call	100060fc <_Bfree>
10003818:	d8801517 	ldw	r2,84(sp)
1000381c:	1000041e 	bne	r2,zero,10003830 <_dtoa_r+0xe18>
10003820:	d9800317 	ldw	r6,12(sp)
10003824:	3000021e 	bne	r6,zero,10003830 <_dtoa_r+0xe18>
10003828:	d8c00617 	ldw	r3,24(sp)
1000382c:	18007626 	beq	r3,zero,10003a08 <_dtoa_r+0xff0>
10003830:	b0005b16 	blt	r22,zero,100039a0 <_dtoa_r+0xf88>
10003834:	b000041e 	bne	r22,zero,10003848 <_dtoa_r+0xe30>
10003838:	d9000317 	ldw	r4,12(sp)
1000383c:	2000021e 	bne	r4,zero,10003848 <_dtoa_r+0xe30>
10003840:	d8c00617 	ldw	r3,24(sp)
10003844:	18005626 	beq	r3,zero,100039a0 <_dtoa_r+0xf88>
10003848:	00814d16 	blt	zero,r2,10003d80 <_dtoa_r+0x1368>
1000384c:	d8c00417 	ldw	r3,16(sp)
10003850:	9d800044 	addi	r22,r19,1
10003854:	9c800005 	stb	r18,0(r19)
10003858:	b02f883a 	mov	r23,r22
1000385c:	98c14c26 	beq	r19,r3,10003d90 <_dtoa_r+0x1378>
10003860:	e00b883a 	mov	r5,fp
10003864:	8009883a 	mov	r4,r16
10003868:	01800284 	movi	r6,10
1000386c:	000f883a 	mov	r7,zero
10003870:	00061240 	call	10006124 <__multadd>
10003874:	1039883a 	mov	fp,r2
10003878:	8d006d26 	beq	r17,r20,10003a30 <_dtoa_r+0x1018>
1000387c:	880b883a 	mov	r5,r17
10003880:	01800284 	movi	r6,10
10003884:	000f883a 	mov	r7,zero
10003888:	8009883a 	mov	r4,r16
1000388c:	00061240 	call	10006124 <__multadd>
10003890:	a00b883a 	mov	r5,r20
10003894:	8009883a 	mov	r4,r16
10003898:	01800284 	movi	r6,10
1000389c:	000f883a 	mov	r7,zero
100038a0:	1023883a 	mov	r17,r2
100038a4:	00061240 	call	10006124 <__multadd>
100038a8:	1029883a 	mov	r20,r2
100038ac:	b027883a 	mov	r19,r22
100038b0:	003fc006 	br	100037b4 <_dtoa_r+0xd9c>
100038b4:	a005883a 	mov	r2,r20
100038b8:	003ede06 	br	10003434 <_dtoa_r+0xa1c>
100038bc:	01000044 	movi	r4,1
100038c0:	d9000b15 	stw	r4,44(sp)
100038c4:	d9802217 	ldw	r6,136(sp)
100038c8:	0180dc0e 	bge	zero,r6,10003c3c <_dtoa_r+0x1224>
100038cc:	3023883a 	mov	r17,r6
100038d0:	d9800d15 	stw	r6,52(sp)
100038d4:	d9800615 	stw	r6,24(sp)
100038d8:	003d1e06 	br	10002d54 <_dtoa_r+0x33c>
100038dc:	d8800617 	ldw	r2,24(sp)
100038e0:	00be3716 	blt	zero,r2,100031c0 <_dtoa_r+0x7a8>
100038e4:	1000be1e 	bne	r2,zero,10003be0 <_dtoa_r+0x11c8>
100038e8:	8809883a 	mov	r4,r17
100038ec:	a00b883a 	mov	r5,r20
100038f0:	000d883a 	mov	r6,zero
100038f4:	01d00534 	movhi	r7,16404
100038f8:	000bb040 	call	1000bb04 <__muldf3>
100038fc:	1009883a 	mov	r4,r2
10003900:	180b883a 	mov	r5,r3
10003904:	900d883a 	mov	r6,r18
10003908:	980f883a 	mov	r7,r19
1000390c:	000b9440 	call	1000b944 <__gedf2>
10003910:	002b883a 	mov	r21,zero
10003914:	0023883a 	mov	r17,zero
10003918:	10007a16 	blt	r2,zero,10003b04 <_dtoa_r+0x10ec>
1000391c:	d9002217 	ldw	r4,136(sp)
10003920:	ddc00717 	ldw	r23,28(sp)
10003924:	0108303a 	nor	r4,zero,r4
10003928:	d9000515 	stw	r4,20(sp)
1000392c:	8009883a 	mov	r4,r16
10003930:	a80b883a 	mov	r5,r21
10003934:	00060fc0 	call	100060fc <_Bfree>
10003938:	883f751e 	bne	r17,zero,10003710 <_dtoa_r+0xcf8>
1000393c:	003de406 	br	100030d0 <_dtoa_r+0x6b8>
10003940:	e00b883a 	mov	r5,fp
10003944:	8009883a 	mov	r4,r16
10003948:	00067480 	call	10006748 <__pow5mult>
1000394c:	1039883a 	mov	fp,r2
10003950:	003ed306 	br	100034a0 <_dtoa_r+0xa88>
10003954:	903ee01e 	bne	r18,zero,100034d8 <_dtoa_r+0xac0>
10003958:	00800434 	movhi	r2,16
1000395c:	10bfffc4 	addi	r2,r2,-1
10003960:	9884703a 	and	r2,r19,r2
10003964:	103f081e 	bne	r2,zero,10003588 <_dtoa_r+0xb70>
10003968:	9cdffc2c 	andhi	r19,r19,32752
1000396c:	983f0626 	beq	r19,zero,10003588 <_dtoa_r+0xb70>
10003970:	d8800817 	ldw	r2,32(sp)
10003974:	b5800044 	addi	r22,r22,1
10003978:	04c00044 	movi	r19,1
1000397c:	10800044 	addi	r2,r2,1
10003980:	d8800815 	stw	r2,32(sp)
10003984:	003f0106 	br	1000358c <_dtoa_r+0xb74>
10003988:	d9800f17 	ldw	r6,60(sp)
1000398c:	30016826 	beq	r6,zero,10003f30 <_dtoa_r+0x1518>
10003990:	10810cc4 	addi	r2,r2,1075
10003994:	dd400917 	ldw	r21,36(sp)
10003998:	dd000817 	ldw	r20,32(sp)
1000399c:	003e9906 	br	10003404 <_dtoa_r+0x9ec>
100039a0:	9011883a 	mov	r8,r18
100039a4:	4007883a 	mov	r3,r8
100039a8:	e02d883a 	mov	r22,fp
100039ac:	0080100e 	bge	zero,r2,100039f0 <_dtoa_r+0xfd8>
100039b0:	01800044 	movi	r6,1
100039b4:	8009883a 	mov	r4,r16
100039b8:	e00b883a 	mov	r5,fp
100039bc:	da001515 	stw	r8,84(sp)
100039c0:	da001715 	stw	r8,92(sp)
100039c4:	00068880 	call	10006888 <__lshift>
100039c8:	1009883a 	mov	r4,r2
100039cc:	a80b883a 	mov	r5,r21
100039d0:	102d883a 	mov	r22,r2
100039d4:	00069d00 	call	100069d0 <__mcmp>
100039d8:	d8c01517 	ldw	r3,84(sp)
100039dc:	da001717 	ldw	r8,92(sp)
100039e0:	0081a50e 	bge	zero,r2,10004078 <_dtoa_r+0x1660>
100039e4:	00800e44 	movi	r2,57
100039e8:	40817b26 	beq	r8,r2,10003fd8 <_dtoa_r+0x15c0>
100039ec:	40c00044 	addi	r3,r8,1
100039f0:	8825883a 	mov	r18,r17
100039f4:	9dc00044 	addi	r23,r19,1
100039f8:	98c00005 	stb	r3,0(r19)
100039fc:	a023883a 	mov	r17,r20
10003a00:	b039883a 	mov	fp,r22
10003a04:	003f3906 	br	100036ec <_dtoa_r+0xcd4>
10003a08:	00800e44 	movi	r2,57
10003a0c:	9011883a 	mov	r8,r18
10003a10:	90817226 	beq	r18,r2,10003fdc <_dtoa_r+0x15c4>
10003a14:	0580010e 	bge	zero,r22,10003a1c <_dtoa_r+0x1004>
10003a18:	ba000c44 	addi	r8,r23,49
10003a1c:	8825883a 	mov	r18,r17
10003a20:	9dc00044 	addi	r23,r19,1
10003a24:	9a000005 	stb	r8,0(r19)
10003a28:	a023883a 	mov	r17,r20
10003a2c:	003f2f06 	br	100036ec <_dtoa_r+0xcd4>
10003a30:	880b883a 	mov	r5,r17
10003a34:	8009883a 	mov	r4,r16
10003a38:	01800284 	movi	r6,10
10003a3c:	000f883a 	mov	r7,zero
10003a40:	00061240 	call	10006124 <__multadd>
10003a44:	1023883a 	mov	r17,r2
10003a48:	1029883a 	mov	r20,r2
10003a4c:	003f9706 	br	100038ac <_dtoa_r+0xe94>
10003a50:	8009883a 	mov	r4,r16
10003a54:	180b883a 	mov	r5,r3
10003a58:	00060fc0 	call	100060fc <_Bfree>
10003a5c:	00800044 	movi	r2,1
10003a60:	003f7306 	br	10003830 <_dtoa_r+0xe18>
10003a64:	e009883a 	mov	r4,fp
10003a68:	a80b883a 	mov	r5,r21
10003a6c:	00069d00 	call	100069d0 <__mcmp>
10003a70:	103ee60e 	bge	r2,zero,1000360c <_dtoa_r+0xbf4>
10003a74:	8009883a 	mov	r4,r16
10003a78:	e00b883a 	mov	r5,fp
10003a7c:	01800284 	movi	r6,10
10003a80:	000f883a 	mov	r7,zero
10003a84:	00061240 	call	10006124 <__multadd>
10003a88:	d9000517 	ldw	r4,20(sp)
10003a8c:	d9800b17 	ldw	r6,44(sp)
10003a90:	1039883a 	mov	fp,r2
10003a94:	213fffc4 	addi	r4,r4,-1
10003a98:	d9000515 	stw	r4,20(sp)
10003a9c:	303f2d1e 	bne	r6,zero,10003754 <_dtoa_r+0xd3c>
10003aa0:	d9000d17 	ldw	r4,52(sp)
10003aa4:	0101780e 	bge	zero,r4,10004088 <_dtoa_r+0x1670>
10003aa8:	d9000615 	stw	r4,24(sp)
10003aac:	003edb06 	br	1000361c <_dtoa_r+0xc04>
10003ab0:	00800084 	movi	r2,2
10003ab4:	30818e1e 	bne	r6,r2,100040f0 <_dtoa_r+0x16d8>
10003ab8:	d8000b15 	stw	zero,44(sp)
10003abc:	003f8106 	br	100038c4 <_dtoa_r+0xeac>
10003ac0:	d8800717 	ldw	r2,28(sp)
10003ac4:	003c0306 	br	10002ad4 <_dtoa_r+0xbc>
10003ac8:	d9000317 	ldw	r4,12(sp)
10003acc:	00800084 	movi	r2,2
10003ad0:	113ed00e 	bge	r2,r4,10003614 <_dtoa_r+0xbfc>
10003ad4:	d8c00617 	ldw	r3,24(sp)
10003ad8:	183f901e 	bne	r3,zero,1000391c <_dtoa_r+0xf04>
10003adc:	a80b883a 	mov	r5,r21
10003ae0:	8009883a 	mov	r4,r16
10003ae4:	01800144 	movi	r6,5
10003ae8:	000f883a 	mov	r7,zero
10003aec:	00061240 	call	10006124 <__multadd>
10003af0:	e009883a 	mov	r4,fp
10003af4:	100b883a 	mov	r5,r2
10003af8:	102b883a 	mov	r21,r2
10003afc:	00069d00 	call	100069d0 <__mcmp>
10003b00:	00bf860e 	bge	zero,r2,1000391c <_dtoa_r+0xf04>
10003b04:	d9800717 	ldw	r6,28(sp)
10003b08:	00800c44 	movi	r2,49
10003b0c:	30800005 	stb	r2,0(r6)
10003b10:	d8800517 	ldw	r2,20(sp)
10003b14:	35c00044 	addi	r23,r6,1
10003b18:	10800044 	addi	r2,r2,1
10003b1c:	d8800515 	stw	r2,20(sp)
10003b20:	003f8206 	br	1000392c <_dtoa_r+0xf14>
10003b24:	903e981e 	bne	r18,zero,10003588 <_dtoa_r+0xb70>
10003b28:	003f8b06 	br	10003958 <_dtoa_r+0xf40>
10003b2c:	d9800517 	ldw	r6,20(sp)
10003b30:	d8c00717 	ldw	r3,28(sp)
10003b34:	00800c44 	movi	r2,49
10003b38:	31800044 	addi	r6,r6,1
10003b3c:	d9800515 	stw	r6,20(sp)
10003b40:	18800005 	stb	r2,0(r3)
10003b44:	003ee906 	br	100036ec <_dtoa_r+0xcd4>
10003b48:	dc000317 	ldw	r16,12(sp)
10003b4c:	003d6006 	br	100030d0 <_dtoa_r+0x6b8>
10003b50:	8809883a 	mov	r4,r17
10003b54:	000ccc80 	call	1000ccc8 <__floatsidf>
10003b58:	a009883a 	mov	r4,r20
10003b5c:	a80b883a 	mov	r5,r21
10003b60:	100d883a 	mov	r6,r2
10003b64:	180f883a 	mov	r7,r3
10003b68:	000bb040 	call	1000bb04 <__muldf3>
10003b6c:	1009883a 	mov	r4,r2
10003b70:	180b883a 	mov	r5,r3
10003b74:	000d883a 	mov	r6,zero
10003b78:	01d00734 	movhi	r7,16412
10003b7c:	000a6a40 	call	1000a6a4 <__adddf3>
10003b80:	1023883a 	mov	r17,r2
10003b84:	00bf3034 	movhi	r2,64704
10003b88:	1885883a 	add	r2,r3,r2
10003b8c:	d8800e15 	stw	r2,56(sp)
10003b90:	a009883a 	mov	r4,r20
10003b94:	a80b883a 	mov	r5,r21
10003b98:	000d883a 	mov	r6,zero
10003b9c:	01d00534 	movhi	r7,16404
10003ba0:	000c3700 	call	1000c370 <__subdf3>
10003ba4:	d9c00e17 	ldw	r7,56(sp)
10003ba8:	1009883a 	mov	r4,r2
10003bac:	180b883a 	mov	r5,r3
10003bb0:	880d883a 	mov	r6,r17
10003bb4:	102b883a 	mov	r21,r2
10003bb8:	1829883a 	mov	r20,r3
10003bbc:	000b9440 	call	1000b944 <__gedf2>
10003bc0:	00807716 	blt	zero,r2,10003da0 <_dtoa_r+0x1388>
10003bc4:	d8800e17 	ldw	r2,56(sp)
10003bc8:	a809883a 	mov	r4,r21
10003bcc:	a00b883a 	mov	r5,r20
10003bd0:	11e0003c 	xorhi	r7,r2,32768
10003bd4:	880d883a 	mov	r6,r17
10003bd8:	000ba240 	call	1000ba24 <__ledf2>
10003bdc:	103d6b0e 	bge	r2,zero,1000318c <_dtoa_r+0x774>
10003be0:	002b883a 	mov	r21,zero
10003be4:	0023883a 	mov	r17,zero
10003be8:	003f4c06 	br	1000391c <_dtoa_r+0xf04>
10003bec:	d9800917 	ldw	r6,36(sp)
10003bf0:	e00b883a 	mov	r5,fp
10003bf4:	8009883a 	mov	r4,r16
10003bf8:	00067480 	call	10006748 <__pow5mult>
10003bfc:	1039883a 	mov	fp,r2
10003c00:	003e2706 	br	100034a0 <_dtoa_r+0xa88>
10003c04:	d8000b15 	stw	zero,44(sp)
10003c08:	003c4906 	br	10002d30 <_dtoa_r+0x318>
10003c0c:	d9000917 	ldw	r4,36(sp)
10003c10:	d9800a17 	ldw	r6,40(sp)
10003c14:	dd400915 	stw	r21,36(sp)
10003c18:	a905c83a 	sub	r2,r21,r4
10003c1c:	308d883a 	add	r6,r6,r2
10003c20:	d9800a15 	stw	r6,40(sp)
10003c24:	002b883a 	mov	r21,zero
10003c28:	003df206 	br	100033f4 <_dtoa_r+0x9dc>
10003c2c:	dc800e15 	stw	r18,56(sp)
10003c30:	982b883a 	mov	r21,r19
10003c34:	04400084 	movi	r17,2
10003c38:	003c7406 	br	10002e0c <_dtoa_r+0x3f4>
10003c3c:	04400044 	movi	r17,1
10003c40:	dc400d15 	stw	r17,52(sp)
10003c44:	dc400615 	stw	r17,24(sp)
10003c48:	dc402215 	stw	r17,136(sp)
10003c4c:	80001115 	stw	zero,68(r16)
10003c50:	000b883a 	mov	r5,zero
10003c54:	003c4a06 	br	10002d80 <_dtoa_r+0x368>
10003c58:	3023883a 	mov	r17,r6
10003c5c:	003ffb06 	br	10003c4c <_dtoa_r+0x1234>
10003c60:	1000021e 	bne	r2,zero,10003c6c <_dtoa_r+0x1254>
10003c64:	4200004c 	andi	r8,r8,1
10003c68:	403e8f1e 	bne	r8,zero,100036a8 <_dtoa_r+0xc90>
10003c6c:	01000c04 	movi	r4,48
10003c70:	00000106 	br	10003c78 <_dtoa_r+0x1260>
10003c74:	102f883a 	mov	r23,r2
10003c78:	b8bfffc4 	addi	r2,r23,-1
10003c7c:	10c00007 	ldb	r3,0(r2)
10003c80:	193ffc26 	beq	r3,r4,10003c74 <_dtoa_r+0x125c>
10003c84:	003e9906 	br	100036ec <_dtoa_r+0xcd4>
10003c88:	d9000517 	ldw	r4,20(sp)
10003c8c:	012fc83a 	sub	r23,zero,r4
10003c90:	b800ad26 	beq	r23,zero,10003f48 <_dtoa_r+0x1530>
10003c94:	b88003cc 	andi	r2,r23,15
10003c98:	100490fa 	slli	r2,r2,3
10003c9c:	00c40074 	movhi	r3,4097
10003ca0:	18fdab04 	addi	r3,r3,-2388
10003ca4:	1885883a 	add	r2,r3,r2
10003ca8:	11800017 	ldw	r6,0(r2)
10003cac:	11c00117 	ldw	r7,4(r2)
10003cb0:	b82fd13a 	srai	r23,r23,4
10003cb4:	9009883a 	mov	r4,r18
10003cb8:	980b883a 	mov	r5,r19
10003cbc:	000bb040 	call	1000bb04 <__muldf3>
10003cc0:	1029883a 	mov	r20,r2
10003cc4:	182b883a 	mov	r21,r3
10003cc8:	b800f426 	beq	r23,zero,1000409c <_dtoa_r+0x1684>
10003ccc:	02040074 	movhi	r8,4097
10003cd0:	423da104 	addi	r8,r8,-2428
10003cd4:	8029883a 	mov	r20,r16
10003cd8:	04400084 	movi	r17,2
10003cdc:	4021883a 	mov	r16,r8
10003ce0:	b980004c 	andi	r6,r23,1
10003ce4:	1009883a 	mov	r4,r2
10003ce8:	b82fd07a 	srai	r23,r23,1
10003cec:	180b883a 	mov	r5,r3
10003cf0:	30000426 	beq	r6,zero,10003d04 <_dtoa_r+0x12ec>
10003cf4:	81800017 	ldw	r6,0(r16)
10003cf8:	81c00117 	ldw	r7,4(r16)
10003cfc:	8c400044 	addi	r17,r17,1
10003d00:	000bb040 	call	1000bb04 <__muldf3>
10003d04:	84000204 	addi	r16,r16,8
10003d08:	b83ff51e 	bne	r23,zero,10003ce0 <_dtoa_r+0x12c8>
10003d0c:	a021883a 	mov	r16,r20
10003d10:	182b883a 	mov	r21,r3
10003d14:	1029883a 	mov	r20,r2
10003d18:	003c5506 	br	10002e70 <_dtoa_r+0x458>
10003d1c:	d9800517 	ldw	r6,20(sp)
10003d20:	d9000717 	ldw	r4,28(sp)
10003d24:	00c00c04 	movi	r3,48
10003d28:	31800044 	addi	r6,r6,1
10003d2c:	d9800515 	stw	r6,20(sp)
10003d30:	20c00005 	stb	r3,0(r4)
10003d34:	02000c44 	movi	r8,49
10003d38:	003da206 	br	100033c4 <_dtoa_r+0x9ac>
10003d3c:	89400117 	ldw	r5,4(r17)
10003d40:	8009883a 	mov	r4,r16
10003d44:	00060540 	call	10006054 <_Balloc>
10003d48:	89800417 	ldw	r6,16(r17)
10003d4c:	11000304 	addi	r4,r2,12
10003d50:	89400304 	addi	r5,r17,12
10003d54:	31800084 	addi	r6,r6,2
10003d58:	318d883a 	add	r6,r6,r6
10003d5c:	318d883a 	add	r6,r6,r6
10003d60:	1027883a 	mov	r19,r2
10003d64:	0005c9c0 	call	10005c9c <memcpy>
10003d68:	8009883a 	mov	r4,r16
10003d6c:	980b883a 	mov	r5,r19
10003d70:	01800044 	movi	r6,1
10003d74:	00068880 	call	10006888 <__lshift>
10003d78:	1029883a 	mov	r20,r2
10003d7c:	003e8606 	br	10003798 <_dtoa_r+0xd80>
10003d80:	00800e44 	movi	r2,57
10003d84:	90809526 	beq	r18,r2,10003fdc <_dtoa_r+0x15c4>
10003d88:	92000044 	addi	r8,r18,1
10003d8c:	003f2306 	br	10003a1c <_dtoa_r+0x1004>
10003d90:	9011883a 	mov	r8,r18
10003d94:	8825883a 	mov	r18,r17
10003d98:	a023883a 	mov	r17,r20
10003d9c:	003e3706 	br	1000367c <_dtoa_r+0xc64>
10003da0:	002b883a 	mov	r21,zero
10003da4:	0023883a 	mov	r17,zero
10003da8:	003f5606 	br	10003b04 <_dtoa_r+0x10ec>
10003dac:	51bfffc4 	addi	r6,r10,-1
10003db0:	300490fa 	slli	r2,r6,3
10003db4:	00c40074 	movhi	r3,4097
10003db8:	18fdab04 	addi	r3,r3,-2388
10003dbc:	1885883a 	add	r2,r3,r2
10003dc0:	d9c00e17 	ldw	r7,56(sp)
10003dc4:	11000017 	ldw	r4,0(r2)
10003dc8:	11400117 	ldw	r5,4(r2)
10003dcc:	d8800717 	ldw	r2,28(sp)
10003dd0:	d9801015 	stw	r6,64(sp)
10003dd4:	880d883a 	mov	r6,r17
10003dd8:	da801615 	stw	r10,88(sp)
10003ddc:	15c00044 	addi	r23,r2,1
10003de0:	000bb040 	call	1000bb04 <__muldf3>
10003de4:	a80b883a 	mov	r5,r21
10003de8:	a009883a 	mov	r4,r20
10003dec:	d8c01115 	stw	r3,68(sp)
10003df0:	d8800e15 	stw	r2,56(sp)
10003df4:	000cc400 	call	1000cc40 <__fixdfsi>
10003df8:	1009883a 	mov	r4,r2
10003dfc:	1023883a 	mov	r17,r2
10003e00:	000ccc80 	call	1000ccc8 <__floatsidf>
10003e04:	a009883a 	mov	r4,r20
10003e08:	a80b883a 	mov	r5,r21
10003e0c:	100d883a 	mov	r6,r2
10003e10:	180f883a 	mov	r7,r3
10003e14:	000c3700 	call	1000c370 <__subdf3>
10003e18:	1813883a 	mov	r9,r3
10003e1c:	d8c00717 	ldw	r3,28(sp)
10003e20:	8c400c04 	addi	r17,r17,48
10003e24:	1011883a 	mov	r8,r2
10003e28:	1c400005 	stb	r17,0(r3)
10003e2c:	da801617 	ldw	r10,88(sp)
10003e30:	00800044 	movi	r2,1
10003e34:	50802326 	beq	r10,r2,10003ec4 <_dtoa_r+0x14ac>
10003e38:	d8800717 	ldw	r2,28(sp)
10003e3c:	b82b883a 	mov	r21,r23
10003e40:	dc001315 	stw	r16,76(sp)
10003e44:	12a9883a 	add	r20,r2,r10
10003e48:	4807883a 	mov	r3,r9
10003e4c:	4005883a 	mov	r2,r8
10003e50:	dc801415 	stw	r18,80(sp)
10003e54:	000d883a 	mov	r6,zero
10003e58:	01d00934 	movhi	r7,16420
10003e5c:	1009883a 	mov	r4,r2
10003e60:	180b883a 	mov	r5,r3
10003e64:	000bb040 	call	1000bb04 <__muldf3>
10003e68:	180b883a 	mov	r5,r3
10003e6c:	1009883a 	mov	r4,r2
10003e70:	1821883a 	mov	r16,r3
10003e74:	1025883a 	mov	r18,r2
10003e78:	000cc400 	call	1000cc40 <__fixdfsi>
10003e7c:	1009883a 	mov	r4,r2
10003e80:	1023883a 	mov	r17,r2
10003e84:	000ccc80 	call	1000ccc8 <__floatsidf>
10003e88:	9009883a 	mov	r4,r18
10003e8c:	800b883a 	mov	r5,r16
10003e90:	100d883a 	mov	r6,r2
10003e94:	180f883a 	mov	r7,r3
10003e98:	8c400c04 	addi	r17,r17,48
10003e9c:	000c3700 	call	1000c370 <__subdf3>
10003ea0:	ad400044 	addi	r21,r21,1
10003ea4:	ac7fffc5 	stb	r17,-1(r21)
10003ea8:	ad3fea1e 	bne	r21,r20,10003e54 <_dtoa_r+0x143c>
10003eac:	1813883a 	mov	r9,r3
10003eb0:	d8c01017 	ldw	r3,64(sp)
10003eb4:	dc001317 	ldw	r16,76(sp)
10003eb8:	dc801417 	ldw	r18,80(sp)
10003ebc:	1011883a 	mov	r8,r2
10003ec0:	b8ef883a 	add	r23,r23,r3
10003ec4:	d9000e17 	ldw	r4,56(sp)
10003ec8:	d9401117 	ldw	r5,68(sp)
10003ecc:	000d883a 	mov	r6,zero
10003ed0:	01cff834 	movhi	r7,16352
10003ed4:	da001715 	stw	r8,92(sp)
10003ed8:	da401515 	stw	r9,84(sp)
10003edc:	000a6a40 	call	1000a6a4 <__adddf3>
10003ee0:	da001717 	ldw	r8,92(sp)
10003ee4:	da401517 	ldw	r9,84(sp)
10003ee8:	1009883a 	mov	r4,r2
10003eec:	400d883a 	mov	r6,r8
10003ef0:	480f883a 	mov	r7,r9
10003ef4:	180b883a 	mov	r5,r3
10003ef8:	000ba240 	call	1000ba24 <__ledf2>
10003efc:	da001717 	ldw	r8,92(sp)
10003f00:	da401517 	ldw	r9,84(sp)
10003f04:	10003b0e 	bge	r2,zero,10003ff4 <_dtoa_r+0x15dc>
10003f08:	d9001217 	ldw	r4,72(sp)
10003f0c:	bd7fffc3 	ldbu	r21,-1(r23)
10003f10:	d9000515 	stw	r4,20(sp)
10003f14:	003d1c06 	br	10003388 <_dtoa_r+0x970>
10003f18:	d8c00817 	ldw	r3,32(sp)
10003f1c:	18a9c83a 	sub	r20,r3,r2
10003f20:	0005883a 	mov	r2,zero
10003f24:	003d3706 	br	10003404 <_dtoa_r+0x9ec>
10003f28:	00800044 	movi	r2,1
10003f2c:	003dd006 	br	10003670 <_dtoa_r+0xc58>
10003f30:	d8c00217 	ldw	r3,8(sp)
10003f34:	00800d84 	movi	r2,54
10003f38:	dd400917 	ldw	r21,36(sp)
10003f3c:	10c5c83a 	sub	r2,r2,r3
10003f40:	dd000817 	ldw	r20,32(sp)
10003f44:	003d2f06 	br	10003404 <_dtoa_r+0x9ec>
10003f48:	9029883a 	mov	r20,r18
10003f4c:	982b883a 	mov	r21,r19
10003f50:	04400084 	movi	r17,2
10003f54:	003bc606 	br	10002e70 <_dtoa_r+0x458>
10003f58:	d8800617 	ldw	r2,24(sp)
10003f5c:	103efc26 	beq	r2,zero,10003b50 <_dtoa_r+0x1138>
10003f60:	d8c00d17 	ldw	r3,52(sp)
10003f64:	00fc890e 	bge	zero,r3,1000318c <_dtoa_r+0x774>
10003f68:	a80b883a 	mov	r5,r21
10003f6c:	a009883a 	mov	r4,r20
10003f70:	000d883a 	mov	r6,zero
10003f74:	01d00934 	movhi	r7,16420
10003f78:	000bb040 	call	1000bb04 <__muldf3>
10003f7c:	89000044 	addi	r4,r17,1
10003f80:	1029883a 	mov	r20,r2
10003f84:	182b883a 	mov	r21,r3
10003f88:	000ccc80 	call	1000ccc8 <__floatsidf>
10003f8c:	a009883a 	mov	r4,r20
10003f90:	a80b883a 	mov	r5,r21
10003f94:	100d883a 	mov	r6,r2
10003f98:	180f883a 	mov	r7,r3
10003f9c:	000bb040 	call	1000bb04 <__muldf3>
10003fa0:	1009883a 	mov	r4,r2
10003fa4:	180b883a 	mov	r5,r3
10003fa8:	000d883a 	mov	r6,zero
10003fac:	01d00734 	movhi	r7,16412
10003fb0:	000a6a40 	call	1000a6a4 <__adddf3>
10003fb4:	d9000517 	ldw	r4,20(sp)
10003fb8:	1023883a 	mov	r17,r2
10003fbc:	00bf3034 	movhi	r2,64704
10003fc0:	213fffc4 	addi	r4,r4,-1
10003fc4:	1885883a 	add	r2,r3,r2
10003fc8:	d9001215 	stw	r4,72(sp)
10003fcc:	d8800e15 	stw	r2,56(sp)
10003fd0:	da800d17 	ldw	r10,52(sp)
10003fd4:	003bc306 	br	10002ee4 <_dtoa_r+0x4cc>
10003fd8:	b039883a 	mov	fp,r22
10003fdc:	01000e44 	movi	r4,57
10003fe0:	8825883a 	mov	r18,r17
10003fe4:	9dc00044 	addi	r23,r19,1
10003fe8:	99000005 	stb	r4,0(r19)
10003fec:	a023883a 	mov	r17,r20
10003ff0:	003dae06 	br	100036ac <_dtoa_r+0xc94>
10003ff4:	d9800e17 	ldw	r6,56(sp)
10003ff8:	d9c01117 	ldw	r7,68(sp)
10003ffc:	0009883a 	mov	r4,zero
10004000:	014ff834 	movhi	r5,16352
10004004:	da001715 	stw	r8,92(sp)
10004008:	da401515 	stw	r9,84(sp)
1000400c:	000c3700 	call	1000c370 <__subdf3>
10004010:	da001717 	ldw	r8,92(sp)
10004014:	da401517 	ldw	r9,84(sp)
10004018:	1009883a 	mov	r4,r2
1000401c:	180b883a 	mov	r5,r3
10004020:	400d883a 	mov	r6,r8
10004024:	480f883a 	mov	r7,r9
10004028:	000b9440 	call	1000b944 <__gedf2>
1000402c:	00bc570e 	bge	zero,r2,1000318c <_dtoa_r+0x774>
10004030:	01000c04 	movi	r4,48
10004034:	00000106 	br	1000403c <_dtoa_r+0x1624>
10004038:	102f883a 	mov	r23,r2
1000403c:	b8bfffc4 	addi	r2,r23,-1
10004040:	10c00007 	ldb	r3,0(r2)
10004044:	193ffc26 	beq	r3,r4,10004038 <_dtoa_r+0x1620>
10004048:	d9801217 	ldw	r6,72(sp)
1000404c:	d9800515 	stw	r6,20(sp)
10004050:	003c1f06 	br	100030d0 <_dtoa_r+0x6b8>
10004054:	d8801217 	ldw	r2,72(sp)
10004058:	dc001117 	ldw	r16,68(sp)
1000405c:	d8800515 	stw	r2,20(sp)
10004060:	003cc906 	br	10003388 <_dtoa_r+0x970>
10004064:	dd801317 	ldw	r22,76(sp)
10004068:	dc001117 	ldw	r16,68(sp)
1000406c:	dcc01417 	ldw	r19,80(sp)
10004070:	dc801017 	ldw	r18,64(sp)
10004074:	003c4506 	br	1000318c <_dtoa_r+0x774>
10004078:	103e5d1e 	bne	r2,zero,100039f0 <_dtoa_r+0xfd8>
1000407c:	4080004c 	andi	r2,r8,1
10004080:	103e5b26 	beq	r2,zero,100039f0 <_dtoa_r+0xfd8>
10004084:	003e5706 	br	100039e4 <_dtoa_r+0xfcc>
10004088:	d8c00317 	ldw	r3,12(sp)
1000408c:	00800084 	movi	r2,2
10004090:	10c00a16 	blt	r2,r3,100040bc <_dtoa_r+0x16a4>
10004094:	d9000d17 	ldw	r4,52(sp)
10004098:	003e8306 	br	10003aa8 <_dtoa_r+0x1090>
1000409c:	04400084 	movi	r17,2
100040a0:	003b7306 	br	10002e70 <_dtoa_r+0x458>
100040a4:	d9801217 	ldw	r6,72(sp)
100040a8:	d9800515 	stw	r6,20(sp)
100040ac:	003cb606 	br	10003388 <_dtoa_r+0x970>
100040b0:	d9001217 	ldw	r4,72(sp)
100040b4:	d9000515 	stw	r4,20(sp)
100040b8:	003c0506 	br	100030d0 <_dtoa_r+0x6b8>
100040bc:	d9800d17 	ldw	r6,52(sp)
100040c0:	d9800615 	stw	r6,24(sp)
100040c4:	003e8306 	br	10003ad4 <_dtoa_r+0x10bc>
100040c8:	d9800317 	ldw	r6,12(sp)
100040cc:	00800084 	movi	r2,2
100040d0:	11800216 	blt	r2,r6,100040dc <_dtoa_r+0x16c4>
100040d4:	d8800d17 	ldw	r2,52(sp)
100040d8:	003da606 	br	10003774 <_dtoa_r+0xd5c>
100040dc:	d8800d17 	ldw	r2,52(sp)
100040e0:	d8800615 	stw	r2,24(sp)
100040e4:	003e7b06 	br	10003ad4 <_dtoa_r+0x10bc>
100040e8:	05000044 	movi	r20,1
100040ec:	003b0506 	br	10002d04 <_dtoa_r+0x2ec>
100040f0:	8009883a 	mov	r4,r16
100040f4:	80001115 	stw	zero,68(r16)
100040f8:	000b883a 	mov	r5,zero
100040fc:	00060540 	call	10006054 <_Balloc>
10004100:	d8800715 	stw	r2,28(sp)
10004104:	d8c00717 	ldw	r3,28(sp)
10004108:	00bfffc4 	movi	r2,-1
1000410c:	01000044 	movi	r4,1
10004110:	d8800615 	stw	r2,24(sp)
10004114:	80c01015 	stw	r3,64(r16)
10004118:	d9000b15 	stw	r4,44(sp)
1000411c:	d8002215 	stw	zero,136(sp)
10004120:	d8800d15 	stw	r2,52(sp)
10004124:	003c1906 	br	1000318c <_dtoa_r+0x774>
10004128:	193d2926 	beq	r3,r4,100035d0 <_dtoa_r+0xbb8>
1000412c:	00c00f04 	movi	r3,60
10004130:	1885c83a 	sub	r2,r3,r2
10004134:	003d7b06 	br	10003724 <_dtoa_r+0xd0c>
10004138:	000b883a 	mov	r5,zero
1000413c:	003b1006 	br	10002d80 <_dtoa_r+0x368>

10004140 <_fflush_r>:
10004140:	defffb04 	addi	sp,sp,-20
10004144:	dcc00315 	stw	r19,12(sp)
10004148:	dc000015 	stw	r16,0(sp)
1000414c:	dfc00415 	stw	ra,16(sp)
10004150:	dc800215 	stw	r18,8(sp)
10004154:	dc400115 	stw	r17,4(sp)
10004158:	2027883a 	mov	r19,r4
1000415c:	2821883a 	mov	r16,r5
10004160:	20000226 	beq	r4,zero,1000416c <_fflush_r+0x2c>
10004164:	20800e17 	ldw	r2,56(r4)
10004168:	10005326 	beq	r2,zero,100042b8 <_fflush_r+0x178>
1000416c:	8080030b 	ldhu	r2,12(r16)
10004170:	10ffffcc 	andi	r3,r2,65535
10004174:	18e0001c 	xori	r3,r3,32768
10004178:	18e00004 	addi	r3,r3,-32768
1000417c:	18002c26 	beq	r3,zero,10004230 <_fflush_r+0xf0>
10004180:	10c0020c 	andi	r3,r2,8
10004184:	1800321e 	bne	r3,zero,10004250 <_fflush_r+0x110>
10004188:	80c00117 	ldw	r3,4(r16)
1000418c:	10820014 	ori	r2,r2,2048
10004190:	8080030d 	sth	r2,12(r16)
10004194:	00c0570e 	bge	zero,r3,100042f4 <_fflush_r+0x1b4>
10004198:	82000a17 	ldw	r8,40(r16)
1000419c:	40002426 	beq	r8,zero,10004230 <_fflush_r+0xf0>
100041a0:	9c400017 	ldw	r17,0(r19)
100041a4:	10c4000c 	andi	r3,r2,4096
100041a8:	98000015 	stw	zero,0(r19)
100041ac:	18004626 	beq	r3,zero,100042c8 <_fflush_r+0x188>
100041b0:	81801417 	ldw	r6,80(r16)
100041b4:	10c0010c 	andi	r3,r2,4
100041b8:	18000626 	beq	r3,zero,100041d4 <_fflush_r+0x94>
100041bc:	80c00117 	ldw	r3,4(r16)
100041c0:	80800c17 	ldw	r2,48(r16)
100041c4:	30cdc83a 	sub	r6,r6,r3
100041c8:	10000226 	beq	r2,zero,100041d4 <_fflush_r+0x94>
100041cc:	80800f17 	ldw	r2,60(r16)
100041d0:	308dc83a 	sub	r6,r6,r2
100041d4:	81400717 	ldw	r5,28(r16)
100041d8:	9809883a 	mov	r4,r19
100041dc:	000f883a 	mov	r7,zero
100041e0:	403ee83a 	callr	r8
100041e4:	00ffffc4 	movi	r3,-1
100041e8:	10c04526 	beq	r2,r3,10004300 <_fflush_r+0x1c0>
100041ec:	80c0030b 	ldhu	r3,12(r16)
100041f0:	81000417 	ldw	r4,16(r16)
100041f4:	80000115 	stw	zero,4(r16)
100041f8:	197dffcc 	andi	r5,r3,63487
100041fc:	8140030d 	sth	r5,12(r16)
10004200:	81000015 	stw	r4,0(r16)
10004204:	18c4000c 	andi	r3,r3,4096
10004208:	18000126 	beq	r3,zero,10004210 <_fflush_r+0xd0>
1000420c:	80801415 	stw	r2,80(r16)
10004210:	81400c17 	ldw	r5,48(r16)
10004214:	9c400015 	stw	r17,0(r19)
10004218:	28000526 	beq	r5,zero,10004230 <_fflush_r+0xf0>
1000421c:	80801004 	addi	r2,r16,64
10004220:	28800226 	beq	r5,r2,1000422c <_fflush_r+0xec>
10004224:	9809883a 	mov	r4,r19
10004228:	00048700 	call	10004870 <_free_r>
1000422c:	80000c15 	stw	zero,48(r16)
10004230:	0005883a 	mov	r2,zero
10004234:	dfc00417 	ldw	ra,16(sp)
10004238:	dcc00317 	ldw	r19,12(sp)
1000423c:	dc800217 	ldw	r18,8(sp)
10004240:	dc400117 	ldw	r17,4(sp)
10004244:	dc000017 	ldw	r16,0(sp)
10004248:	dec00504 	addi	sp,sp,20
1000424c:	f800283a 	ret
10004250:	84800417 	ldw	r18,16(r16)
10004254:	903ff626 	beq	r18,zero,10004230 <_fflush_r+0xf0>
10004258:	84400017 	ldw	r17,0(r16)
1000425c:	108000cc 	andi	r2,r2,3
10004260:	84800015 	stw	r18,0(r16)
10004264:	8ca3c83a 	sub	r17,r17,r18
10004268:	10001526 	beq	r2,zero,100042c0 <_fflush_r+0x180>
1000426c:	0005883a 	mov	r2,zero
10004270:	80800215 	stw	r2,8(r16)
10004274:	04400316 	blt	zero,r17,10004284 <_fflush_r+0x144>
10004278:	003fed06 	br	10004230 <_fflush_r+0xf0>
1000427c:	90a5883a 	add	r18,r18,r2
10004280:	047feb0e 	bge	zero,r17,10004230 <_fflush_r+0xf0>
10004284:	80800917 	ldw	r2,36(r16)
10004288:	81400717 	ldw	r5,28(r16)
1000428c:	880f883a 	mov	r7,r17
10004290:	900d883a 	mov	r6,r18
10004294:	9809883a 	mov	r4,r19
10004298:	103ee83a 	callr	r2
1000429c:	88a3c83a 	sub	r17,r17,r2
100042a0:	00bff616 	blt	zero,r2,1000427c <_fflush_r+0x13c>
100042a4:	80c0030b 	ldhu	r3,12(r16)
100042a8:	00bfffc4 	movi	r2,-1
100042ac:	18c01014 	ori	r3,r3,64
100042b0:	80c0030d 	sth	r3,12(r16)
100042b4:	003fdf06 	br	10004234 <_fflush_r+0xf4>
100042b8:	00046fc0 	call	100046fc <__sinit>
100042bc:	003fab06 	br	1000416c <_fflush_r+0x2c>
100042c0:	80800517 	ldw	r2,20(r16)
100042c4:	003fea06 	br	10004270 <_fflush_r+0x130>
100042c8:	81400717 	ldw	r5,28(r16)
100042cc:	000d883a 	mov	r6,zero
100042d0:	9809883a 	mov	r4,r19
100042d4:	01c00044 	movi	r7,1
100042d8:	403ee83a 	callr	r8
100042dc:	100d883a 	mov	r6,r2
100042e0:	00bfffc4 	movi	r2,-1
100042e4:	30801326 	beq	r6,r2,10004334 <_fflush_r+0x1f4>
100042e8:	8080030b 	ldhu	r2,12(r16)
100042ec:	82000a17 	ldw	r8,40(r16)
100042f0:	003fb006 	br	100041b4 <_fflush_r+0x74>
100042f4:	80c00f17 	ldw	r3,60(r16)
100042f8:	00ffa716 	blt	zero,r3,10004198 <_fflush_r+0x58>
100042fc:	003fcc06 	br	10004230 <_fflush_r+0xf0>
10004300:	98c00017 	ldw	r3,0(r19)
10004304:	183fb926 	beq	r3,zero,100041ec <_fflush_r+0xac>
10004308:	01000744 	movi	r4,29
1000430c:	19000226 	beq	r3,r4,10004318 <_fflush_r+0x1d8>
10004310:	01000584 	movi	r4,22
10004314:	1900101e 	bne	r3,r4,10004358 <_fflush_r+0x218>
10004318:	8080030b 	ldhu	r2,12(r16)
1000431c:	80c00417 	ldw	r3,16(r16)
10004320:	80000115 	stw	zero,4(r16)
10004324:	10bdffcc 	andi	r2,r2,63487
10004328:	8080030d 	sth	r2,12(r16)
1000432c:	80c00015 	stw	r3,0(r16)
10004330:	003fb706 	br	10004210 <_fflush_r+0xd0>
10004334:	98800017 	ldw	r2,0(r19)
10004338:	103feb26 	beq	r2,zero,100042e8 <_fflush_r+0x1a8>
1000433c:	00c00744 	movi	r3,29
10004340:	10c00226 	beq	r2,r3,1000434c <_fflush_r+0x20c>
10004344:	00c00584 	movi	r3,22
10004348:	10ffd61e 	bne	r2,r3,100042a4 <_fflush_r+0x164>
1000434c:	9c400015 	stw	r17,0(r19)
10004350:	0005883a 	mov	r2,zero
10004354:	003fb706 	br	10004234 <_fflush_r+0xf4>
10004358:	80c0030b 	ldhu	r3,12(r16)
1000435c:	18c01014 	ori	r3,r3,64
10004360:	80c0030d 	sth	r3,12(r16)
10004364:	003fb306 	br	10004234 <_fflush_r+0xf4>

10004368 <fflush>:
10004368:	20000526 	beq	r4,zero,10004380 <fflush+0x18>
1000436c:	00840074 	movhi	r2,4097
10004370:	1084e004 	addi	r2,r2,4992
10004374:	200b883a 	mov	r5,r4
10004378:	11000017 	ldw	r4,0(r2)
1000437c:	00041401 	jmpi	10004140 <_fflush_r>
10004380:	00840074 	movhi	r2,4097
10004384:	1084df04 	addi	r2,r2,4988
10004388:	11000017 	ldw	r4,0(r2)
1000438c:	01440034 	movhi	r5,4096
10004390:	29505004 	addi	r5,r5,16704
10004394:	00050bc1 	jmpi	100050bc <_fwalk_reent>

10004398 <__fp_lock>:
10004398:	0005883a 	mov	r2,zero
1000439c:	f800283a 	ret

100043a0 <__fp_unlock>:
100043a0:	0005883a 	mov	r2,zero
100043a4:	f800283a 	ret

100043a8 <_cleanup_r>:
100043a8:	01440074 	movhi	r5,4097
100043ac:	2964e804 	addi	r5,r5,-27744
100043b0:	00050041 	jmpi	10005004 <_fwalk>

100043b4 <__sinit.part.1>:
100043b4:	defff604 	addi	sp,sp,-40
100043b8:	00c40034 	movhi	r3,4096
100043bc:	dfc00915 	stw	ra,36(sp)
100043c0:	df000815 	stw	fp,32(sp)
100043c4:	ddc00715 	stw	r23,28(sp)
100043c8:	dd800615 	stw	r22,24(sp)
100043cc:	dd400515 	stw	r21,20(sp)
100043d0:	dd000415 	stw	r20,16(sp)
100043d4:	dcc00315 	stw	r19,12(sp)
100043d8:	dc800215 	stw	r18,8(sp)
100043dc:	dc400115 	stw	r17,4(sp)
100043e0:	dc000015 	stw	r16,0(sp)
100043e4:	18d0ea04 	addi	r3,r3,17320
100043e8:	24000117 	ldw	r16,4(r4)
100043ec:	20c00f15 	stw	r3,60(r4)
100043f0:	07000044 	movi	fp,1
100043f4:	00c000c4 	movi	r3,3
100043f8:	2080bb04 	addi	r2,r4,748
100043fc:	20c0b915 	stw	r3,740(r4)
10004400:	27000e15 	stw	fp,56(r4)
10004404:	2080ba15 	stw	r2,744(r4)
10004408:	2000b815 	stw	zero,736(r4)
1000440c:	05c00204 	movi	r23,8
10004410:	00800104 	movi	r2,4
10004414:	2025883a 	mov	r18,r4
10004418:	b80d883a 	mov	r6,r23
1000441c:	81001704 	addi	r4,r16,92
10004420:	000b883a 	mov	r5,zero
10004424:	80000015 	stw	zero,0(r16)
10004428:	80000115 	stw	zero,4(r16)
1000442c:	80000215 	stw	zero,8(r16)
10004430:	8080030d 	sth	r2,12(r16)
10004434:	80001915 	stw	zero,100(r16)
10004438:	8000038d 	sth	zero,14(r16)
1000443c:	80000415 	stw	zero,16(r16)
10004440:	80000515 	stw	zero,20(r16)
10004444:	80000615 	stw	zero,24(r16)
10004448:	0005f300 	call	10005f30 <memset>
1000444c:	05840034 	movhi	r22,4096
10004450:	94400217 	ldw	r17,8(r18)
10004454:	05440034 	movhi	r21,4096
10004458:	05040034 	movhi	r20,4096
1000445c:	04c40034 	movhi	r19,4096
10004460:	b59e1b04 	addi	r22,r22,30828
10004464:	ad5e3204 	addi	r21,r21,30920
10004468:	a51e5104 	addi	r20,r20,31044
1000446c:	9cde6804 	addi	r19,r19,31136
10004470:	85800815 	stw	r22,32(r16)
10004474:	85400915 	stw	r21,36(r16)
10004478:	85000a15 	stw	r20,40(r16)
1000447c:	84c00b15 	stw	r19,44(r16)
10004480:	84000715 	stw	r16,28(r16)
10004484:	00800284 	movi	r2,10
10004488:	89001704 	addi	r4,r17,92
1000448c:	b80d883a 	mov	r6,r23
10004490:	000b883a 	mov	r5,zero
10004494:	88000015 	stw	zero,0(r17)
10004498:	88000115 	stw	zero,4(r17)
1000449c:	88000215 	stw	zero,8(r17)
100044a0:	8880030d 	sth	r2,12(r17)
100044a4:	88001915 	stw	zero,100(r17)
100044a8:	8f00038d 	sth	fp,14(r17)
100044ac:	88000415 	stw	zero,16(r17)
100044b0:	88000515 	stw	zero,20(r17)
100044b4:	88000615 	stw	zero,24(r17)
100044b8:	0005f300 	call	10005f30 <memset>
100044bc:	94000317 	ldw	r16,12(r18)
100044c0:	00800484 	movi	r2,18
100044c4:	8c400715 	stw	r17,28(r17)
100044c8:	8d800815 	stw	r22,32(r17)
100044cc:	8d400915 	stw	r21,36(r17)
100044d0:	8d000a15 	stw	r20,40(r17)
100044d4:	8cc00b15 	stw	r19,44(r17)
100044d8:	8080030d 	sth	r2,12(r16)
100044dc:	00800084 	movi	r2,2
100044e0:	80000015 	stw	zero,0(r16)
100044e4:	80000115 	stw	zero,4(r16)
100044e8:	80000215 	stw	zero,8(r16)
100044ec:	80001915 	stw	zero,100(r16)
100044f0:	8080038d 	sth	r2,14(r16)
100044f4:	80000415 	stw	zero,16(r16)
100044f8:	80000515 	stw	zero,20(r16)
100044fc:	80000615 	stw	zero,24(r16)
10004500:	81001704 	addi	r4,r16,92
10004504:	000b883a 	mov	r5,zero
10004508:	b80d883a 	mov	r6,r23
1000450c:	0005f300 	call	10005f30 <memset>
10004510:	84000715 	stw	r16,28(r16)
10004514:	85800815 	stw	r22,32(r16)
10004518:	85400915 	stw	r21,36(r16)
1000451c:	85000a15 	stw	r20,40(r16)
10004520:	84c00b15 	stw	r19,44(r16)
10004524:	dfc00917 	ldw	ra,36(sp)
10004528:	df000817 	ldw	fp,32(sp)
1000452c:	ddc00717 	ldw	r23,28(sp)
10004530:	dd800617 	ldw	r22,24(sp)
10004534:	dd400517 	ldw	r21,20(sp)
10004538:	dd000417 	ldw	r20,16(sp)
1000453c:	dcc00317 	ldw	r19,12(sp)
10004540:	dc800217 	ldw	r18,8(sp)
10004544:	dc400117 	ldw	r17,4(sp)
10004548:	dc000017 	ldw	r16,0(sp)
1000454c:	dec00a04 	addi	sp,sp,40
10004550:	f800283a 	ret

10004554 <__sfmoreglue>:
10004554:	defffc04 	addi	sp,sp,-16
10004558:	dc800215 	stw	r18,8(sp)
1000455c:	2825883a 	mov	r18,r5
10004560:	dc000015 	stw	r16,0(sp)
10004564:	01401a04 	movi	r5,104
10004568:	2021883a 	mov	r16,r4
1000456c:	9009883a 	mov	r4,r18
10004570:	dfc00315 	stw	ra,12(sp)
10004574:	dc400115 	stw	r17,4(sp)
10004578:	000a67c0 	call	1000a67c <__mulsi3>
1000457c:	8009883a 	mov	r4,r16
10004580:	11400304 	addi	r5,r2,12
10004584:	1023883a 	mov	r17,r2
10004588:	000540c0 	call	1000540c <_malloc_r>
1000458c:	1021883a 	mov	r16,r2
10004590:	10000726 	beq	r2,zero,100045b0 <__sfmoreglue+0x5c>
10004594:	11000304 	addi	r4,r2,12
10004598:	10000015 	stw	zero,0(r2)
1000459c:	14800115 	stw	r18,4(r2)
100045a0:	11000215 	stw	r4,8(r2)
100045a4:	000b883a 	mov	r5,zero
100045a8:	880d883a 	mov	r6,r17
100045ac:	0005f300 	call	10005f30 <memset>
100045b0:	8005883a 	mov	r2,r16
100045b4:	dfc00317 	ldw	ra,12(sp)
100045b8:	dc800217 	ldw	r18,8(sp)
100045bc:	dc400117 	ldw	r17,4(sp)
100045c0:	dc000017 	ldw	r16,0(sp)
100045c4:	dec00404 	addi	sp,sp,16
100045c8:	f800283a 	ret

100045cc <__sfp>:
100045cc:	00840074 	movhi	r2,4097
100045d0:	defffb04 	addi	sp,sp,-20
100045d4:	1084df04 	addi	r2,r2,4988
100045d8:	dc800215 	stw	r18,8(sp)
100045dc:	14800017 	ldw	r18,0(r2)
100045e0:	dcc00315 	stw	r19,12(sp)
100045e4:	dfc00415 	stw	ra,16(sp)
100045e8:	90800e17 	ldw	r2,56(r18)
100045ec:	dc400115 	stw	r17,4(sp)
100045f0:	dc000015 	stw	r16,0(sp)
100045f4:	2027883a 	mov	r19,r4
100045f8:	1000021e 	bne	r2,zero,10004604 <__sfp+0x38>
100045fc:	9009883a 	mov	r4,r18
10004600:	00043b40 	call	100043b4 <__sinit.part.1>
10004604:	9480b804 	addi	r18,r18,736
10004608:	047fffc4 	movi	r17,-1
1000460c:	91400117 	ldw	r5,4(r18)
10004610:	94000217 	ldw	r16,8(r18)
10004614:	297fffc4 	addi	r5,r5,-1
10004618:	28000a16 	blt	r5,zero,10004644 <__sfp+0x78>
1000461c:	8080030f 	ldh	r2,12(r16)
10004620:	10000c26 	beq	r2,zero,10004654 <__sfp+0x88>
10004624:	80c01d04 	addi	r3,r16,116
10004628:	00000206 	br	10004634 <__sfp+0x68>
1000462c:	18bfe60f 	ldh	r2,-104(r3)
10004630:	10000826 	beq	r2,zero,10004654 <__sfp+0x88>
10004634:	297fffc4 	addi	r5,r5,-1
10004638:	1c3ffd04 	addi	r16,r3,-12
1000463c:	18c01a04 	addi	r3,r3,104
10004640:	2c7ffa1e 	bne	r5,r17,1000462c <__sfp+0x60>
10004644:	90800017 	ldw	r2,0(r18)
10004648:	10001d26 	beq	r2,zero,100046c0 <__sfp+0xf4>
1000464c:	1025883a 	mov	r18,r2
10004650:	003fee06 	br	1000460c <__sfp+0x40>
10004654:	00bfffc4 	movi	r2,-1
10004658:	8080038d 	sth	r2,14(r16)
1000465c:	00800044 	movi	r2,1
10004660:	8080030d 	sth	r2,12(r16)
10004664:	80001915 	stw	zero,100(r16)
10004668:	80000015 	stw	zero,0(r16)
1000466c:	80000215 	stw	zero,8(r16)
10004670:	80000115 	stw	zero,4(r16)
10004674:	80000415 	stw	zero,16(r16)
10004678:	80000515 	stw	zero,20(r16)
1000467c:	80000615 	stw	zero,24(r16)
10004680:	81001704 	addi	r4,r16,92
10004684:	000b883a 	mov	r5,zero
10004688:	01800204 	movi	r6,8
1000468c:	0005f300 	call	10005f30 <memset>
10004690:	8005883a 	mov	r2,r16
10004694:	80000c15 	stw	zero,48(r16)
10004698:	80000d15 	stw	zero,52(r16)
1000469c:	80001115 	stw	zero,68(r16)
100046a0:	80001215 	stw	zero,72(r16)
100046a4:	dfc00417 	ldw	ra,16(sp)
100046a8:	dcc00317 	ldw	r19,12(sp)
100046ac:	dc800217 	ldw	r18,8(sp)
100046b0:	dc400117 	ldw	r17,4(sp)
100046b4:	dc000017 	ldw	r16,0(sp)
100046b8:	dec00504 	addi	sp,sp,20
100046bc:	f800283a 	ret
100046c0:	9809883a 	mov	r4,r19
100046c4:	01400104 	movi	r5,4
100046c8:	00045540 	call	10004554 <__sfmoreglue>
100046cc:	90800015 	stw	r2,0(r18)
100046d0:	103fde1e 	bne	r2,zero,1000464c <__sfp+0x80>
100046d4:	00800304 	movi	r2,12
100046d8:	98800015 	stw	r2,0(r19)
100046dc:	0005883a 	mov	r2,zero
100046e0:	003ff006 	br	100046a4 <__sfp+0xd8>

100046e4 <_cleanup>:
100046e4:	00840074 	movhi	r2,4097
100046e8:	1084df04 	addi	r2,r2,4988
100046ec:	11000017 	ldw	r4,0(r2)
100046f0:	01440074 	movhi	r5,4097
100046f4:	2964e804 	addi	r5,r5,-27744
100046f8:	00050041 	jmpi	10005004 <_fwalk>

100046fc <__sinit>:
100046fc:	20800e17 	ldw	r2,56(r4)
10004700:	10000126 	beq	r2,zero,10004708 <__sinit+0xc>
10004704:	f800283a 	ret
10004708:	00043b41 	jmpi	100043b4 <__sinit.part.1>

1000470c <__sfp_lock_acquire>:
1000470c:	f800283a 	ret

10004710 <__sfp_lock_release>:
10004710:	f800283a 	ret

10004714 <__sinit_lock_acquire>:
10004714:	f800283a 	ret

10004718 <__sinit_lock_release>:
10004718:	f800283a 	ret

1000471c <__fp_lock_all>:
1000471c:	00840074 	movhi	r2,4097
10004720:	1084e004 	addi	r2,r2,4992
10004724:	11000017 	ldw	r4,0(r2)
10004728:	01440034 	movhi	r5,4096
1000472c:	2950e604 	addi	r5,r5,17304
10004730:	00050041 	jmpi	10005004 <_fwalk>

10004734 <__fp_unlock_all>:
10004734:	00840074 	movhi	r2,4097
10004738:	1084e004 	addi	r2,r2,4992
1000473c:	11000017 	ldw	r4,0(r2)
10004740:	01440034 	movhi	r5,4096
10004744:	2950e804 	addi	r5,r5,17312
10004748:	00050041 	jmpi	10005004 <_fwalk>

1000474c <_malloc_trim_r>:
1000474c:	defffb04 	addi	sp,sp,-20
10004750:	dcc00315 	stw	r19,12(sp)
10004754:	04c40074 	movhi	r19,4097
10004758:	dc800215 	stw	r18,8(sp)
1000475c:	dc400115 	stw	r17,4(sp)
10004760:	dc000015 	stw	r16,0(sp)
10004764:	dfc00415 	stw	ra,16(sp)
10004768:	2821883a 	mov	r16,r5
1000476c:	9cff5904 	addi	r19,r19,-668
10004770:	2025883a 	mov	r18,r4
10004774:	000d4800 	call	1000d480 <__malloc_lock>
10004778:	98800217 	ldw	r2,8(r19)
1000477c:	14400117 	ldw	r17,4(r2)
10004780:	00bfff04 	movi	r2,-4
10004784:	88a2703a 	and	r17,r17,r2
10004788:	8c21c83a 	sub	r16,r17,r16
1000478c:	8403fbc4 	addi	r16,r16,4079
10004790:	8020d33a 	srli	r16,r16,12
10004794:	0083ffc4 	movi	r2,4095
10004798:	843fffc4 	addi	r16,r16,-1
1000479c:	8020933a 	slli	r16,r16,12
100047a0:	1400060e 	bge	r2,r16,100047bc <_malloc_trim_r+0x70>
100047a4:	9009883a 	mov	r4,r18
100047a8:	000b883a 	mov	r5,zero
100047ac:	00078180 	call	10007818 <_sbrk_r>
100047b0:	98c00217 	ldw	r3,8(r19)
100047b4:	1c47883a 	add	r3,r3,r17
100047b8:	10c00a26 	beq	r2,r3,100047e4 <_malloc_trim_r+0x98>
100047bc:	9009883a 	mov	r4,r18
100047c0:	000d4a00 	call	1000d4a0 <__malloc_unlock>
100047c4:	0005883a 	mov	r2,zero
100047c8:	dfc00417 	ldw	ra,16(sp)
100047cc:	dcc00317 	ldw	r19,12(sp)
100047d0:	dc800217 	ldw	r18,8(sp)
100047d4:	dc400117 	ldw	r17,4(sp)
100047d8:	dc000017 	ldw	r16,0(sp)
100047dc:	dec00504 	addi	sp,sp,20
100047e0:	f800283a 	ret
100047e4:	9009883a 	mov	r4,r18
100047e8:	040bc83a 	sub	r5,zero,r16
100047ec:	00078180 	call	10007818 <_sbrk_r>
100047f0:	00ffffc4 	movi	r3,-1
100047f4:	10c00d26 	beq	r2,r3,1000482c <_malloc_trim_r+0xe0>
100047f8:	00c40074 	movhi	r3,4097
100047fc:	18cbb904 	addi	r3,r3,12004
10004800:	18800017 	ldw	r2,0(r3)
10004804:	99000217 	ldw	r4,8(r19)
10004808:	8c23c83a 	sub	r17,r17,r16
1000480c:	8c400054 	ori	r17,r17,1
10004810:	1421c83a 	sub	r16,r2,r16
10004814:	24400115 	stw	r17,4(r4)
10004818:	9009883a 	mov	r4,r18
1000481c:	1c000015 	stw	r16,0(r3)
10004820:	000d4a00 	call	1000d4a0 <__malloc_unlock>
10004824:	00800044 	movi	r2,1
10004828:	003fe706 	br	100047c8 <_malloc_trim_r+0x7c>
1000482c:	9009883a 	mov	r4,r18
10004830:	000b883a 	mov	r5,zero
10004834:	00078180 	call	10007818 <_sbrk_r>
10004838:	99000217 	ldw	r4,8(r19)
1000483c:	014003c4 	movi	r5,15
10004840:	1107c83a 	sub	r3,r2,r4
10004844:	28ffdd0e 	bge	r5,r3,100047bc <_malloc_trim_r+0x70>
10004848:	01440074 	movhi	r5,4097
1000484c:	2944e204 	addi	r5,r5,5000
10004850:	29400017 	ldw	r5,0(r5)
10004854:	18c00054 	ori	r3,r3,1
10004858:	20c00115 	stw	r3,4(r4)
1000485c:	00c40074 	movhi	r3,4097
10004860:	1145c83a 	sub	r2,r2,r5
10004864:	18cbb904 	addi	r3,r3,12004
10004868:	18800015 	stw	r2,0(r3)
1000486c:	003fd306 	br	100047bc <_malloc_trim_r+0x70>

10004870 <_free_r>:
10004870:	28004c26 	beq	r5,zero,100049a4 <_free_r+0x134>
10004874:	defffd04 	addi	sp,sp,-12
10004878:	dc400115 	stw	r17,4(sp)
1000487c:	dc000015 	stw	r16,0(sp)
10004880:	2023883a 	mov	r17,r4
10004884:	2821883a 	mov	r16,r5
10004888:	dfc00215 	stw	ra,8(sp)
1000488c:	000d4800 	call	1000d480 <__malloc_lock>
10004890:	813fff17 	ldw	r4,-4(r16)
10004894:	00bfff84 	movi	r2,-2
10004898:	02440074 	movhi	r9,4097
1000489c:	81bffe04 	addi	r6,r16,-8
100048a0:	2084703a 	and	r2,r4,r2
100048a4:	4a7f5904 	addi	r9,r9,-668
100048a8:	308b883a 	add	r5,r6,r2
100048ac:	2a000117 	ldw	r8,4(r5)
100048b0:	49c00217 	ldw	r7,8(r9)
100048b4:	00ffff04 	movi	r3,-4
100048b8:	40c6703a 	and	r3,r8,r3
100048bc:	39405326 	beq	r7,r5,10004a0c <_free_r+0x19c>
100048c0:	28c00115 	stw	r3,4(r5)
100048c4:	2100004c 	andi	r4,r4,1
100048c8:	2000091e 	bne	r4,zero,100048f0 <_free_r+0x80>
100048cc:	81fffe17 	ldw	r7,-8(r16)
100048d0:	4a000204 	addi	r8,r9,8
100048d4:	31cdc83a 	sub	r6,r6,r7
100048d8:	31000217 	ldw	r4,8(r6)
100048dc:	11c5883a 	add	r2,r2,r7
100048e0:	22006126 	beq	r4,r8,10004a68 <_free_r+0x1f8>
100048e4:	31c00317 	ldw	r7,12(r6)
100048e8:	21c00315 	stw	r7,12(r4)
100048ec:	39000215 	stw	r4,8(r7)
100048f0:	28c9883a 	add	r4,r5,r3
100048f4:	21c00117 	ldw	r7,4(r4)
100048f8:	39c0004c 	andi	r7,r7,1
100048fc:	38000d1e 	bne	r7,zero,10004934 <_free_r+0xc4>
10004900:	29000217 	ldw	r4,8(r5)
10004904:	10c5883a 	add	r2,r2,r3
10004908:	00c40074 	movhi	r3,4097
1000490c:	18ff5b04 	addi	r3,r3,-660
10004910:	20c07526 	beq	r4,r3,10004ae8 <_free_r+0x278>
10004914:	29c00317 	ldw	r7,12(r5)
10004918:	11400054 	ori	r5,r2,1
1000491c:	3087883a 	add	r3,r6,r2
10004920:	21c00315 	stw	r7,12(r4)
10004924:	39000215 	stw	r4,8(r7)
10004928:	31400115 	stw	r5,4(r6)
1000492c:	18800015 	stw	r2,0(r3)
10004930:	00000406 	br	10004944 <_free_r+0xd4>
10004934:	10c00054 	ori	r3,r2,1
10004938:	30c00115 	stw	r3,4(r6)
1000493c:	3087883a 	add	r3,r6,r2
10004940:	18800015 	stw	r2,0(r3)
10004944:	00c07fc4 	movi	r3,511
10004948:	18801736 	bltu	r3,r2,100049a8 <_free_r+0x138>
1000494c:	1004d0fa 	srli	r2,r2,3
10004950:	01400044 	movi	r5,1
10004954:	49000117 	ldw	r4,4(r9)
10004958:	1087883a 	add	r3,r2,r2
1000495c:	18c7883a 	add	r3,r3,r3
10004960:	1005d0ba 	srai	r2,r2,2
10004964:	18c7883a 	add	r3,r3,r3
10004968:	1a47883a 	add	r3,r3,r9
1000496c:	19c00217 	ldw	r7,8(r3)
10004970:	2884983a 	sll	r2,r5,r2
10004974:	30c00315 	stw	r3,12(r6)
10004978:	31c00215 	stw	r7,8(r6)
1000497c:	1104b03a 	or	r2,r2,r4
10004980:	19800215 	stw	r6,8(r3)
10004984:	48800115 	stw	r2,4(r9)
10004988:	39800315 	stw	r6,12(r7)
1000498c:	8809883a 	mov	r4,r17
10004990:	dfc00217 	ldw	ra,8(sp)
10004994:	dc400117 	ldw	r17,4(sp)
10004998:	dc000017 	ldw	r16,0(sp)
1000499c:	dec00304 	addi	sp,sp,12
100049a0:	000d4a01 	jmpi	1000d4a0 <__malloc_unlock>
100049a4:	f800283a 	ret
100049a8:	1006d27a 	srli	r3,r2,9
100049ac:	01000104 	movi	r4,4
100049b0:	20c04036 	bltu	r4,r3,10004ab4 <_free_r+0x244>
100049b4:	1006d1ba 	srli	r3,r2,6
100049b8:	19400e04 	addi	r5,r3,56
100049bc:	2947883a 	add	r3,r5,r5
100049c0:	18c7883a 	add	r3,r3,r3
100049c4:	18c7883a 	add	r3,r3,r3
100049c8:	1a49883a 	add	r4,r3,r9
100049cc:	20c00217 	ldw	r3,8(r4)
100049d0:	01c40074 	movhi	r7,4097
100049d4:	39ff5904 	addi	r7,r7,-668
100049d8:	19003b26 	beq	r3,r4,10004ac8 <_free_r+0x258>
100049dc:	01ffff04 	movi	r7,-4
100049e0:	19400117 	ldw	r5,4(r3)
100049e4:	29ca703a 	and	r5,r5,r7
100049e8:	1140022e 	bgeu	r2,r5,100049f4 <_free_r+0x184>
100049ec:	18c00217 	ldw	r3,8(r3)
100049f0:	20fffb1e 	bne	r4,r3,100049e0 <_free_r+0x170>
100049f4:	18800317 	ldw	r2,12(r3)
100049f8:	30800315 	stw	r2,12(r6)
100049fc:	30c00215 	stw	r3,8(r6)
10004a00:	11800215 	stw	r6,8(r2)
10004a04:	19800315 	stw	r6,12(r3)
10004a08:	003fe006 	br	1000498c <_free_r+0x11c>
10004a0c:	2100004c 	andi	r4,r4,1
10004a10:	1885883a 	add	r2,r3,r2
10004a14:	2000071e 	bne	r4,zero,10004a34 <_free_r+0x1c4>
10004a18:	817ffe17 	ldw	r5,-8(r16)
10004a1c:	314dc83a 	sub	r6,r6,r5
10004a20:	30c00317 	ldw	r3,12(r6)
10004a24:	31000217 	ldw	r4,8(r6)
10004a28:	1145883a 	add	r2,r2,r5
10004a2c:	20c00315 	stw	r3,12(r4)
10004a30:	19000215 	stw	r4,8(r3)
10004a34:	10c00054 	ori	r3,r2,1
10004a38:	30c00115 	stw	r3,4(r6)
10004a3c:	00c40074 	movhi	r3,4097
10004a40:	18c4e304 	addi	r3,r3,5004
10004a44:	18c00017 	ldw	r3,0(r3)
10004a48:	49800215 	stw	r6,8(r9)
10004a4c:	10ffcf36 	bltu	r2,r3,1000498c <_free_r+0x11c>
10004a50:	00840074 	movhi	r2,4097
10004a54:	108bb104 	addi	r2,r2,11972
10004a58:	11400017 	ldw	r5,0(r2)
10004a5c:	8809883a 	mov	r4,r17
10004a60:	000474c0 	call	1000474c <_malloc_trim_r>
10004a64:	003fc906 	br	1000498c <_free_r+0x11c>
10004a68:	28c9883a 	add	r4,r5,r3
10004a6c:	21000117 	ldw	r4,4(r4)
10004a70:	2100004c 	andi	r4,r4,1
10004a74:	20000a1e 	bne	r4,zero,10004aa0 <_free_r+0x230>
10004a78:	29000317 	ldw	r4,12(r5)
10004a7c:	29400217 	ldw	r5,8(r5)
10004a80:	10c5883a 	add	r2,r2,r3
10004a84:	10c00054 	ori	r3,r2,1
10004a88:	29000315 	stw	r4,12(r5)
10004a8c:	21400215 	stw	r5,8(r4)
10004a90:	30c00115 	stw	r3,4(r6)
10004a94:	308d883a 	add	r6,r6,r2
10004a98:	30800015 	stw	r2,0(r6)
10004a9c:	003fbb06 	br	1000498c <_free_r+0x11c>
10004aa0:	10c00054 	ori	r3,r2,1
10004aa4:	30c00115 	stw	r3,4(r6)
10004aa8:	308d883a 	add	r6,r6,r2
10004aac:	30800015 	stw	r2,0(r6)
10004ab0:	003fb606 	br	1000498c <_free_r+0x11c>
10004ab4:	01000504 	movi	r4,20
10004ab8:	20c01436 	bltu	r4,r3,10004b0c <_free_r+0x29c>
10004abc:	194016c4 	addi	r5,r3,91
10004ac0:	2947883a 	add	r3,r5,r5
10004ac4:	003fbe06 	br	100049c0 <_free_r+0x150>
10004ac8:	280bd0ba 	srai	r5,r5,2
10004acc:	00800044 	movi	r2,1
10004ad0:	39000117 	ldw	r4,4(r7)
10004ad4:	114a983a 	sll	r5,r2,r5
10004ad8:	1805883a 	mov	r2,r3
10004adc:	2908b03a 	or	r4,r5,r4
10004ae0:	39000115 	stw	r4,4(r7)
10004ae4:	003fc406 	br	100049f8 <_free_r+0x188>
10004ae8:	49800515 	stw	r6,20(r9)
10004aec:	49800415 	stw	r6,16(r9)
10004af0:	10c00054 	ori	r3,r2,1
10004af4:	31000315 	stw	r4,12(r6)
10004af8:	31000215 	stw	r4,8(r6)
10004afc:	30c00115 	stw	r3,4(r6)
10004b00:	308d883a 	add	r6,r6,r2
10004b04:	30800015 	stw	r2,0(r6)
10004b08:	003fa006 	br	1000498c <_free_r+0x11c>
10004b0c:	01001504 	movi	r4,84
10004b10:	20c00436 	bltu	r4,r3,10004b24 <_free_r+0x2b4>
10004b14:	1006d33a 	srli	r3,r2,12
10004b18:	19401b84 	addi	r5,r3,110
10004b1c:	2947883a 	add	r3,r5,r5
10004b20:	003fa706 	br	100049c0 <_free_r+0x150>
10004b24:	01005504 	movi	r4,340
10004b28:	20c00436 	bltu	r4,r3,10004b3c <_free_r+0x2cc>
10004b2c:	1006d3fa 	srli	r3,r2,15
10004b30:	19401dc4 	addi	r5,r3,119
10004b34:	2947883a 	add	r3,r5,r5
10004b38:	003fa106 	br	100049c0 <_free_r+0x150>
10004b3c:	01015504 	movi	r4,1364
10004b40:	20c00436 	bltu	r4,r3,10004b54 <_free_r+0x2e4>
10004b44:	1006d4ba 	srli	r3,r2,18
10004b48:	19401f04 	addi	r5,r3,124
10004b4c:	2947883a 	add	r3,r5,r5
10004b50:	003f9b06 	br	100049c0 <_free_r+0x150>
10004b54:	00c03f04 	movi	r3,252
10004b58:	01401f84 	movi	r5,126
10004b5c:	003f9806 	br	100049c0 <_free_r+0x150>

10004b60 <__sfvwrite_r>:
10004b60:	30800217 	ldw	r2,8(r6)
10004b64:	10004526 	beq	r2,zero,10004c7c <__sfvwrite_r+0x11c>
10004b68:	28c0030b 	ldhu	r3,12(r5)
10004b6c:	defff404 	addi	sp,sp,-48
10004b70:	dd400715 	stw	r21,28(sp)
10004b74:	dcc00515 	stw	r19,20(sp)
10004b78:	dc000215 	stw	r16,8(sp)
10004b7c:	dfc00b15 	stw	ra,44(sp)
10004b80:	df000a15 	stw	fp,40(sp)
10004b84:	ddc00915 	stw	r23,36(sp)
10004b88:	dd800815 	stw	r22,32(sp)
10004b8c:	dd000615 	stw	r20,24(sp)
10004b90:	dc800415 	stw	r18,16(sp)
10004b94:	dc400315 	stw	r17,12(sp)
10004b98:	1880020c 	andi	r2,r3,8
10004b9c:	2821883a 	mov	r16,r5
10004ba0:	202b883a 	mov	r21,r4
10004ba4:	3027883a 	mov	r19,r6
10004ba8:	10002526 	beq	r2,zero,10004c40 <__sfvwrite_r+0xe0>
10004bac:	28800417 	ldw	r2,16(r5)
10004bb0:	10002326 	beq	r2,zero,10004c40 <__sfvwrite_r+0xe0>
10004bb4:	1880008c 	andi	r2,r3,2
10004bb8:	9c400017 	ldw	r17,0(r19)
10004bbc:	10003126 	beq	r2,zero,10004c84 <__sfvwrite_r+0x124>
10004bc0:	0029883a 	mov	r20,zero
10004bc4:	0025883a 	mov	r18,zero
10004bc8:	05810004 	movi	r22,1024
10004bcc:	a00d883a 	mov	r6,r20
10004bd0:	a809883a 	mov	r4,r21
10004bd4:	90002526 	beq	r18,zero,10004c6c <__sfvwrite_r+0x10c>
10004bd8:	900f883a 	mov	r7,r18
10004bdc:	81400717 	ldw	r5,28(r16)
10004be0:	b480012e 	bgeu	r22,r18,10004be8 <__sfvwrite_r+0x88>
10004be4:	01c10004 	movi	r7,1024
10004be8:	80800917 	ldw	r2,36(r16)
10004bec:	103ee83a 	callr	r2
10004bf0:	0080510e 	bge	zero,r2,10004d38 <__sfvwrite_r+0x1d8>
10004bf4:	98c00217 	ldw	r3,8(r19)
10004bf8:	a0a9883a 	add	r20,r20,r2
10004bfc:	90a5c83a 	sub	r18,r18,r2
10004c00:	1885c83a 	sub	r2,r3,r2
10004c04:	98800215 	stw	r2,8(r19)
10004c08:	103ff01e 	bne	r2,zero,10004bcc <__sfvwrite_r+0x6c>
10004c0c:	0005883a 	mov	r2,zero
10004c10:	dfc00b17 	ldw	ra,44(sp)
10004c14:	df000a17 	ldw	fp,40(sp)
10004c18:	ddc00917 	ldw	r23,36(sp)
10004c1c:	dd800817 	ldw	r22,32(sp)
10004c20:	dd400717 	ldw	r21,28(sp)
10004c24:	dd000617 	ldw	r20,24(sp)
10004c28:	dcc00517 	ldw	r19,20(sp)
10004c2c:	dc800417 	ldw	r18,16(sp)
10004c30:	dc400317 	ldw	r17,12(sp)
10004c34:	dc000217 	ldw	r16,8(sp)
10004c38:	dec00c04 	addi	sp,sp,48
10004c3c:	f800283a 	ret
10004c40:	a809883a 	mov	r4,r21
10004c44:	800b883a 	mov	r5,r16
10004c48:	00026c00 	call	100026c0 <__swsetup_r>
10004c4c:	80c0030b 	ldhu	r3,12(r16)
10004c50:	103fd826 	beq	r2,zero,10004bb4 <__sfvwrite_r+0x54>
10004c54:	18c01014 	ori	r3,r3,64
10004c58:	80c0030d 	sth	r3,12(r16)
10004c5c:	00c00244 	movi	r3,9
10004c60:	00bfffc4 	movi	r2,-1
10004c64:	a8c00015 	stw	r3,0(r21)
10004c68:	003fe906 	br	10004c10 <__sfvwrite_r+0xb0>
10004c6c:	8d000017 	ldw	r20,0(r17)
10004c70:	8c800117 	ldw	r18,4(r17)
10004c74:	8c400204 	addi	r17,r17,8
10004c78:	003fd406 	br	10004bcc <__sfvwrite_r+0x6c>
10004c7c:	0005883a 	mov	r2,zero
10004c80:	f800283a 	ret
10004c84:	1880004c 	andi	r2,r3,1
10004c88:	1000301e 	bne	r2,zero,10004d4c <__sfvwrite_r+0x1ec>
10004c8c:	002f883a 	mov	r23,zero
10004c90:	0025883a 	mov	r18,zero
10004c94:	90001c26 	beq	r18,zero,10004d08 <__sfvwrite_r+0x1a8>
10004c98:	1880800c 	andi	r2,r3,512
10004c9c:	85000217 	ldw	r20,8(r16)
10004ca0:	10006c26 	beq	r2,zero,10004e54 <__sfvwrite_r+0x2f4>
10004ca4:	a02d883a 	mov	r22,r20
10004ca8:	95008536 	bltu	r18,r20,10004ec0 <__sfvwrite_r+0x360>
10004cac:	1881200c 	andi	r2,r3,1152
10004cb0:	10009d1e 	bne	r2,zero,10004f28 <__sfvwrite_r+0x3c8>
10004cb4:	81000017 	ldw	r4,0(r16)
10004cb8:	a039883a 	mov	fp,r20
10004cbc:	9029883a 	mov	r20,r18
10004cc0:	b80b883a 	mov	r5,r23
10004cc4:	b00d883a 	mov	r6,r22
10004cc8:	0005dd40 	call	10005dd4 <memmove>
10004ccc:	80c00217 	ldw	r3,8(r16)
10004cd0:	81000017 	ldw	r4,0(r16)
10004cd4:	9005883a 	mov	r2,r18
10004cd8:	1f39c83a 	sub	fp,r3,fp
10004cdc:	258f883a 	add	r7,r4,r22
10004ce0:	87000215 	stw	fp,8(r16)
10004ce4:	81c00015 	stw	r7,0(r16)
10004ce8:	98c00217 	ldw	r3,8(r19)
10004cec:	b8af883a 	add	r23,r23,r2
10004cf0:	90a5c83a 	sub	r18,r18,r2
10004cf4:	1d05c83a 	sub	r2,r3,r20
10004cf8:	98800215 	stw	r2,8(r19)
10004cfc:	103fc326 	beq	r2,zero,10004c0c <__sfvwrite_r+0xac>
10004d00:	80c0030b 	ldhu	r3,12(r16)
10004d04:	903fe41e 	bne	r18,zero,10004c98 <__sfvwrite_r+0x138>
10004d08:	8dc00017 	ldw	r23,0(r17)
10004d0c:	8c800117 	ldw	r18,4(r17)
10004d10:	8c400204 	addi	r17,r17,8
10004d14:	003fdf06 	br	10004c94 <__sfvwrite_r+0x134>
10004d18:	00072040 	call	10007204 <_realloc_r>
10004d1c:	102d883a 	mov	r22,r2
10004d20:	1000a01e 	bne	r2,zero,10004fa4 <__sfvwrite_r+0x444>
10004d24:	81400417 	ldw	r5,16(r16)
10004d28:	a809883a 	mov	r4,r21
10004d2c:	00048700 	call	10004870 <_free_r>
10004d30:	00800304 	movi	r2,12
10004d34:	a8800015 	stw	r2,0(r21)
10004d38:	80c0030b 	ldhu	r3,12(r16)
10004d3c:	00bfffc4 	movi	r2,-1
10004d40:	18c01014 	ori	r3,r3,64
10004d44:	80c0030d 	sth	r3,12(r16)
10004d48:	003fb106 	br	10004c10 <__sfvwrite_r+0xb0>
10004d4c:	0029883a 	mov	r20,zero
10004d50:	0011883a 	mov	r8,zero
10004d54:	0039883a 	mov	fp,zero
10004d58:	0025883a 	mov	r18,zero
10004d5c:	90001f26 	beq	r18,zero,10004ddc <__sfvwrite_r+0x27c>
10004d60:	40006826 	beq	r8,zero,10004f04 <__sfvwrite_r+0x3a4>
10004d64:	a02f883a 	mov	r23,r20
10004d68:	9500012e 	bgeu	r18,r20,10004d70 <__sfvwrite_r+0x210>
10004d6c:	902f883a 	mov	r23,r18
10004d70:	81000017 	ldw	r4,0(r16)
10004d74:	80800417 	ldw	r2,16(r16)
10004d78:	b82d883a 	mov	r22,r23
10004d7c:	81800217 	ldw	r6,8(r16)
10004d80:	81c00517 	ldw	r7,20(r16)
10004d84:	1100022e 	bgeu	r2,r4,10004d90 <__sfvwrite_r+0x230>
10004d88:	31c7883a 	add	r3,r6,r7
10004d8c:	1dc01816 	blt	r3,r23,10004df0 <__sfvwrite_r+0x290>
10004d90:	b9c03f16 	blt	r23,r7,10004e90 <__sfvwrite_r+0x330>
10004d94:	80800917 	ldw	r2,36(r16)
10004d98:	81400717 	ldw	r5,28(r16)
10004d9c:	a809883a 	mov	r4,r21
10004da0:	da000115 	stw	r8,4(sp)
10004da4:	e00d883a 	mov	r6,fp
10004da8:	103ee83a 	callr	r2
10004dac:	102d883a 	mov	r22,r2
10004db0:	da000117 	ldw	r8,4(sp)
10004db4:	00bfe00e 	bge	zero,r2,10004d38 <__sfvwrite_r+0x1d8>
10004db8:	a5a9c83a 	sub	r20,r20,r22
10004dbc:	a0001f26 	beq	r20,zero,10004e3c <__sfvwrite_r+0x2dc>
10004dc0:	98800217 	ldw	r2,8(r19)
10004dc4:	e5b9883a 	add	fp,fp,r22
10004dc8:	95a5c83a 	sub	r18,r18,r22
10004dcc:	15adc83a 	sub	r22,r2,r22
10004dd0:	9d800215 	stw	r22,8(r19)
10004dd4:	b03f8d26 	beq	r22,zero,10004c0c <__sfvwrite_r+0xac>
10004dd8:	903fe11e 	bne	r18,zero,10004d60 <__sfvwrite_r+0x200>
10004ddc:	8f000017 	ldw	fp,0(r17)
10004de0:	8c800117 	ldw	r18,4(r17)
10004de4:	0011883a 	mov	r8,zero
10004de8:	8c400204 	addi	r17,r17,8
10004dec:	003fdb06 	br	10004d5c <__sfvwrite_r+0x1fc>
10004df0:	180d883a 	mov	r6,r3
10004df4:	e00b883a 	mov	r5,fp
10004df8:	da000115 	stw	r8,4(sp)
10004dfc:	d8c00015 	stw	r3,0(sp)
10004e00:	0005dd40 	call	10005dd4 <memmove>
10004e04:	d8c00017 	ldw	r3,0(sp)
10004e08:	80800017 	ldw	r2,0(r16)
10004e0c:	a809883a 	mov	r4,r21
10004e10:	800b883a 	mov	r5,r16
10004e14:	10c5883a 	add	r2,r2,r3
10004e18:	80800015 	stw	r2,0(r16)
10004e1c:	d8c00015 	stw	r3,0(sp)
10004e20:	00041400 	call	10004140 <_fflush_r>
10004e24:	d8c00017 	ldw	r3,0(sp)
10004e28:	da000117 	ldw	r8,4(sp)
10004e2c:	103fc21e 	bne	r2,zero,10004d38 <__sfvwrite_r+0x1d8>
10004e30:	182d883a 	mov	r22,r3
10004e34:	a5a9c83a 	sub	r20,r20,r22
10004e38:	a03fe11e 	bne	r20,zero,10004dc0 <__sfvwrite_r+0x260>
10004e3c:	a809883a 	mov	r4,r21
10004e40:	800b883a 	mov	r5,r16
10004e44:	00041400 	call	10004140 <_fflush_r>
10004e48:	103fbb1e 	bne	r2,zero,10004d38 <__sfvwrite_r+0x1d8>
10004e4c:	0011883a 	mov	r8,zero
10004e50:	003fdb06 	br	10004dc0 <__sfvwrite_r+0x260>
10004e54:	81000017 	ldw	r4,0(r16)
10004e58:	80800417 	ldw	r2,16(r16)
10004e5c:	1100012e 	bgeu	r2,r4,10004e64 <__sfvwrite_r+0x304>
10004e60:	a4805a36 	bltu	r20,r18,10004fcc <__sfvwrite_r+0x46c>
10004e64:	81c00517 	ldw	r7,20(r16)
10004e68:	91c01a36 	bltu	r18,r7,10004ed4 <__sfvwrite_r+0x374>
10004e6c:	80800917 	ldw	r2,36(r16)
10004e70:	81400717 	ldw	r5,28(r16)
10004e74:	a809883a 	mov	r4,r21
10004e78:	b80d883a 	mov	r6,r23
10004e7c:	103ee83a 	callr	r2
10004e80:	1029883a 	mov	r20,r2
10004e84:	00bfac0e 	bge	zero,r2,10004d38 <__sfvwrite_r+0x1d8>
10004e88:	a005883a 	mov	r2,r20
10004e8c:	003f9606 	br	10004ce8 <__sfvwrite_r+0x188>
10004e90:	b80d883a 	mov	r6,r23
10004e94:	e00b883a 	mov	r5,fp
10004e98:	da000115 	stw	r8,4(sp)
10004e9c:	0005dd40 	call	10005dd4 <memmove>
10004ea0:	80800217 	ldw	r2,8(r16)
10004ea4:	80c00017 	ldw	r3,0(r16)
10004ea8:	da000117 	ldw	r8,4(sp)
10004eac:	15c5c83a 	sub	r2,r2,r23
10004eb0:	1def883a 	add	r23,r3,r23
10004eb4:	80800215 	stw	r2,8(r16)
10004eb8:	85c00015 	stw	r23,0(r16)
10004ebc:	003fbe06 	br	10004db8 <__sfvwrite_r+0x258>
10004ec0:	81000017 	ldw	r4,0(r16)
10004ec4:	9039883a 	mov	fp,r18
10004ec8:	9029883a 	mov	r20,r18
10004ecc:	902d883a 	mov	r22,r18
10004ed0:	003f7b06 	br	10004cc0 <__sfvwrite_r+0x160>
10004ed4:	b80b883a 	mov	r5,r23
10004ed8:	900d883a 	mov	r6,r18
10004edc:	0005dd40 	call	10005dd4 <memmove>
10004ee0:	80c00217 	ldw	r3,8(r16)
10004ee4:	80800017 	ldw	r2,0(r16)
10004ee8:	9029883a 	mov	r20,r18
10004eec:	1c87c83a 	sub	r3,r3,r18
10004ef0:	1485883a 	add	r2,r2,r18
10004ef4:	80800015 	stw	r2,0(r16)
10004ef8:	80c00215 	stw	r3,8(r16)
10004efc:	9005883a 	mov	r2,r18
10004f00:	003f7906 	br	10004ce8 <__sfvwrite_r+0x188>
10004f04:	e009883a 	mov	r4,fp
10004f08:	01400284 	movi	r5,10
10004f0c:	900d883a 	mov	r6,r18
10004f10:	0005bb40 	call	10005bb4 <memchr>
10004f14:	10003826 	beq	r2,zero,10004ff8 <__sfvwrite_r+0x498>
10004f18:	10800044 	addi	r2,r2,1
10004f1c:	1729c83a 	sub	r20,r2,fp
10004f20:	02000044 	movi	r8,1
10004f24:	003f8f06 	br	10004d64 <__sfvwrite_r+0x204>
10004f28:	80800517 	ldw	r2,20(r16)
10004f2c:	81400417 	ldw	r5,16(r16)
10004f30:	87000017 	ldw	fp,0(r16)
10004f34:	10a9883a 	add	r20,r2,r2
10004f38:	a085883a 	add	r2,r20,r2
10004f3c:	1028d7fa 	srli	r20,r2,31
10004f40:	e179c83a 	sub	fp,fp,r5
10004f44:	e1000044 	addi	r4,fp,1
10004f48:	a085883a 	add	r2,r20,r2
10004f4c:	1029d07a 	srai	r20,r2,1
10004f50:	2485883a 	add	r2,r4,r18
10004f54:	a00d883a 	mov	r6,r20
10004f58:	a080022e 	bgeu	r20,r2,10004f64 <__sfvwrite_r+0x404>
10004f5c:	1029883a 	mov	r20,r2
10004f60:	100d883a 	mov	r6,r2
10004f64:	18c1000c 	andi	r3,r3,1024
10004f68:	a809883a 	mov	r4,r21
10004f6c:	183f6a26 	beq	r3,zero,10004d18 <__sfvwrite_r+0x1b8>
10004f70:	300b883a 	mov	r5,r6
10004f74:	000540c0 	call	1000540c <_malloc_r>
10004f78:	102d883a 	mov	r22,r2
10004f7c:	103f6c26 	beq	r2,zero,10004d30 <__sfvwrite_r+0x1d0>
10004f80:	81400417 	ldw	r5,16(r16)
10004f84:	1009883a 	mov	r4,r2
10004f88:	e00d883a 	mov	r6,fp
10004f8c:	0005c9c0 	call	10005c9c <memcpy>
10004f90:	8080030b 	ldhu	r2,12(r16)
10004f94:	00fedfc4 	movi	r3,-1153
10004f98:	10c4703a 	and	r2,r2,r3
10004f9c:	10802014 	ori	r2,r2,128
10004fa0:	8080030d 	sth	r2,12(r16)
10004fa4:	b709883a 	add	r4,r22,fp
10004fa8:	a707c83a 	sub	r3,r20,fp
10004fac:	85800415 	stw	r22,16(r16)
10004fb0:	85000515 	stw	r20,20(r16)
10004fb4:	81000015 	stw	r4,0(r16)
10004fb8:	9039883a 	mov	fp,r18
10004fbc:	80c00215 	stw	r3,8(r16)
10004fc0:	9029883a 	mov	r20,r18
10004fc4:	902d883a 	mov	r22,r18
10004fc8:	003f3d06 	br	10004cc0 <__sfvwrite_r+0x160>
10004fcc:	b80b883a 	mov	r5,r23
10004fd0:	a00d883a 	mov	r6,r20
10004fd4:	0005dd40 	call	10005dd4 <memmove>
10004fd8:	80800017 	ldw	r2,0(r16)
10004fdc:	a809883a 	mov	r4,r21
10004fe0:	800b883a 	mov	r5,r16
10004fe4:	1505883a 	add	r2,r2,r20
10004fe8:	80800015 	stw	r2,0(r16)
10004fec:	00041400 	call	10004140 <_fflush_r>
10004ff0:	103fa526 	beq	r2,zero,10004e88 <__sfvwrite_r+0x328>
10004ff4:	003f5006 	br	10004d38 <__sfvwrite_r+0x1d8>
10004ff8:	95000044 	addi	r20,r18,1
10004ffc:	02000044 	movi	r8,1
10005000:	003f5806 	br	10004d64 <__sfvwrite_r+0x204>

10005004 <_fwalk>:
10005004:	defff804 	addi	sp,sp,-32
10005008:	dd400515 	stw	r21,20(sp)
1000500c:	2540b804 	addi	r21,r4,736
10005010:	dd800615 	stw	r22,24(sp)
10005014:	dd000415 	stw	r20,16(sp)
10005018:	dfc00715 	stw	ra,28(sp)
1000501c:	dcc00315 	stw	r19,12(sp)
10005020:	dc800215 	stw	r18,8(sp)
10005024:	dc400115 	stw	r17,4(sp)
10005028:	dc000015 	stw	r16,0(sp)
1000502c:	2829883a 	mov	r20,r5
10005030:	002d883a 	mov	r22,zero
10005034:	000470c0 	call	1000470c <__sfp_lock_acquire>
10005038:	a8001426 	beq	r21,zero,1000508c <_fwalk+0x88>
1000503c:	04ffffc4 	movi	r19,-1
10005040:	ac400117 	ldw	r17,4(r21)
10005044:	ac800217 	ldw	r18,8(r21)
10005048:	8c7fffc4 	addi	r17,r17,-1
1000504c:	88000d16 	blt	r17,zero,10005084 <_fwalk+0x80>
10005050:	94000304 	addi	r16,r18,12
10005054:	94800384 	addi	r18,r18,14
10005058:	80c0000f 	ldh	r3,0(r16)
1000505c:	8c7fffc4 	addi	r17,r17,-1
10005060:	813ffd04 	addi	r4,r16,-12
10005064:	18000426 	beq	r3,zero,10005078 <_fwalk+0x74>
10005068:	90c0000f 	ldh	r3,0(r18)
1000506c:	1cc00226 	beq	r3,r19,10005078 <_fwalk+0x74>
10005070:	a03ee83a 	callr	r20
10005074:	b0acb03a 	or	r22,r22,r2
10005078:	84001a04 	addi	r16,r16,104
1000507c:	94801a04 	addi	r18,r18,104
10005080:	8cfff51e 	bne	r17,r19,10005058 <_fwalk+0x54>
10005084:	ad400017 	ldw	r21,0(r21)
10005088:	a83fed1e 	bne	r21,zero,10005040 <_fwalk+0x3c>
1000508c:	00047100 	call	10004710 <__sfp_lock_release>
10005090:	b005883a 	mov	r2,r22
10005094:	dfc00717 	ldw	ra,28(sp)
10005098:	dd800617 	ldw	r22,24(sp)
1000509c:	dd400517 	ldw	r21,20(sp)
100050a0:	dd000417 	ldw	r20,16(sp)
100050a4:	dcc00317 	ldw	r19,12(sp)
100050a8:	dc800217 	ldw	r18,8(sp)
100050ac:	dc400117 	ldw	r17,4(sp)
100050b0:	dc000017 	ldw	r16,0(sp)
100050b4:	dec00804 	addi	sp,sp,32
100050b8:	f800283a 	ret

100050bc <_fwalk_reent>:
100050bc:	defff804 	addi	sp,sp,-32
100050c0:	dd400515 	stw	r21,20(sp)
100050c4:	2540b804 	addi	r21,r4,736
100050c8:	dd800615 	stw	r22,24(sp)
100050cc:	dd000415 	stw	r20,16(sp)
100050d0:	dcc00315 	stw	r19,12(sp)
100050d4:	dfc00715 	stw	ra,28(sp)
100050d8:	dc800215 	stw	r18,8(sp)
100050dc:	dc400115 	stw	r17,4(sp)
100050e0:	dc000015 	stw	r16,0(sp)
100050e4:	2027883a 	mov	r19,r4
100050e8:	2829883a 	mov	r20,r5
100050ec:	002d883a 	mov	r22,zero
100050f0:	000470c0 	call	1000470c <__sfp_lock_acquire>
100050f4:	a8001326 	beq	r21,zero,10005144 <_fwalk_reent+0x88>
100050f8:	04bfffc4 	movi	r18,-1
100050fc:	ac400117 	ldw	r17,4(r21)
10005100:	ac000217 	ldw	r16,8(r21)
10005104:	8c7fffc4 	addi	r17,r17,-1
10005108:	88000c16 	blt	r17,zero,1000513c <_fwalk_reent+0x80>
1000510c:	84000304 	addi	r16,r16,12
10005110:	80c0000f 	ldh	r3,0(r16)
10005114:	8c7fffc4 	addi	r17,r17,-1
10005118:	817ffd04 	addi	r5,r16,-12
1000511c:	18000526 	beq	r3,zero,10005134 <_fwalk_reent+0x78>
10005120:	80c0008f 	ldh	r3,2(r16)
10005124:	9809883a 	mov	r4,r19
10005128:	1c800226 	beq	r3,r18,10005134 <_fwalk_reent+0x78>
1000512c:	a03ee83a 	callr	r20
10005130:	b0acb03a 	or	r22,r22,r2
10005134:	84001a04 	addi	r16,r16,104
10005138:	8cbff51e 	bne	r17,r18,10005110 <_fwalk_reent+0x54>
1000513c:	ad400017 	ldw	r21,0(r21)
10005140:	a83fee1e 	bne	r21,zero,100050fc <_fwalk_reent+0x40>
10005144:	00047100 	call	10004710 <__sfp_lock_release>
10005148:	b005883a 	mov	r2,r22
1000514c:	dfc00717 	ldw	ra,28(sp)
10005150:	dd800617 	ldw	r22,24(sp)
10005154:	dd400517 	ldw	r21,20(sp)
10005158:	dd000417 	ldw	r20,16(sp)
1000515c:	dcc00317 	ldw	r19,12(sp)
10005160:	dc800217 	ldw	r18,8(sp)
10005164:	dc400117 	ldw	r17,4(sp)
10005168:	dc000017 	ldw	r16,0(sp)
1000516c:	dec00804 	addi	sp,sp,32
10005170:	f800283a 	ret

10005174 <_setlocale_r>:
10005174:	30001b26 	beq	r6,zero,100051e4 <_setlocale_r+0x70>
10005178:	01440074 	movhi	r5,4097
1000517c:	defffe04 	addi	sp,sp,-8
10005180:	297d9104 	addi	r5,r5,-2492
10005184:	3009883a 	mov	r4,r6
10005188:	dc000015 	stw	r16,0(sp)
1000518c:	dfc00115 	stw	ra,4(sp)
10005190:	3021883a 	mov	r16,r6
10005194:	00079a80 	call	100079a8 <strcmp>
10005198:	1000061e 	bne	r2,zero,100051b4 <_setlocale_r+0x40>
1000519c:	00840074 	movhi	r2,4097
100051a0:	10bd9004 	addi	r2,r2,-2496
100051a4:	dfc00117 	ldw	ra,4(sp)
100051a8:	dc000017 	ldw	r16,0(sp)
100051ac:	dec00204 	addi	sp,sp,8
100051b0:	f800283a 	ret
100051b4:	01440074 	movhi	r5,4097
100051b8:	297d9004 	addi	r5,r5,-2496
100051bc:	8009883a 	mov	r4,r16
100051c0:	00079a80 	call	100079a8 <strcmp>
100051c4:	103ff526 	beq	r2,zero,1000519c <_setlocale_r+0x28>
100051c8:	01440074 	movhi	r5,4097
100051cc:	297d7b04 	addi	r5,r5,-2580
100051d0:	8009883a 	mov	r4,r16
100051d4:	00079a80 	call	100079a8 <strcmp>
100051d8:	103ff026 	beq	r2,zero,1000519c <_setlocale_r+0x28>
100051dc:	0005883a 	mov	r2,zero
100051e0:	003ff006 	br	100051a4 <_setlocale_r+0x30>
100051e4:	00840074 	movhi	r2,4097
100051e8:	10bd9004 	addi	r2,r2,-2496
100051ec:	f800283a 	ret

100051f0 <__locale_charset>:
100051f0:	00840074 	movhi	r2,4097
100051f4:	10bf4304 	addi	r2,r2,-756
100051f8:	f800283a 	ret

100051fc <__locale_mb_cur_max>:
100051fc:	00840074 	movhi	r2,4097
10005200:	1084e104 	addi	r2,r2,4996
10005204:	10800017 	ldw	r2,0(r2)
10005208:	f800283a 	ret

1000520c <__locale_msgcharset>:
1000520c:	00840074 	movhi	r2,4097
10005210:	10bf3b04 	addi	r2,r2,-788
10005214:	f800283a 	ret

10005218 <__locale_cjk_lang>:
10005218:	0005883a 	mov	r2,zero
1000521c:	f800283a 	ret

10005220 <_localeconv_r>:
10005220:	00840074 	movhi	r2,4097
10005224:	10bf4b04 	addi	r2,r2,-724
10005228:	f800283a 	ret

1000522c <setlocale>:
1000522c:	00c40074 	movhi	r3,4097
10005230:	18c4e004 	addi	r3,r3,4992
10005234:	2005883a 	mov	r2,r4
10005238:	19000017 	ldw	r4,0(r3)
1000523c:	280d883a 	mov	r6,r5
10005240:	100b883a 	mov	r5,r2
10005244:	00051741 	jmpi	10005174 <_setlocale_r>

10005248 <localeconv>:
10005248:	00840074 	movhi	r2,4097
1000524c:	10bf4b04 	addi	r2,r2,-724
10005250:	f800283a 	ret

10005254 <__smakebuf_r>:
10005254:	2880030b 	ldhu	r2,12(r5)
10005258:	10c0008c 	andi	r3,r2,2
1000525c:	1800401e 	bne	r3,zero,10005360 <__smakebuf_r+0x10c>
10005260:	deffec04 	addi	sp,sp,-80
10005264:	dc000f15 	stw	r16,60(sp)
10005268:	2821883a 	mov	r16,r5
1000526c:	2940038f 	ldh	r5,14(r5)
10005270:	dc401015 	stw	r17,64(sp)
10005274:	dfc01315 	stw	ra,76(sp)
10005278:	dcc01215 	stw	r19,72(sp)
1000527c:	dc801115 	stw	r18,68(sp)
10005280:	2023883a 	mov	r17,r4
10005284:	28001b16 	blt	r5,zero,100052f4 <__smakebuf_r+0xa0>
10005288:	d80d883a 	mov	r6,sp
1000528c:	00095900 	call	10009590 <_fstat_r>
10005290:	10001716 	blt	r2,zero,100052f0 <__smakebuf_r+0x9c>
10005294:	d8800117 	ldw	r2,4(sp)
10005298:	00e00014 	movui	r3,32768
1000529c:	10bc000c 	andi	r2,r2,61440
100052a0:	10c03726 	beq	r2,r3,10005380 <__smakebuf_r+0x12c>
100052a4:	80c0030b 	ldhu	r3,12(r16)
100052a8:	18c20014 	ori	r3,r3,2048
100052ac:	80c0030d 	sth	r3,12(r16)
100052b0:	00c80004 	movi	r3,8192
100052b4:	10c03c1e 	bne	r2,r3,100053a8 <__smakebuf_r+0x154>
100052b8:	8140038f 	ldh	r5,14(r16)
100052bc:	8809883a 	mov	r4,r17
100052c0:	00095e80 	call	100095e8 <_isatty_r>
100052c4:	10004e26 	beq	r2,zero,10005400 <__smakebuf_r+0x1ac>
100052c8:	8080030b 	ldhu	r2,12(r16)
100052cc:	04c00044 	movi	r19,1
100052d0:	80c010c4 	addi	r3,r16,67
100052d4:	14c4b03a 	or	r2,r2,r19
100052d8:	8080030d 	sth	r2,12(r16)
100052dc:	80c00015 	stw	r3,0(r16)
100052e0:	80c00415 	stw	r3,16(r16)
100052e4:	84c00515 	stw	r19,20(r16)
100052e8:	04810004 	movi	r18,1024
100052ec:	00000706 	br	1000530c <__smakebuf_r+0xb8>
100052f0:	8080030b 	ldhu	r2,12(r16)
100052f4:	10c0200c 	andi	r3,r2,128
100052f8:	18001f1e 	bne	r3,zero,10005378 <__smakebuf_r+0x124>
100052fc:	04810004 	movi	r18,1024
10005300:	10820014 	ori	r2,r2,2048
10005304:	8080030d 	sth	r2,12(r16)
10005308:	0027883a 	mov	r19,zero
1000530c:	8809883a 	mov	r4,r17
10005310:	900b883a 	mov	r5,r18
10005314:	000540c0 	call	1000540c <_malloc_r>
10005318:	10002e26 	beq	r2,zero,100053d4 <__smakebuf_r+0x180>
1000531c:	80c0030b 	ldhu	r3,12(r16)
10005320:	01040034 	movhi	r4,4096
10005324:	2110ea04 	addi	r4,r4,17320
10005328:	89000f15 	stw	r4,60(r17)
1000532c:	18c02014 	ori	r3,r3,128
10005330:	80c0030d 	sth	r3,12(r16)
10005334:	80800015 	stw	r2,0(r16)
10005338:	80800415 	stw	r2,16(r16)
1000533c:	84800515 	stw	r18,20(r16)
10005340:	98001c1e 	bne	r19,zero,100053b4 <__smakebuf_r+0x160>
10005344:	dfc01317 	ldw	ra,76(sp)
10005348:	dcc01217 	ldw	r19,72(sp)
1000534c:	dc801117 	ldw	r18,68(sp)
10005350:	dc401017 	ldw	r17,64(sp)
10005354:	dc000f17 	ldw	r16,60(sp)
10005358:	dec01404 	addi	sp,sp,80
1000535c:	f800283a 	ret
10005360:	288010c4 	addi	r2,r5,67
10005364:	28800015 	stw	r2,0(r5)
10005368:	28800415 	stw	r2,16(r5)
1000536c:	00800044 	movi	r2,1
10005370:	28800515 	stw	r2,20(r5)
10005374:	f800283a 	ret
10005378:	04801004 	movi	r18,64
1000537c:	003fe006 	br	10005300 <__smakebuf_r+0xac>
10005380:	81000a17 	ldw	r4,40(r16)
10005384:	00c40034 	movhi	r3,4096
10005388:	18de5104 	addi	r3,r3,31044
1000538c:	20ffc51e 	bne	r4,r3,100052a4 <__smakebuf_r+0x50>
10005390:	80c0030b 	ldhu	r3,12(r16)
10005394:	01010004 	movi	r4,1024
10005398:	81001315 	stw	r4,76(r16)
1000539c:	1906b03a 	or	r3,r3,r4
100053a0:	80c0030d 	sth	r3,12(r16)
100053a4:	003fc206 	br	100052b0 <__smakebuf_r+0x5c>
100053a8:	0027883a 	mov	r19,zero
100053ac:	04810004 	movi	r18,1024
100053b0:	003fd606 	br	1000530c <__smakebuf_r+0xb8>
100053b4:	8140038f 	ldh	r5,14(r16)
100053b8:	8809883a 	mov	r4,r17
100053bc:	00095e80 	call	100095e8 <_isatty_r>
100053c0:	103fe026 	beq	r2,zero,10005344 <__smakebuf_r+0xf0>
100053c4:	8080030b 	ldhu	r2,12(r16)
100053c8:	10800054 	ori	r2,r2,1
100053cc:	8080030d 	sth	r2,12(r16)
100053d0:	003fdc06 	br	10005344 <__smakebuf_r+0xf0>
100053d4:	8080030b 	ldhu	r2,12(r16)
100053d8:	10c0800c 	andi	r3,r2,512
100053dc:	183fd91e 	bne	r3,zero,10005344 <__smakebuf_r+0xf0>
100053e0:	10800094 	ori	r2,r2,2
100053e4:	80c010c4 	addi	r3,r16,67
100053e8:	8080030d 	sth	r2,12(r16)
100053ec:	00800044 	movi	r2,1
100053f0:	80c00015 	stw	r3,0(r16)
100053f4:	80c00415 	stw	r3,16(r16)
100053f8:	80800515 	stw	r2,20(r16)
100053fc:	003fd106 	br	10005344 <__smakebuf_r+0xf0>
10005400:	04c00044 	movi	r19,1
10005404:	04810004 	movi	r18,1024
10005408:	003fc006 	br	1000530c <__smakebuf_r+0xb8>

1000540c <_malloc_r>:
1000540c:	defff504 	addi	sp,sp,-44
10005410:	dc800315 	stw	r18,12(sp)
10005414:	dfc00a15 	stw	ra,40(sp)
10005418:	df000915 	stw	fp,36(sp)
1000541c:	ddc00815 	stw	r23,32(sp)
10005420:	dd800715 	stw	r22,28(sp)
10005424:	dd400615 	stw	r21,24(sp)
10005428:	dd000515 	stw	r20,20(sp)
1000542c:	dcc00415 	stw	r19,16(sp)
10005430:	dc400215 	stw	r17,8(sp)
10005434:	dc000115 	stw	r16,4(sp)
10005438:	288002c4 	addi	r2,r5,11
1000543c:	00c00584 	movi	r3,22
10005440:	2025883a 	mov	r18,r4
10005444:	18802a2e 	bgeu	r3,r2,100054f0 <_malloc_r+0xe4>
10005448:	047ffe04 	movi	r17,-8
1000544c:	1462703a 	and	r17,r2,r17
10005450:	88009e16 	blt	r17,zero,100056cc <_malloc_r+0x2c0>
10005454:	89409d36 	bltu	r17,r5,100056cc <_malloc_r+0x2c0>
10005458:	000d4800 	call	1000d480 <__malloc_lock>
1000545c:	00807dc4 	movi	r2,503
10005460:	14402736 	bltu	r2,r17,10005500 <_malloc_r+0xf4>
10005464:	8806d0fa 	srli	r3,r17,3
10005468:	04c40074 	movhi	r19,4097
1000546c:	9cff5904 	addi	r19,r19,-668
10005470:	18c5883a 	add	r2,r3,r3
10005474:	1085883a 	add	r2,r2,r2
10005478:	1085883a 	add	r2,r2,r2
1000547c:	9885883a 	add	r2,r19,r2
10005480:	14000317 	ldw	r16,12(r2)
10005484:	80814a26 	beq	r16,r2,100059b0 <_malloc_r+0x5a4>
10005488:	80c00117 	ldw	r3,4(r16)
1000548c:	81000317 	ldw	r4,12(r16)
10005490:	00bfff04 	movi	r2,-4
10005494:	1884703a 	and	r2,r3,r2
10005498:	81400217 	ldw	r5,8(r16)
1000549c:	8085883a 	add	r2,r16,r2
100054a0:	10c00117 	ldw	r3,4(r2)
100054a4:	29000315 	stw	r4,12(r5)
100054a8:	21400215 	stw	r5,8(r4)
100054ac:	18c00054 	ori	r3,r3,1
100054b0:	10c00115 	stw	r3,4(r2)
100054b4:	9009883a 	mov	r4,r18
100054b8:	000d4a00 	call	1000d4a0 <__malloc_unlock>
100054bc:	80800204 	addi	r2,r16,8
100054c0:	dfc00a17 	ldw	ra,40(sp)
100054c4:	df000917 	ldw	fp,36(sp)
100054c8:	ddc00817 	ldw	r23,32(sp)
100054cc:	dd800717 	ldw	r22,28(sp)
100054d0:	dd400617 	ldw	r21,24(sp)
100054d4:	dd000517 	ldw	r20,20(sp)
100054d8:	dcc00417 	ldw	r19,16(sp)
100054dc:	dc800317 	ldw	r18,12(sp)
100054e0:	dc400217 	ldw	r17,8(sp)
100054e4:	dc000117 	ldw	r16,4(sp)
100054e8:	dec00b04 	addi	sp,sp,44
100054ec:	f800283a 	ret
100054f0:	04400404 	movi	r17,16
100054f4:	89407536 	bltu	r17,r5,100056cc <_malloc_r+0x2c0>
100054f8:	000d4800 	call	1000d480 <__malloc_lock>
100054fc:	003fd906 	br	10005464 <_malloc_r+0x58>
10005500:	8806d27a 	srli	r3,r17,9
10005504:	18007526 	beq	r3,zero,100056dc <_malloc_r+0x2d0>
10005508:	00800104 	movi	r2,4
1000550c:	10c0ef36 	bltu	r2,r3,100058cc <_malloc_r+0x4c0>
10005510:	8806d1ba 	srli	r3,r17,6
10005514:	19c00e04 	addi	r7,r3,56
10005518:	39cb883a 	add	r5,r7,r7
1000551c:	04c40074 	movhi	r19,4097
10005520:	294b883a 	add	r5,r5,r5
10005524:	9cff5904 	addi	r19,r19,-668
10005528:	294b883a 	add	r5,r5,r5
1000552c:	994b883a 	add	r5,r19,r5
10005530:	2c000317 	ldw	r16,12(r5)
10005534:	2c000e26 	beq	r5,r16,10005570 <_malloc_r+0x164>
10005538:	80800117 	ldw	r2,4(r16)
1000553c:	01bfff04 	movi	r6,-4
10005540:	010003c4 	movi	r4,15
10005544:	1184703a 	and	r2,r2,r6
10005548:	1447c83a 	sub	r3,r2,r17
1000554c:	20c00716 	blt	r4,r3,1000556c <_malloc_r+0x160>
10005550:	1800650e 	bge	r3,zero,100056e8 <_malloc_r+0x2dc>
10005554:	84000317 	ldw	r16,12(r16)
10005558:	2c000526 	beq	r5,r16,10005570 <_malloc_r+0x164>
1000555c:	80800117 	ldw	r2,4(r16)
10005560:	1184703a 	and	r2,r2,r6
10005564:	1447c83a 	sub	r3,r2,r17
10005568:	20fff90e 	bge	r4,r3,10005550 <_malloc_r+0x144>
1000556c:	39ffffc4 	addi	r7,r7,-1
10005570:	38c00044 	addi	r3,r7,1
10005574:	01840074 	movhi	r6,4097
10005578:	9c000417 	ldw	r16,16(r19)
1000557c:	31bf5904 	addi	r6,r6,-668
10005580:	32400204 	addi	r9,r6,8
10005584:	82410326 	beq	r16,r9,10005994 <_malloc_r+0x588>
10005588:	81000117 	ldw	r4,4(r16)
1000558c:	00bfff04 	movi	r2,-4
10005590:	208e703a 	and	r7,r4,r2
10005594:	3c45c83a 	sub	r2,r7,r17
10005598:	010003c4 	movi	r4,15
1000559c:	2080ee16 	blt	r4,r2,10005958 <_malloc_r+0x54c>
100055a0:	32400515 	stw	r9,20(r6)
100055a4:	32400415 	stw	r9,16(r6)
100055a8:	1000510e 	bge	r2,zero,100056f0 <_malloc_r+0x2e4>
100055ac:	00807fc4 	movi	r2,511
100055b0:	11c0ce36 	bltu	r2,r7,100058ec <_malloc_r+0x4e0>
100055b4:	3808d0fa 	srli	r4,r7,3
100055b8:	01c00044 	movi	r7,1
100055bc:	30800117 	ldw	r2,4(r6)
100055c0:	210b883a 	add	r5,r4,r4
100055c4:	294b883a 	add	r5,r5,r5
100055c8:	2009d0ba 	srai	r4,r4,2
100055cc:	294b883a 	add	r5,r5,r5
100055d0:	298b883a 	add	r5,r5,r6
100055d4:	2a000217 	ldw	r8,8(r5)
100055d8:	3908983a 	sll	r4,r7,r4
100055dc:	81400315 	stw	r5,12(r16)
100055e0:	82000215 	stw	r8,8(r16)
100055e4:	2088b03a 	or	r4,r4,r2
100055e8:	2c000215 	stw	r16,8(r5)
100055ec:	31000115 	stw	r4,4(r6)
100055f0:	44000315 	stw	r16,12(r8)
100055f4:	1805d0ba 	srai	r2,r3,2
100055f8:	01400044 	movi	r5,1
100055fc:	288a983a 	sll	r5,r5,r2
10005600:	21404336 	bltu	r4,r5,10005710 <_malloc_r+0x304>
10005604:	2144703a 	and	r2,r4,r5
10005608:	10000a1e 	bne	r2,zero,10005634 <_malloc_r+0x228>
1000560c:	00bfff04 	movi	r2,-4
10005610:	294b883a 	add	r5,r5,r5
10005614:	1886703a 	and	r3,r3,r2
10005618:	2144703a 	and	r2,r4,r5
1000561c:	18c00104 	addi	r3,r3,4
10005620:	1000041e 	bne	r2,zero,10005634 <_malloc_r+0x228>
10005624:	294b883a 	add	r5,r5,r5
10005628:	2144703a 	and	r2,r4,r5
1000562c:	18c00104 	addi	r3,r3,4
10005630:	103ffc26 	beq	r2,zero,10005624 <_malloc_r+0x218>
10005634:	023fff04 	movi	r8,-4
10005638:	01c003c4 	movi	r7,15
1000563c:	18c5883a 	add	r2,r3,r3
10005640:	1085883a 	add	r2,r2,r2
10005644:	1085883a 	add	r2,r2,r2
10005648:	9895883a 	add	r10,r19,r2
1000564c:	52c00304 	addi	r11,r10,12
10005650:	1819883a 	mov	r12,r3
10005654:	5c000017 	ldw	r16,0(r11)
10005658:	59bffd04 	addi	r6,r11,-12
1000565c:	8180041e 	bne	r16,r6,10005670 <_malloc_r+0x264>
10005660:	0000ce06 	br	1000599c <_malloc_r+0x590>
10005664:	2000d70e 	bge	r4,zero,100059c4 <_malloc_r+0x5b8>
10005668:	84000317 	ldw	r16,12(r16)
1000566c:	8180cb26 	beq	r16,r6,1000599c <_malloc_r+0x590>
10005670:	80800117 	ldw	r2,4(r16)
10005674:	1204703a 	and	r2,r2,r8
10005678:	1449c83a 	sub	r4,r2,r17
1000567c:	393ff90e 	bge	r7,r4,10005664 <_malloc_r+0x258>
10005680:	80800317 	ldw	r2,12(r16)
10005684:	80c00217 	ldw	r3,8(r16)
10005688:	89400054 	ori	r5,r17,1
1000568c:	81400115 	stw	r5,4(r16)
10005690:	18800315 	stw	r2,12(r3)
10005694:	10c00215 	stw	r3,8(r2)
10005698:	8463883a 	add	r17,r16,r17
1000569c:	9c400515 	stw	r17,20(r19)
100056a0:	9c400415 	stw	r17,16(r19)
100056a4:	20800054 	ori	r2,r4,1
100056a8:	88800115 	stw	r2,4(r17)
100056ac:	8a400315 	stw	r9,12(r17)
100056b0:	8a400215 	stw	r9,8(r17)
100056b4:	8923883a 	add	r17,r17,r4
100056b8:	89000015 	stw	r4,0(r17)
100056bc:	9009883a 	mov	r4,r18
100056c0:	000d4a00 	call	1000d4a0 <__malloc_unlock>
100056c4:	80800204 	addi	r2,r16,8
100056c8:	003f7d06 	br	100054c0 <_malloc_r+0xb4>
100056cc:	00800304 	movi	r2,12
100056d0:	90800015 	stw	r2,0(r18)
100056d4:	0005883a 	mov	r2,zero
100056d8:	003f7906 	br	100054c0 <_malloc_r+0xb4>
100056dc:	01401f84 	movi	r5,126
100056e0:	01c00fc4 	movi	r7,63
100056e4:	003f8d06 	br	1000551c <_malloc_r+0x110>
100056e8:	81000317 	ldw	r4,12(r16)
100056ec:	003f6a06 	br	10005498 <_malloc_r+0x8c>
100056f0:	81c5883a 	add	r2,r16,r7
100056f4:	10c00117 	ldw	r3,4(r2)
100056f8:	9009883a 	mov	r4,r18
100056fc:	18c00054 	ori	r3,r3,1
10005700:	10c00115 	stw	r3,4(r2)
10005704:	000d4a00 	call	1000d4a0 <__malloc_unlock>
10005708:	80800204 	addi	r2,r16,8
1000570c:	003f6c06 	br	100054c0 <_malloc_r+0xb4>
10005710:	9c000217 	ldw	r16,8(r19)
10005714:	00bfff04 	movi	r2,-4
10005718:	85800117 	ldw	r22,4(r16)
1000571c:	b0ac703a 	and	r22,r22,r2
10005720:	b4400336 	bltu	r22,r17,10005730 <_malloc_r+0x324>
10005724:	b445c83a 	sub	r2,r22,r17
10005728:	00c003c4 	movi	r3,15
1000572c:	18805d16 	blt	r3,r2,100058a4 <_malloc_r+0x498>
10005730:	05c40074 	movhi	r23,4097
10005734:	00840074 	movhi	r2,4097
10005738:	bdc4e204 	addi	r23,r23,5000
1000573c:	108bb104 	addi	r2,r2,11972
10005740:	15400017 	ldw	r21,0(r2)
10005744:	b9000017 	ldw	r4,0(r23)
10005748:	00ffffc4 	movi	r3,-1
1000574c:	858d883a 	add	r6,r16,r22
10005750:	8d6b883a 	add	r21,r17,r21
10005754:	20c0e426 	beq	r4,r3,10005ae8 <_malloc_r+0x6dc>
10005758:	ad4403c4 	addi	r21,r21,4111
1000575c:	00fc0004 	movi	r3,-4096
10005760:	a8ea703a 	and	r21,r21,r3
10005764:	9009883a 	mov	r4,r18
10005768:	a80b883a 	mov	r5,r21
1000576c:	d9800015 	stw	r6,0(sp)
10005770:	00078180 	call	10007818 <_sbrk_r>
10005774:	00ffffc4 	movi	r3,-1
10005778:	1029883a 	mov	r20,r2
1000577c:	d9800017 	ldw	r6,0(sp)
10005780:	10c0a426 	beq	r2,r3,10005a14 <_malloc_r+0x608>
10005784:	1180a236 	bltu	r2,r6,10005a10 <_malloc_r+0x604>
10005788:	07040074 	movhi	fp,4097
1000578c:	e70bb904 	addi	fp,fp,12004
10005790:	e0c00017 	ldw	r3,0(fp)
10005794:	a8c7883a 	add	r3,r21,r3
10005798:	e0c00015 	stw	r3,0(fp)
1000579c:	3500da26 	beq	r6,r20,10005b08 <_malloc_r+0x6fc>
100057a0:	b9000017 	ldw	r4,0(r23)
100057a4:	00bfffc4 	movi	r2,-1
100057a8:	2080e426 	beq	r4,r2,10005b3c <_malloc_r+0x730>
100057ac:	a185c83a 	sub	r2,r20,r6
100057b0:	1885883a 	add	r2,r3,r2
100057b4:	e0800015 	stw	r2,0(fp)
100057b8:	a0c001cc 	andi	r3,r20,7
100057bc:	1800b526 	beq	r3,zero,10005a94 <_malloc_r+0x688>
100057c0:	a0e9c83a 	sub	r20,r20,r3
100057c4:	00840204 	movi	r2,4104
100057c8:	a5000204 	addi	r20,r20,8
100057cc:	10c7c83a 	sub	r3,r2,r3
100057d0:	a545883a 	add	r2,r20,r21
100057d4:	1083ffcc 	andi	r2,r2,4095
100057d8:	18abc83a 	sub	r21,r3,r2
100057dc:	9009883a 	mov	r4,r18
100057e0:	a80b883a 	mov	r5,r21
100057e4:	00078180 	call	10007818 <_sbrk_r>
100057e8:	00ffffc4 	movi	r3,-1
100057ec:	10c0d026 	beq	r2,r3,10005b30 <_malloc_r+0x724>
100057f0:	1507c83a 	sub	r3,r2,r20
100057f4:	a8c7883a 	add	r3,r21,r3
100057f8:	18c00054 	ori	r3,r3,1
100057fc:	e0800017 	ldw	r2,0(fp)
10005800:	9d000215 	stw	r20,8(r19)
10005804:	a0c00115 	stw	r3,4(r20)
10005808:	a887883a 	add	r3,r21,r2
1000580c:	e0c00015 	stw	r3,0(fp)
10005810:	84c00e26 	beq	r16,r19,1000584c <_malloc_r+0x440>
10005814:	018003c4 	movi	r6,15
10005818:	3580a02e 	bgeu	r6,r22,10005a9c <_malloc_r+0x690>
1000581c:	81400117 	ldw	r5,4(r16)
10005820:	013ffe04 	movi	r4,-8
10005824:	b0bffd04 	addi	r2,r22,-12
10005828:	1104703a 	and	r2,r2,r4
1000582c:	2900004c 	andi	r4,r5,1
10005830:	1108b03a 	or	r4,r2,r4
10005834:	81000115 	stw	r4,4(r16)
10005838:	01400144 	movi	r5,5
1000583c:	8089883a 	add	r4,r16,r2
10005840:	21400115 	stw	r5,4(r4)
10005844:	21400215 	stw	r5,8(r4)
10005848:	3080c036 	bltu	r6,r2,10005b4c <_malloc_r+0x740>
1000584c:	00840074 	movhi	r2,4097
10005850:	108bb004 	addi	r2,r2,11968
10005854:	11000017 	ldw	r4,0(r2)
10005858:	20c0012e 	bgeu	r4,r3,10005860 <_malloc_r+0x454>
1000585c:	10c00015 	stw	r3,0(r2)
10005860:	00840074 	movhi	r2,4097
10005864:	108baf04 	addi	r2,r2,11964
10005868:	11000017 	ldw	r4,0(r2)
1000586c:	9c000217 	ldw	r16,8(r19)
10005870:	20c0012e 	bgeu	r4,r3,10005878 <_malloc_r+0x46c>
10005874:	10c00015 	stw	r3,0(r2)
10005878:	80c00117 	ldw	r3,4(r16)
1000587c:	00bfff04 	movi	r2,-4
10005880:	1886703a 	and	r3,r3,r2
10005884:	1c45c83a 	sub	r2,r3,r17
10005888:	1c400236 	bltu	r3,r17,10005894 <_malloc_r+0x488>
1000588c:	00c003c4 	movi	r3,15
10005890:	18800416 	blt	r3,r2,100058a4 <_malloc_r+0x498>
10005894:	9009883a 	mov	r4,r18
10005898:	000d4a00 	call	1000d4a0 <__malloc_unlock>
1000589c:	0005883a 	mov	r2,zero
100058a0:	003f0706 	br	100054c0 <_malloc_r+0xb4>
100058a4:	88c00054 	ori	r3,r17,1
100058a8:	80c00115 	stw	r3,4(r16)
100058ac:	8463883a 	add	r17,r16,r17
100058b0:	10800054 	ori	r2,r2,1
100058b4:	9c400215 	stw	r17,8(r19)
100058b8:	88800115 	stw	r2,4(r17)
100058bc:	9009883a 	mov	r4,r18
100058c0:	000d4a00 	call	1000d4a0 <__malloc_unlock>
100058c4:	80800204 	addi	r2,r16,8
100058c8:	003efd06 	br	100054c0 <_malloc_r+0xb4>
100058cc:	00800504 	movi	r2,20
100058d0:	10c0482e 	bgeu	r2,r3,100059f4 <_malloc_r+0x5e8>
100058d4:	00801504 	movi	r2,84
100058d8:	10c06836 	bltu	r2,r3,10005a7c <_malloc_r+0x670>
100058dc:	8806d33a 	srli	r3,r17,12
100058e0:	19c01b84 	addi	r7,r3,110
100058e4:	39cb883a 	add	r5,r7,r7
100058e8:	003f0c06 	br	1000551c <_malloc_r+0x110>
100058ec:	3804d27a 	srli	r2,r7,9
100058f0:	01000104 	movi	r4,4
100058f4:	2080422e 	bgeu	r4,r2,10005a00 <_malloc_r+0x5f4>
100058f8:	01000504 	movi	r4,20
100058fc:	20807c36 	bltu	r4,r2,10005af0 <_malloc_r+0x6e4>
10005900:	110016c4 	addi	r4,r2,91
10005904:	210b883a 	add	r5,r4,r4
10005908:	294b883a 	add	r5,r5,r5
1000590c:	294b883a 	add	r5,r5,r5
10005910:	994b883a 	add	r5,r19,r5
10005914:	28800217 	ldw	r2,8(r5)
10005918:	02040074 	movhi	r8,4097
1000591c:	423f5904 	addi	r8,r8,-668
10005920:	11406326 	beq	r2,r5,10005ab0 <_malloc_r+0x6a4>
10005924:	01bfff04 	movi	r6,-4
10005928:	11000117 	ldw	r4,4(r2)
1000592c:	2188703a 	and	r4,r4,r6
10005930:	3900022e 	bgeu	r7,r4,1000593c <_malloc_r+0x530>
10005934:	10800217 	ldw	r2,8(r2)
10005938:	28bffb1e 	bne	r5,r2,10005928 <_malloc_r+0x51c>
1000593c:	11800317 	ldw	r6,12(r2)
10005940:	99000117 	ldw	r4,4(r19)
10005944:	81800315 	stw	r6,12(r16)
10005948:	80800215 	stw	r2,8(r16)
1000594c:	34000215 	stw	r16,8(r6)
10005950:	14000315 	stw	r16,12(r2)
10005954:	003f2706 	br	100055f4 <_malloc_r+0x1e8>
10005958:	88c00054 	ori	r3,r17,1
1000595c:	80c00115 	stw	r3,4(r16)
10005960:	8463883a 	add	r17,r16,r17
10005964:	34400515 	stw	r17,20(r6)
10005968:	34400415 	stw	r17,16(r6)
1000596c:	10c00054 	ori	r3,r2,1
10005970:	8a400315 	stw	r9,12(r17)
10005974:	8a400215 	stw	r9,8(r17)
10005978:	88c00115 	stw	r3,4(r17)
1000597c:	88a3883a 	add	r17,r17,r2
10005980:	88800015 	stw	r2,0(r17)
10005984:	9009883a 	mov	r4,r18
10005988:	000d4a00 	call	1000d4a0 <__malloc_unlock>
1000598c:	80800204 	addi	r2,r16,8
10005990:	003ecb06 	br	100054c0 <_malloc_r+0xb4>
10005994:	31000117 	ldw	r4,4(r6)
10005998:	003f1606 	br	100055f4 <_malloc_r+0x1e8>
1000599c:	63000044 	addi	r12,r12,1
100059a0:	608000cc 	andi	r2,r12,3
100059a4:	5ac00204 	addi	r11,r11,8
100059a8:	103f2a1e 	bne	r2,zero,10005654 <_malloc_r+0x248>
100059ac:	00002106 	br	10005a34 <_malloc_r+0x628>
100059b0:	80800204 	addi	r2,r16,8
100059b4:	84000517 	ldw	r16,20(r16)
100059b8:	143eb31e 	bne	r2,r16,10005488 <_malloc_r+0x7c>
100059bc:	18c00084 	addi	r3,r3,2
100059c0:	003eec06 	br	10005574 <_malloc_r+0x168>
100059c4:	8085883a 	add	r2,r16,r2
100059c8:	10c00117 	ldw	r3,4(r2)
100059cc:	81000317 	ldw	r4,12(r16)
100059d0:	81400217 	ldw	r5,8(r16)
100059d4:	18c00054 	ori	r3,r3,1
100059d8:	10c00115 	stw	r3,4(r2)
100059dc:	29000315 	stw	r4,12(r5)
100059e0:	21400215 	stw	r5,8(r4)
100059e4:	9009883a 	mov	r4,r18
100059e8:	000d4a00 	call	1000d4a0 <__malloc_unlock>
100059ec:	80800204 	addi	r2,r16,8
100059f0:	003eb306 	br	100054c0 <_malloc_r+0xb4>
100059f4:	19c016c4 	addi	r7,r3,91
100059f8:	39cb883a 	add	r5,r7,r7
100059fc:	003ec706 	br	1000551c <_malloc_r+0x110>
10005a00:	3804d1ba 	srli	r2,r7,6
10005a04:	11000e04 	addi	r4,r2,56
10005a08:	210b883a 	add	r5,r4,r4
10005a0c:	003fbe06 	br	10005908 <_malloc_r+0x4fc>
10005a10:	84ff5d26 	beq	r16,r19,10005788 <_malloc_r+0x37c>
10005a14:	9c000217 	ldw	r16,8(r19)
10005a18:	00bfff04 	movi	r2,-4
10005a1c:	80c00117 	ldw	r3,4(r16)
10005a20:	1886703a 	and	r3,r3,r2
10005a24:	003f9706 	br	10005884 <_malloc_r+0x478>
10005a28:	52800017 	ldw	r10,0(r10)
10005a2c:	18ffffc4 	addi	r3,r3,-1
10005a30:	50805c1e 	bne	r10,r2,10005ba4 <_malloc_r+0x798>
10005a34:	190000cc 	andi	r4,r3,3
10005a38:	50bffe04 	addi	r2,r10,-8
10005a3c:	203ffa1e 	bne	r4,zero,10005a28 <_malloc_r+0x61c>
10005a40:	98800117 	ldw	r2,4(r19)
10005a44:	0146303a 	nor	r3,zero,r5
10005a48:	1884703a 	and	r2,r3,r2
10005a4c:	98800115 	stw	r2,4(r19)
10005a50:	294b883a 	add	r5,r5,r5
10005a54:	117f2e36 	bltu	r2,r5,10005710 <_malloc_r+0x304>
10005a58:	283f2d26 	beq	r5,zero,10005710 <_malloc_r+0x304>
10005a5c:	1146703a 	and	r3,r2,r5
10005a60:	1800521e 	bne	r3,zero,10005bac <_malloc_r+0x7a0>
10005a64:	6007883a 	mov	r3,r12
10005a68:	294b883a 	add	r5,r5,r5
10005a6c:	1148703a 	and	r4,r2,r5
10005a70:	18c00104 	addi	r3,r3,4
10005a74:	203ffc26 	beq	r4,zero,10005a68 <_malloc_r+0x65c>
10005a78:	003ef006 	br	1000563c <_malloc_r+0x230>
10005a7c:	00805504 	movi	r2,340
10005a80:	10c01336 	bltu	r2,r3,10005ad0 <_malloc_r+0x6c4>
10005a84:	8806d3fa 	srli	r3,r17,15
10005a88:	19c01dc4 	addi	r7,r3,119
10005a8c:	39cb883a 	add	r5,r7,r7
10005a90:	003ea206 	br	1000551c <_malloc_r+0x110>
10005a94:	00c40004 	movi	r3,4096
10005a98:	003f4d06 	br	100057d0 <_malloc_r+0x3c4>
10005a9c:	00800044 	movi	r2,1
10005aa0:	a0800115 	stw	r2,4(r20)
10005aa4:	a021883a 	mov	r16,r20
10005aa8:	0007883a 	mov	r3,zero
10005aac:	003f7506 	br	10005884 <_malloc_r+0x478>
10005ab0:	200bd0ba 	srai	r5,r4,2
10005ab4:	01800044 	movi	r6,1
10005ab8:	41000117 	ldw	r4,4(r8)
10005abc:	314a983a 	sll	r5,r6,r5
10005ac0:	100d883a 	mov	r6,r2
10005ac4:	2908b03a 	or	r4,r5,r4
10005ac8:	41000115 	stw	r4,4(r8)
10005acc:	003f9d06 	br	10005944 <_malloc_r+0x538>
10005ad0:	00815504 	movi	r2,1364
10005ad4:	10c01336 	bltu	r2,r3,10005b24 <_malloc_r+0x718>
10005ad8:	8806d4ba 	srli	r3,r17,18
10005adc:	19c01f04 	addi	r7,r3,124
10005ae0:	39cb883a 	add	r5,r7,r7
10005ae4:	003e8d06 	br	1000551c <_malloc_r+0x110>
10005ae8:	ad400404 	addi	r21,r21,16
10005aec:	003f1d06 	br	10005764 <_malloc_r+0x358>
10005af0:	01001504 	movi	r4,84
10005af4:	20801c36 	bltu	r4,r2,10005b68 <_malloc_r+0x75c>
10005af8:	3804d33a 	srli	r2,r7,12
10005afc:	11001b84 	addi	r4,r2,110
10005b00:	210b883a 	add	r5,r4,r4
10005b04:	003f8006 	br	10005908 <_malloc_r+0x4fc>
10005b08:	3083ffcc 	andi	r2,r6,4095
10005b0c:	103f241e 	bne	r2,zero,100057a0 <_malloc_r+0x394>
10005b10:	99000217 	ldw	r4,8(r19)
10005b14:	ad85883a 	add	r2,r21,r22
10005b18:	10800054 	ori	r2,r2,1
10005b1c:	20800115 	stw	r2,4(r4)
10005b20:	003f4a06 	br	1000584c <_malloc_r+0x440>
10005b24:	01403f04 	movi	r5,252
10005b28:	01c01f84 	movi	r7,126
10005b2c:	003e7b06 	br	1000551c <_malloc_r+0x110>
10005b30:	00c00044 	movi	r3,1
10005b34:	002b883a 	mov	r21,zero
10005b38:	003f3006 	br	100057fc <_malloc_r+0x3f0>
10005b3c:	00840074 	movhi	r2,4097
10005b40:	1084e204 	addi	r2,r2,5000
10005b44:	15000015 	stw	r20,0(r2)
10005b48:	003f1b06 	br	100057b8 <_malloc_r+0x3ac>
10005b4c:	9009883a 	mov	r4,r18
10005b50:	81400204 	addi	r5,r16,8
10005b54:	00048700 	call	10004870 <_free_r>
10005b58:	00840074 	movhi	r2,4097
10005b5c:	108bb904 	addi	r2,r2,12004
10005b60:	10c00017 	ldw	r3,0(r2)
10005b64:	003f3906 	br	1000584c <_malloc_r+0x440>
10005b68:	01005504 	movi	r4,340
10005b6c:	20800436 	bltu	r4,r2,10005b80 <_malloc_r+0x774>
10005b70:	3804d3fa 	srli	r2,r7,15
10005b74:	11001dc4 	addi	r4,r2,119
10005b78:	210b883a 	add	r5,r4,r4
10005b7c:	003f6206 	br	10005908 <_malloc_r+0x4fc>
10005b80:	01015504 	movi	r4,1364
10005b84:	20800436 	bltu	r4,r2,10005b98 <_malloc_r+0x78c>
10005b88:	3804d4ba 	srli	r2,r7,18
10005b8c:	11001f04 	addi	r4,r2,124
10005b90:	210b883a 	add	r5,r4,r4
10005b94:	003f5c06 	br	10005908 <_malloc_r+0x4fc>
10005b98:	01403f04 	movi	r5,252
10005b9c:	01001f84 	movi	r4,126
10005ba0:	003f5906 	br	10005908 <_malloc_r+0x4fc>
10005ba4:	98800117 	ldw	r2,4(r19)
10005ba8:	003fa906 	br	10005a50 <_malloc_r+0x644>
10005bac:	6007883a 	mov	r3,r12
10005bb0:	003ea206 	br	1000563c <_malloc_r+0x230>

10005bb4 <memchr>:
10005bb4:	208000cc 	andi	r2,r4,3
10005bb8:	280f883a 	mov	r7,r5
10005bbc:	10003526 	beq	r2,zero,10005c94 <memchr+0xe0>
10005bc0:	30bfffc4 	addi	r2,r6,-1
10005bc4:	30001b26 	beq	r6,zero,10005c34 <memchr+0x80>
10005bc8:	21800003 	ldbu	r6,0(r4)
10005bcc:	28c03fcc 	andi	r3,r5,255
10005bd0:	30c01a26 	beq	r6,r3,10005c3c <memchr+0x88>
10005bd4:	180d883a 	mov	r6,r3
10005bd8:	00000406 	br	10005bec <memchr+0x38>
10005bdc:	10001526 	beq	r2,zero,10005c34 <memchr+0x80>
10005be0:	20c00003 	ldbu	r3,0(r4)
10005be4:	10bfffc4 	addi	r2,r2,-1
10005be8:	19801426 	beq	r3,r6,10005c3c <memchr+0x88>
10005bec:	21000044 	addi	r4,r4,1
10005bf0:	20c000cc 	andi	r3,r4,3
10005bf4:	183ff91e 	bne	r3,zero,10005bdc <memchr+0x28>
10005bf8:	024000c4 	movi	r9,3
10005bfc:	48801136 	bltu	r9,r2,10005c44 <memchr+0x90>
10005c00:	10000c26 	beq	r2,zero,10005c34 <memchr+0x80>
10005c04:	20c00003 	ldbu	r3,0(r4)
10005c08:	29403fcc 	andi	r5,r5,255
10005c0c:	19400b26 	beq	r3,r5,10005c3c <memchr+0x88>
10005c10:	20c00044 	addi	r3,r4,1
10005c14:	2085883a 	add	r2,r4,r2
10005c18:	39803fcc 	andi	r6,r7,255
10005c1c:	00000306 	br	10005c2c <memchr+0x78>
10005c20:	18c00044 	addi	r3,r3,1
10005c24:	197fffc3 	ldbu	r5,-1(r3)
10005c28:	29800426 	beq	r5,r6,10005c3c <memchr+0x88>
10005c2c:	1809883a 	mov	r4,r3
10005c30:	18bffb1e 	bne	r3,r2,10005c20 <memchr+0x6c>
10005c34:	0005883a 	mov	r2,zero
10005c38:	f800283a 	ret
10005c3c:	2005883a 	mov	r2,r4
10005c40:	f800283a 	ret
10005c44:	28c03fcc 	andi	r3,r5,255
10005c48:	1810923a 	slli	r8,r3,8
10005c4c:	02ffbff4 	movhi	r11,65279
10005c50:	02a02074 	movhi	r10,32897
10005c54:	40c6b03a 	or	r3,r8,r3
10005c58:	1810943a 	slli	r8,r3,16
10005c5c:	5affbfc4 	addi	r11,r11,-257
10005c60:	52a02004 	addi	r10,r10,-32640
10005c64:	40d0b03a 	or	r8,r8,r3
10005c68:	20c00017 	ldw	r3,0(r4)
10005c6c:	40c6f03a 	xor	r3,r8,r3
10005c70:	1acd883a 	add	r6,r3,r11
10005c74:	00c6303a 	nor	r3,zero,r3
10005c78:	30c6703a 	and	r3,r6,r3
10005c7c:	1a86703a 	and	r3,r3,r10
10005c80:	183fdf1e 	bne	r3,zero,10005c00 <memchr+0x4c>
10005c84:	10bfff04 	addi	r2,r2,-4
10005c88:	21000104 	addi	r4,r4,4
10005c8c:	48bff636 	bltu	r9,r2,10005c68 <memchr+0xb4>
10005c90:	003fdb06 	br	10005c00 <memchr+0x4c>
10005c94:	3005883a 	mov	r2,r6
10005c98:	003fd706 	br	10005bf8 <memchr+0x44>

10005c9c <memcpy>:
10005c9c:	deffff04 	addi	sp,sp,-4
10005ca0:	dc000015 	stw	r16,0(sp)
10005ca4:	00c003c4 	movi	r3,15
10005ca8:	2005883a 	mov	r2,r4
10005cac:	1980432e 	bgeu	r3,r6,10005dbc <memcpy+0x120>
10005cb0:	2146b03a 	or	r3,r4,r5
10005cb4:	18c000cc 	andi	r3,r3,3
10005cb8:	1800421e 	bne	r3,zero,10005dc4 <memcpy+0x128>
10005cbc:	343ffc04 	addi	r16,r6,-16
10005cc0:	8020d13a 	srli	r16,r16,4
10005cc4:	28c00104 	addi	r3,r5,4
10005cc8:	23400104 	addi	r13,r4,4
10005ccc:	801e913a 	slli	r15,r16,4
10005cd0:	2b000204 	addi	r12,r5,8
10005cd4:	22c00204 	addi	r11,r4,8
10005cd8:	7bc00504 	addi	r15,r15,20
10005cdc:	2a800304 	addi	r10,r5,12
10005ce0:	22400304 	addi	r9,r4,12
10005ce4:	2bdf883a 	add	r15,r5,r15
10005ce8:	2811883a 	mov	r8,r5
10005cec:	200f883a 	mov	r7,r4
10005cf0:	41000017 	ldw	r4,0(r8)
10005cf4:	39c00404 	addi	r7,r7,16
10005cf8:	18c00404 	addi	r3,r3,16
10005cfc:	393ffc15 	stw	r4,-16(r7)
10005d00:	1bbffc17 	ldw	r14,-16(r3)
10005d04:	6b400404 	addi	r13,r13,16
10005d08:	5ac00404 	addi	r11,r11,16
10005d0c:	6bbffc15 	stw	r14,-16(r13)
10005d10:	63800017 	ldw	r14,0(r12)
10005d14:	4a400404 	addi	r9,r9,16
10005d18:	42000404 	addi	r8,r8,16
10005d1c:	5bbffc15 	stw	r14,-16(r11)
10005d20:	53800017 	ldw	r14,0(r10)
10005d24:	63000404 	addi	r12,r12,16
10005d28:	52800404 	addi	r10,r10,16
10005d2c:	4bbffc15 	stw	r14,-16(r9)
10005d30:	1bffef1e 	bne	r3,r15,10005cf0 <memcpy+0x54>
10005d34:	81c00044 	addi	r7,r16,1
10005d38:	380e913a 	slli	r7,r7,4
10005d3c:	310003cc 	andi	r4,r6,15
10005d40:	02c000c4 	movi	r11,3
10005d44:	11c7883a 	add	r3,r2,r7
10005d48:	29cb883a 	add	r5,r5,r7
10005d4c:	59001f2e 	bgeu	r11,r4,10005dcc <memcpy+0x130>
10005d50:	1813883a 	mov	r9,r3
10005d54:	2811883a 	mov	r8,r5
10005d58:	200f883a 	mov	r7,r4
10005d5c:	42800017 	ldw	r10,0(r8)
10005d60:	4a400104 	addi	r9,r9,4
10005d64:	39ffff04 	addi	r7,r7,-4
10005d68:	4abfff15 	stw	r10,-4(r9)
10005d6c:	42000104 	addi	r8,r8,4
10005d70:	59fffa36 	bltu	r11,r7,10005d5c <memcpy+0xc0>
10005d74:	213fff04 	addi	r4,r4,-4
10005d78:	2008d0ba 	srli	r4,r4,2
10005d7c:	318000cc 	andi	r6,r6,3
10005d80:	21000044 	addi	r4,r4,1
10005d84:	2109883a 	add	r4,r4,r4
10005d88:	2109883a 	add	r4,r4,r4
10005d8c:	1907883a 	add	r3,r3,r4
10005d90:	290b883a 	add	r5,r5,r4
10005d94:	30000626 	beq	r6,zero,10005db0 <memcpy+0x114>
10005d98:	198d883a 	add	r6,r3,r6
10005d9c:	29c00003 	ldbu	r7,0(r5)
10005da0:	18c00044 	addi	r3,r3,1
10005da4:	29400044 	addi	r5,r5,1
10005da8:	19ffffc5 	stb	r7,-1(r3)
10005dac:	19bffb1e 	bne	r3,r6,10005d9c <memcpy+0x100>
10005db0:	dc000017 	ldw	r16,0(sp)
10005db4:	dec00104 	addi	sp,sp,4
10005db8:	f800283a 	ret
10005dbc:	2007883a 	mov	r3,r4
10005dc0:	003ff406 	br	10005d94 <memcpy+0xf8>
10005dc4:	2007883a 	mov	r3,r4
10005dc8:	003ff306 	br	10005d98 <memcpy+0xfc>
10005dcc:	200d883a 	mov	r6,r4
10005dd0:	003ff006 	br	10005d94 <memcpy+0xf8>

10005dd4 <memmove>:
10005dd4:	2005883a 	mov	r2,r4
10005dd8:	29000b2e 	bgeu	r5,r4,10005e08 <memmove+0x34>
10005ddc:	298f883a 	add	r7,r5,r6
10005de0:	21c0092e 	bgeu	r4,r7,10005e08 <memmove+0x34>
10005de4:	2187883a 	add	r3,r4,r6
10005de8:	198bc83a 	sub	r5,r3,r6
10005dec:	30004b26 	beq	r6,zero,10005f1c <memmove+0x148>
10005df0:	39ffffc4 	addi	r7,r7,-1
10005df4:	39000003 	ldbu	r4,0(r7)
10005df8:	18ffffc4 	addi	r3,r3,-1
10005dfc:	19000005 	stb	r4,0(r3)
10005e00:	197ffb1e 	bne	r3,r5,10005df0 <memmove+0x1c>
10005e04:	f800283a 	ret
10005e08:	00c003c4 	movi	r3,15
10005e0c:	1980412e 	bgeu	r3,r6,10005f14 <memmove+0x140>
10005e10:	1146b03a 	or	r3,r2,r5
10005e14:	18c000cc 	andi	r3,r3,3
10005e18:	1800411e 	bne	r3,zero,10005f20 <memmove+0x14c>
10005e1c:	33fffc04 	addi	r15,r6,-16
10005e20:	781ed13a 	srli	r15,r15,4
10005e24:	28c00104 	addi	r3,r5,4
10005e28:	13400104 	addi	r13,r2,4
10005e2c:	781c913a 	slli	r14,r15,4
10005e30:	2b000204 	addi	r12,r5,8
10005e34:	12c00204 	addi	r11,r2,8
10005e38:	73800504 	addi	r14,r14,20
10005e3c:	2a800304 	addi	r10,r5,12
10005e40:	12400304 	addi	r9,r2,12
10005e44:	2b9d883a 	add	r14,r5,r14
10005e48:	2811883a 	mov	r8,r5
10005e4c:	100f883a 	mov	r7,r2
10005e50:	41000017 	ldw	r4,0(r8)
10005e54:	39c00404 	addi	r7,r7,16
10005e58:	18c00404 	addi	r3,r3,16
10005e5c:	393ffc15 	stw	r4,-16(r7)
10005e60:	193ffc17 	ldw	r4,-16(r3)
10005e64:	6b400404 	addi	r13,r13,16
10005e68:	5ac00404 	addi	r11,r11,16
10005e6c:	693ffc15 	stw	r4,-16(r13)
10005e70:	61000017 	ldw	r4,0(r12)
10005e74:	4a400404 	addi	r9,r9,16
10005e78:	42000404 	addi	r8,r8,16
10005e7c:	593ffc15 	stw	r4,-16(r11)
10005e80:	51000017 	ldw	r4,0(r10)
10005e84:	63000404 	addi	r12,r12,16
10005e88:	52800404 	addi	r10,r10,16
10005e8c:	493ffc15 	stw	r4,-16(r9)
10005e90:	1bbfef1e 	bne	r3,r14,10005e50 <memmove+0x7c>
10005e94:	79000044 	addi	r4,r15,1
10005e98:	2008913a 	slli	r4,r4,4
10005e9c:	328003cc 	andi	r10,r6,15
10005ea0:	02c000c4 	movi	r11,3
10005ea4:	1107883a 	add	r3,r2,r4
10005ea8:	290b883a 	add	r5,r5,r4
10005eac:	5a801e2e 	bgeu	r11,r10,10005f28 <memmove+0x154>
10005eb0:	1813883a 	mov	r9,r3
10005eb4:	2811883a 	mov	r8,r5
10005eb8:	500f883a 	mov	r7,r10
10005ebc:	41000017 	ldw	r4,0(r8)
10005ec0:	4a400104 	addi	r9,r9,4
10005ec4:	39ffff04 	addi	r7,r7,-4
10005ec8:	493fff15 	stw	r4,-4(r9)
10005ecc:	42000104 	addi	r8,r8,4
10005ed0:	59fffa36 	bltu	r11,r7,10005ebc <memmove+0xe8>
10005ed4:	513fff04 	addi	r4,r10,-4
10005ed8:	2008d0ba 	srli	r4,r4,2
10005edc:	318000cc 	andi	r6,r6,3
10005ee0:	21000044 	addi	r4,r4,1
10005ee4:	2109883a 	add	r4,r4,r4
10005ee8:	2109883a 	add	r4,r4,r4
10005eec:	1907883a 	add	r3,r3,r4
10005ef0:	290b883a 	add	r5,r5,r4
10005ef4:	30000926 	beq	r6,zero,10005f1c <memmove+0x148>
10005ef8:	198d883a 	add	r6,r3,r6
10005efc:	29c00003 	ldbu	r7,0(r5)
10005f00:	18c00044 	addi	r3,r3,1
10005f04:	29400044 	addi	r5,r5,1
10005f08:	19ffffc5 	stb	r7,-1(r3)
10005f0c:	19bffb1e 	bne	r3,r6,10005efc <memmove+0x128>
10005f10:	f800283a 	ret
10005f14:	1007883a 	mov	r3,r2
10005f18:	003ff606 	br	10005ef4 <memmove+0x120>
10005f1c:	f800283a 	ret
10005f20:	1007883a 	mov	r3,r2
10005f24:	003ff406 	br	10005ef8 <memmove+0x124>
10005f28:	500d883a 	mov	r6,r10
10005f2c:	003ff106 	br	10005ef4 <memmove+0x120>

10005f30 <memset>:
10005f30:	20c000cc 	andi	r3,r4,3
10005f34:	2005883a 	mov	r2,r4
10005f38:	18004326 	beq	r3,zero,10006048 <memset+0x118>
10005f3c:	31ffffc4 	addi	r7,r6,-1
10005f40:	30004026 	beq	r6,zero,10006044 <memset+0x114>
10005f44:	2813883a 	mov	r9,r5
10005f48:	200d883a 	mov	r6,r4
10005f4c:	2007883a 	mov	r3,r4
10005f50:	00000406 	br	10005f64 <memset+0x34>
10005f54:	3a3fffc4 	addi	r8,r7,-1
10005f58:	31800044 	addi	r6,r6,1
10005f5c:	38003926 	beq	r7,zero,10006044 <memset+0x114>
10005f60:	400f883a 	mov	r7,r8
10005f64:	18c00044 	addi	r3,r3,1
10005f68:	32400005 	stb	r9,0(r6)
10005f6c:	1a0000cc 	andi	r8,r3,3
10005f70:	403ff81e 	bne	r8,zero,10005f54 <memset+0x24>
10005f74:	010000c4 	movi	r4,3
10005f78:	21c02d2e 	bgeu	r4,r7,10006030 <memset+0x100>
10005f7c:	29803fcc 	andi	r6,r5,255
10005f80:	3008923a 	slli	r4,r6,8
10005f84:	218cb03a 	or	r6,r4,r6
10005f88:	3008943a 	slli	r4,r6,16
10005f8c:	218cb03a 	or	r6,r4,r6
10005f90:	010003c4 	movi	r4,15
10005f94:	21c0182e 	bgeu	r4,r7,10005ff8 <memset+0xc8>
10005f98:	3b3ffc04 	addi	r12,r7,-16
10005f9c:	6018d13a 	srli	r12,r12,4
10005fa0:	1a000104 	addi	r8,r3,4
10005fa4:	1ac00204 	addi	r11,r3,8
10005fa8:	6008913a 	slli	r4,r12,4
10005fac:	1a800304 	addi	r10,r3,12
10005fb0:	1813883a 	mov	r9,r3
10005fb4:	21000504 	addi	r4,r4,20
10005fb8:	1909883a 	add	r4,r3,r4
10005fbc:	49800015 	stw	r6,0(r9)
10005fc0:	41800015 	stw	r6,0(r8)
10005fc4:	59800015 	stw	r6,0(r11)
10005fc8:	51800015 	stw	r6,0(r10)
10005fcc:	42000404 	addi	r8,r8,16
10005fd0:	4a400404 	addi	r9,r9,16
10005fd4:	5ac00404 	addi	r11,r11,16
10005fd8:	52800404 	addi	r10,r10,16
10005fdc:	413ff71e 	bne	r8,r4,10005fbc <memset+0x8c>
10005fe0:	63000044 	addi	r12,r12,1
10005fe4:	6018913a 	slli	r12,r12,4
10005fe8:	39c003cc 	andi	r7,r7,15
10005fec:	010000c4 	movi	r4,3
10005ff0:	1b07883a 	add	r3,r3,r12
10005ff4:	21c00e2e 	bgeu	r4,r7,10006030 <memset+0x100>
10005ff8:	1813883a 	mov	r9,r3
10005ffc:	3811883a 	mov	r8,r7
10006000:	010000c4 	movi	r4,3
10006004:	49800015 	stw	r6,0(r9)
10006008:	423fff04 	addi	r8,r8,-4
1000600c:	4a400104 	addi	r9,r9,4
10006010:	223ffc36 	bltu	r4,r8,10006004 <memset+0xd4>
10006014:	393fff04 	addi	r4,r7,-4
10006018:	2008d0ba 	srli	r4,r4,2
1000601c:	39c000cc 	andi	r7,r7,3
10006020:	21000044 	addi	r4,r4,1
10006024:	2109883a 	add	r4,r4,r4
10006028:	2109883a 	add	r4,r4,r4
1000602c:	1907883a 	add	r3,r3,r4
10006030:	38000426 	beq	r7,zero,10006044 <memset+0x114>
10006034:	19cf883a 	add	r7,r3,r7
10006038:	19400005 	stb	r5,0(r3)
1000603c:	18c00044 	addi	r3,r3,1
10006040:	19fffd1e 	bne	r3,r7,10006038 <memset+0x108>
10006044:	f800283a 	ret
10006048:	2007883a 	mov	r3,r4
1000604c:	300f883a 	mov	r7,r6
10006050:	003fc806 	br	10005f74 <memset+0x44>

10006054 <_Balloc>:
10006054:	20801317 	ldw	r2,76(r4)
10006058:	defffc04 	addi	sp,sp,-16
1000605c:	dc400115 	stw	r17,4(sp)
10006060:	dc000015 	stw	r16,0(sp)
10006064:	dfc00315 	stw	ra,12(sp)
10006068:	dc800215 	stw	r18,8(sp)
1000606c:	2023883a 	mov	r17,r4
10006070:	2821883a 	mov	r16,r5
10006074:	10000f26 	beq	r2,zero,100060b4 <_Balloc+0x60>
10006078:	8407883a 	add	r3,r16,r16
1000607c:	18c7883a 	add	r3,r3,r3
10006080:	10c7883a 	add	r3,r2,r3
10006084:	18800017 	ldw	r2,0(r3)
10006088:	10001126 	beq	r2,zero,100060d0 <_Balloc+0x7c>
1000608c:	11000017 	ldw	r4,0(r2)
10006090:	19000015 	stw	r4,0(r3)
10006094:	10000415 	stw	zero,16(r2)
10006098:	10000315 	stw	zero,12(r2)
1000609c:	dfc00317 	ldw	ra,12(sp)
100060a0:	dc800217 	ldw	r18,8(sp)
100060a4:	dc400117 	ldw	r17,4(sp)
100060a8:	dc000017 	ldw	r16,0(sp)
100060ac:	dec00404 	addi	sp,sp,16
100060b0:	f800283a 	ret
100060b4:	01400104 	movi	r5,4
100060b8:	01800844 	movi	r6,33
100060bc:	00091c80 	call	100091c8 <_calloc_r>
100060c0:	88801315 	stw	r2,76(r17)
100060c4:	103fec1e 	bne	r2,zero,10006078 <_Balloc+0x24>
100060c8:	0005883a 	mov	r2,zero
100060cc:	003ff306 	br	1000609c <_Balloc+0x48>
100060d0:	01400044 	movi	r5,1
100060d4:	2c24983a 	sll	r18,r5,r16
100060d8:	8809883a 	mov	r4,r17
100060dc:	91800144 	addi	r6,r18,5
100060e0:	318d883a 	add	r6,r6,r6
100060e4:	318d883a 	add	r6,r6,r6
100060e8:	00091c80 	call	100091c8 <_calloc_r>
100060ec:	103ff626 	beq	r2,zero,100060c8 <_Balloc+0x74>
100060f0:	14000115 	stw	r16,4(r2)
100060f4:	14800215 	stw	r18,8(r2)
100060f8:	003fe606 	br	10006094 <_Balloc+0x40>

100060fc <_Bfree>:
100060fc:	28000826 	beq	r5,zero,10006120 <_Bfree+0x24>
10006100:	28c00117 	ldw	r3,4(r5)
10006104:	20801317 	ldw	r2,76(r4)
10006108:	18c7883a 	add	r3,r3,r3
1000610c:	18c7883a 	add	r3,r3,r3
10006110:	10c5883a 	add	r2,r2,r3
10006114:	10c00017 	ldw	r3,0(r2)
10006118:	28c00015 	stw	r3,0(r5)
1000611c:	11400015 	stw	r5,0(r2)
10006120:	f800283a 	ret

10006124 <__multadd>:
10006124:	defff704 	addi	sp,sp,-36
10006128:	dc800215 	stw	r18,8(sp)
1000612c:	2c800417 	ldw	r18,16(r5)
10006130:	ddc00715 	stw	r23,28(sp)
10006134:	dd800615 	stw	r22,24(sp)
10006138:	dd000415 	stw	r20,16(sp)
1000613c:	dcc00315 	stw	r19,12(sp)
10006140:	dc400115 	stw	r17,4(sp)
10006144:	dc000015 	stw	r16,0(sp)
10006148:	dfc00815 	stw	ra,32(sp)
1000614c:	dd400515 	stw	r21,20(sp)
10006150:	2827883a 	mov	r19,r5
10006154:	2029883a 	mov	r20,r4
10006158:	3023883a 	mov	r17,r6
1000615c:	3821883a 	mov	r16,r7
10006160:	2d800504 	addi	r22,r5,20
10006164:	002f883a 	mov	r23,zero
10006168:	b5400017 	ldw	r21,0(r22)
1000616c:	880b883a 	mov	r5,r17
10006170:	bdc00044 	addi	r23,r23,1
10006174:	a93fffcc 	andi	r4,r21,65535
10006178:	000a67c0 	call	1000a67c <__mulsi3>
1000617c:	1421883a 	add	r16,r2,r16
10006180:	a808d43a 	srli	r4,r21,16
10006184:	802ad43a 	srli	r21,r16,16
10006188:	880b883a 	mov	r5,r17
1000618c:	000a67c0 	call	1000a67c <__mulsi3>
10006190:	a88f883a 	add	r7,r21,r2
10006194:	3804943a 	slli	r2,r7,16
10006198:	80ffffcc 	andi	r3,r16,65535
1000619c:	b5800104 	addi	r22,r22,4
100061a0:	10c7883a 	add	r3,r2,r3
100061a4:	b0ffff15 	stw	r3,-4(r22)
100061a8:	3820d43a 	srli	r16,r7,16
100061ac:	bcbfee16 	blt	r23,r18,10006168 <__multadd+0x44>
100061b0:	80000926 	beq	r16,zero,100061d8 <__multadd+0xb4>
100061b4:	98800217 	ldw	r2,8(r19)
100061b8:	9080130e 	bge	r18,r2,10006208 <__multadd+0xe4>
100061bc:	90800144 	addi	r2,r18,5
100061c0:	1085883a 	add	r2,r2,r2
100061c4:	1085883a 	add	r2,r2,r2
100061c8:	9885883a 	add	r2,r19,r2
100061cc:	14000015 	stw	r16,0(r2)
100061d0:	94800044 	addi	r18,r18,1
100061d4:	9c800415 	stw	r18,16(r19)
100061d8:	9805883a 	mov	r2,r19
100061dc:	dfc00817 	ldw	ra,32(sp)
100061e0:	ddc00717 	ldw	r23,28(sp)
100061e4:	dd800617 	ldw	r22,24(sp)
100061e8:	dd400517 	ldw	r21,20(sp)
100061ec:	dd000417 	ldw	r20,16(sp)
100061f0:	dcc00317 	ldw	r19,12(sp)
100061f4:	dc800217 	ldw	r18,8(sp)
100061f8:	dc400117 	ldw	r17,4(sp)
100061fc:	dc000017 	ldw	r16,0(sp)
10006200:	dec00904 	addi	sp,sp,36
10006204:	f800283a 	ret
10006208:	99400117 	ldw	r5,4(r19)
1000620c:	a009883a 	mov	r4,r20
10006210:	29400044 	addi	r5,r5,1
10006214:	00060540 	call	10006054 <_Balloc>
10006218:	99800417 	ldw	r6,16(r19)
1000621c:	99400304 	addi	r5,r19,12
10006220:	11000304 	addi	r4,r2,12
10006224:	31800084 	addi	r6,r6,2
10006228:	318d883a 	add	r6,r6,r6
1000622c:	318d883a 	add	r6,r6,r6
10006230:	1023883a 	mov	r17,r2
10006234:	0005c9c0 	call	10005c9c <memcpy>
10006238:	99000117 	ldw	r4,4(r19)
1000623c:	a0c01317 	ldw	r3,76(r20)
10006240:	2109883a 	add	r4,r4,r4
10006244:	2109883a 	add	r4,r4,r4
10006248:	1907883a 	add	r3,r3,r4
1000624c:	18800017 	ldw	r2,0(r3)
10006250:	98800015 	stw	r2,0(r19)
10006254:	1cc00015 	stw	r19,0(r3)
10006258:	8827883a 	mov	r19,r17
1000625c:	003fd706 	br	100061bc <__multadd+0x98>

10006260 <__s2b>:
10006260:	defff904 	addi	sp,sp,-28
10006264:	dc400115 	stw	r17,4(sp)
10006268:	dc000015 	stw	r16,0(sp)
1000626c:	2023883a 	mov	r17,r4
10006270:	2821883a 	mov	r16,r5
10006274:	39000204 	addi	r4,r7,8
10006278:	01400244 	movi	r5,9
1000627c:	dcc00315 	stw	r19,12(sp)
10006280:	dc800215 	stw	r18,8(sp)
10006284:	dfc00615 	stw	ra,24(sp)
10006288:	dd400515 	stw	r21,20(sp)
1000628c:	dd000415 	stw	r20,16(sp)
10006290:	3825883a 	mov	r18,r7
10006294:	3027883a 	mov	r19,r6
10006298:	000a5bc0 	call	1000a5bc <__divsi3>
1000629c:	00c00044 	movi	r3,1
100062a0:	000b883a 	mov	r5,zero
100062a4:	1880030e 	bge	r3,r2,100062b4 <__s2b+0x54>
100062a8:	18c7883a 	add	r3,r3,r3
100062ac:	29400044 	addi	r5,r5,1
100062b0:	18bffd16 	blt	r3,r2,100062a8 <__s2b+0x48>
100062b4:	8809883a 	mov	r4,r17
100062b8:	00060540 	call	10006054 <_Balloc>
100062bc:	d8c00717 	ldw	r3,28(sp)
100062c0:	10c00515 	stw	r3,20(r2)
100062c4:	00c00044 	movi	r3,1
100062c8:	10c00415 	stw	r3,16(r2)
100062cc:	00c00244 	movi	r3,9
100062d0:	1cc0210e 	bge	r3,r19,10006358 <__s2b+0xf8>
100062d4:	80eb883a 	add	r21,r16,r3
100062d8:	a829883a 	mov	r20,r21
100062dc:	84e1883a 	add	r16,r16,r19
100062e0:	a1c00007 	ldb	r7,0(r20)
100062e4:	8809883a 	mov	r4,r17
100062e8:	a5000044 	addi	r20,r20,1
100062ec:	100b883a 	mov	r5,r2
100062f0:	01800284 	movi	r6,10
100062f4:	39fff404 	addi	r7,r7,-48
100062f8:	00061240 	call	10006124 <__multadd>
100062fc:	a43ff81e 	bne	r20,r16,100062e0 <__s2b+0x80>
10006300:	ace1883a 	add	r16,r21,r19
10006304:	843ffe04 	addi	r16,r16,-8
10006308:	9c800a0e 	bge	r19,r18,10006334 <__s2b+0xd4>
1000630c:	94e5c83a 	sub	r18,r18,r19
10006310:	84a5883a 	add	r18,r16,r18
10006314:	81c00007 	ldb	r7,0(r16)
10006318:	8809883a 	mov	r4,r17
1000631c:	84000044 	addi	r16,r16,1
10006320:	100b883a 	mov	r5,r2
10006324:	01800284 	movi	r6,10
10006328:	39fff404 	addi	r7,r7,-48
1000632c:	00061240 	call	10006124 <__multadd>
10006330:	84bff81e 	bne	r16,r18,10006314 <__s2b+0xb4>
10006334:	dfc00617 	ldw	ra,24(sp)
10006338:	dd400517 	ldw	r21,20(sp)
1000633c:	dd000417 	ldw	r20,16(sp)
10006340:	dcc00317 	ldw	r19,12(sp)
10006344:	dc800217 	ldw	r18,8(sp)
10006348:	dc400117 	ldw	r17,4(sp)
1000634c:	dc000017 	ldw	r16,0(sp)
10006350:	dec00704 	addi	sp,sp,28
10006354:	f800283a 	ret
10006358:	84000284 	addi	r16,r16,10
1000635c:	1827883a 	mov	r19,r3
10006360:	003fe906 	br	10006308 <__s2b+0xa8>

10006364 <__hi0bits>:
10006364:	20bfffec 	andhi	r2,r4,65535
10006368:	1000141e 	bne	r2,zero,100063bc <__hi0bits+0x58>
1000636c:	2008943a 	slli	r4,r4,16
10006370:	00800404 	movi	r2,16
10006374:	20ffc02c 	andhi	r3,r4,65280
10006378:	1800021e 	bne	r3,zero,10006384 <__hi0bits+0x20>
1000637c:	2008923a 	slli	r4,r4,8
10006380:	10800204 	addi	r2,r2,8
10006384:	20fc002c 	andhi	r3,r4,61440
10006388:	1800021e 	bne	r3,zero,10006394 <__hi0bits+0x30>
1000638c:	2008913a 	slli	r4,r4,4
10006390:	10800104 	addi	r2,r2,4
10006394:	20f0002c 	andhi	r3,r4,49152
10006398:	1800031e 	bne	r3,zero,100063a8 <__hi0bits+0x44>
1000639c:	2109883a 	add	r4,r4,r4
100063a0:	10800084 	addi	r2,r2,2
100063a4:	2109883a 	add	r4,r4,r4
100063a8:	20000316 	blt	r4,zero,100063b8 <__hi0bits+0x54>
100063ac:	2110002c 	andhi	r4,r4,16384
100063b0:	2000041e 	bne	r4,zero,100063c4 <__hi0bits+0x60>
100063b4:	00800804 	movi	r2,32
100063b8:	f800283a 	ret
100063bc:	0005883a 	mov	r2,zero
100063c0:	003fec06 	br	10006374 <__hi0bits+0x10>
100063c4:	10800044 	addi	r2,r2,1
100063c8:	f800283a 	ret

100063cc <__lo0bits>:
100063cc:	20c00017 	ldw	r3,0(r4)
100063d0:	188001cc 	andi	r2,r3,7
100063d4:	10000826 	beq	r2,zero,100063f8 <__lo0bits+0x2c>
100063d8:	1880004c 	andi	r2,r3,1
100063dc:	1000211e 	bne	r2,zero,10006464 <__lo0bits+0x98>
100063e0:	1880008c 	andi	r2,r3,2
100063e4:	1000211e 	bne	r2,zero,1000646c <__lo0bits+0xa0>
100063e8:	1806d0ba 	srli	r3,r3,2
100063ec:	00800084 	movi	r2,2
100063f0:	20c00015 	stw	r3,0(r4)
100063f4:	f800283a 	ret
100063f8:	18bfffcc 	andi	r2,r3,65535
100063fc:	10001326 	beq	r2,zero,1000644c <__lo0bits+0x80>
10006400:	0005883a 	mov	r2,zero
10006404:	19403fcc 	andi	r5,r3,255
10006408:	2800021e 	bne	r5,zero,10006414 <__lo0bits+0x48>
1000640c:	1806d23a 	srli	r3,r3,8
10006410:	10800204 	addi	r2,r2,8
10006414:	194003cc 	andi	r5,r3,15
10006418:	2800021e 	bne	r5,zero,10006424 <__lo0bits+0x58>
1000641c:	1806d13a 	srli	r3,r3,4
10006420:	10800104 	addi	r2,r2,4
10006424:	194000cc 	andi	r5,r3,3
10006428:	2800021e 	bne	r5,zero,10006434 <__lo0bits+0x68>
1000642c:	1806d0ba 	srli	r3,r3,2
10006430:	10800084 	addi	r2,r2,2
10006434:	1940004c 	andi	r5,r3,1
10006438:	2800081e 	bne	r5,zero,1000645c <__lo0bits+0x90>
1000643c:	1806d07a 	srli	r3,r3,1
10006440:	1800051e 	bne	r3,zero,10006458 <__lo0bits+0x8c>
10006444:	00800804 	movi	r2,32
10006448:	f800283a 	ret
1000644c:	1806d43a 	srli	r3,r3,16
10006450:	00800404 	movi	r2,16
10006454:	003feb06 	br	10006404 <__lo0bits+0x38>
10006458:	10800044 	addi	r2,r2,1
1000645c:	20c00015 	stw	r3,0(r4)
10006460:	f800283a 	ret
10006464:	0005883a 	mov	r2,zero
10006468:	f800283a 	ret
1000646c:	1806d07a 	srli	r3,r3,1
10006470:	00800044 	movi	r2,1
10006474:	20c00015 	stw	r3,0(r4)
10006478:	f800283a 	ret

1000647c <__i2b>:
1000647c:	defffd04 	addi	sp,sp,-12
10006480:	dc000015 	stw	r16,0(sp)
10006484:	04000044 	movi	r16,1
10006488:	dc400115 	stw	r17,4(sp)
1000648c:	2823883a 	mov	r17,r5
10006490:	800b883a 	mov	r5,r16
10006494:	dfc00215 	stw	ra,8(sp)
10006498:	00060540 	call	10006054 <_Balloc>
1000649c:	14400515 	stw	r17,20(r2)
100064a0:	14000415 	stw	r16,16(r2)
100064a4:	dfc00217 	ldw	ra,8(sp)
100064a8:	dc400117 	ldw	r17,4(sp)
100064ac:	dc000017 	ldw	r16,0(sp)
100064b0:	dec00304 	addi	sp,sp,12
100064b4:	f800283a 	ret

100064b8 <__multiply>:
100064b8:	deffef04 	addi	sp,sp,-68
100064bc:	dc400815 	stw	r17,32(sp)
100064c0:	dc000715 	stw	r16,28(sp)
100064c4:	2c400417 	ldw	r17,16(r5)
100064c8:	34000417 	ldw	r16,16(r6)
100064cc:	dd800d15 	stw	r22,52(sp)
100064d0:	dc800915 	stw	r18,36(sp)
100064d4:	dfc01015 	stw	ra,64(sp)
100064d8:	df000f15 	stw	fp,60(sp)
100064dc:	ddc00e15 	stw	r23,56(sp)
100064e0:	dd400c15 	stw	r21,48(sp)
100064e4:	dd000b15 	stw	r20,44(sp)
100064e8:	dcc00a15 	stw	r19,40(sp)
100064ec:	2825883a 	mov	r18,r5
100064f0:	302d883a 	mov	r22,r6
100064f4:	8c009116 	blt	r17,r16,1000673c <__multiply+0x284>
100064f8:	8005883a 	mov	r2,r16
100064fc:	8821883a 	mov	r16,r17
10006500:	1023883a 	mov	r17,r2
10006504:	90800217 	ldw	r2,8(r18)
10006508:	8447883a 	add	r3,r16,r17
1000650c:	d8c00215 	stw	r3,8(sp)
10006510:	91400117 	ldw	r5,4(r18)
10006514:	10c0010e 	bge	r2,r3,1000651c <__multiply+0x64>
10006518:	29400044 	addi	r5,r5,1
1000651c:	00060540 	call	10006054 <_Balloc>
10006520:	d8c00217 	ldw	r3,8(sp)
10006524:	d8800615 	stw	r2,24(sp)
10006528:	18eb883a 	add	r21,r3,r3
1000652c:	ad6b883a 	add	r21,r21,r21
10006530:	10c00504 	addi	r3,r2,20
10006534:	1d6b883a 	add	r21,r3,r21
10006538:	d8c00115 	stw	r3,4(sp)
1000653c:	dd400315 	stw	r21,12(sp)
10006540:	1805883a 	mov	r2,r3
10006544:	1d40042e 	bgeu	r3,r21,10006558 <__multiply+0xa0>
10006548:	d8c00317 	ldw	r3,12(sp)
1000654c:	10000015 	stw	zero,0(r2)
10006550:	10800104 	addi	r2,r2,4
10006554:	10fffc36 	bltu	r2,r3,10006548 <__multiply+0x90>
10006558:	8c63883a 	add	r17,r17,r17
1000655c:	b5800504 	addi	r22,r22,20
10006560:	8c63883a 	add	r17,r17,r17
10006564:	94800504 	addi	r18,r18,20
10006568:	8421883a 	add	r16,r16,r16
1000656c:	b463883a 	add	r17,r22,r17
10006570:	8421883a 	add	r16,r16,r16
10006574:	dd800015 	stw	r22,0(sp)
10006578:	dc800415 	stw	r18,16(sp)
1000657c:	dc400515 	stw	r17,20(sp)
10006580:	9429883a 	add	r20,r18,r16
10006584:	b4404f2e 	bgeu	r22,r17,100066c4 <__multiply+0x20c>
10006588:	d8c00017 	ldw	r3,0(sp)
1000658c:	1c800017 	ldw	r18,0(r3)
10006590:	943fffcc 	andi	r16,r18,65535
10006594:	80001e26 	beq	r16,zero,10006610 <__multiply+0x158>
10006598:	dd800117 	ldw	r22,4(sp)
1000659c:	dd400417 	ldw	r21,16(sp)
100065a0:	0025883a 	mov	r18,zero
100065a4:	adc00017 	ldw	r23,0(r21)
100065a8:	b4c00017 	ldw	r19,0(r22)
100065ac:	800b883a 	mov	r5,r16
100065b0:	b93fffcc 	andi	r4,r23,65535
100065b4:	000a67c0 	call	1000a67c <__mulsi3>
100065b8:	9c7fffcc 	andi	r17,r19,65535
100065bc:	8885883a 	add	r2,r17,r2
100065c0:	b808d43a 	srli	r4,r23,16
100065c4:	14a3883a 	add	r17,r2,r18
100065c8:	9826d43a 	srli	r19,r19,16
100065cc:	8824d43a 	srli	r18,r17,16
100065d0:	800b883a 	mov	r5,r16
100065d4:	000a67c0 	call	1000a67c <__mulsi3>
100065d8:	9885883a 	add	r2,r19,r2
100065dc:	14a7883a 	add	r19,r2,r18
100065e0:	88ffffcc 	andi	r3,r17,65535
100065e4:	9822943a 	slli	r17,r19,16
100065e8:	ad400104 	addi	r21,r21,4
100065ec:	b005883a 	mov	r2,r22
100065f0:	88c6b03a 	or	r3,r17,r3
100065f4:	b0c00015 	stw	r3,0(r22)
100065f8:	9824d43a 	srli	r18,r19,16
100065fc:	b5800104 	addi	r22,r22,4
10006600:	ad3fe836 	bltu	r21,r20,100065a4 <__multiply+0xec>
10006604:	d8c00017 	ldw	r3,0(sp)
10006608:	14800115 	stw	r18,4(r2)
1000660c:	1c800017 	ldw	r18,0(r3)
10006610:	9024d43a 	srli	r18,r18,16
10006614:	90002226 	beq	r18,zero,100066a0 <__multiply+0x1e8>
10006618:	d8c00117 	ldw	r3,4(sp)
1000661c:	dd800417 	ldw	r22,16(sp)
10006620:	002f883a 	mov	r23,zero
10006624:	1f000017 	ldw	fp,0(r3)
10006628:	1823883a 	mov	r17,r3
1000662c:	182b883a 	mov	r21,r3
10006630:	e021883a 	mov	r16,fp
10006634:	00000106 	br	1000663c <__multiply+0x184>
10006638:	982b883a 	mov	r21,r19
1000663c:	b100000b 	ldhu	r4,0(r22)
10006640:	8020d43a 	srli	r16,r16,16
10006644:	900b883a 	mov	r5,r18
10006648:	000a67c0 	call	1000a67c <__mulsi3>
1000664c:	1405883a 	add	r2,r2,r16
10006650:	15ef883a 	add	r23,r2,r23
10006654:	b804943a 	slli	r2,r23,16
10006658:	e0ffffcc 	andi	r3,fp,65535
1000665c:	8c400104 	addi	r17,r17,4
10006660:	10c6b03a 	or	r3,r2,r3
10006664:	88ffff15 	stw	r3,-4(r17)
10006668:	b5800104 	addi	r22,r22,4
1000666c:	b13fff17 	ldw	r4,-4(r22)
10006670:	acc00104 	addi	r19,r21,4
10006674:	900b883a 	mov	r5,r18
10006678:	2008d43a 	srli	r4,r4,16
1000667c:	9c000017 	ldw	r16,0(r19)
10006680:	000a67c0 	call	1000a67c <__mulsi3>
10006684:	b806d43a 	srli	r3,r23,16
10006688:	813fffcc 	andi	r4,r16,65535
1000668c:	1105883a 	add	r2,r2,r4
10006690:	10f9883a 	add	fp,r2,r3
10006694:	e02ed43a 	srli	r23,fp,16
10006698:	b53fe736 	bltu	r22,r20,10006638 <__multiply+0x180>
1000669c:	af000115 	stw	fp,4(r21)
100066a0:	d8c00017 	ldw	r3,0(sp)
100066a4:	d9000517 	ldw	r4,20(sp)
100066a8:	18c00104 	addi	r3,r3,4
100066ac:	d8c00015 	stw	r3,0(sp)
100066b0:	d8c00117 	ldw	r3,4(sp)
100066b4:	18c00104 	addi	r3,r3,4
100066b8:	d8c00115 	stw	r3,4(sp)
100066bc:	d8c00017 	ldw	r3,0(sp)
100066c0:	193fb136 	bltu	r3,r4,10006588 <__multiply+0xd0>
100066c4:	d8c00217 	ldw	r3,8(sp)
100066c8:	00c00c0e 	bge	zero,r3,100066fc <__multiply+0x244>
100066cc:	d8c00317 	ldw	r3,12(sp)
100066d0:	18bfff17 	ldw	r2,-4(r3)
100066d4:	1d7fff04 	addi	r21,r3,-4
100066d8:	10000326 	beq	r2,zero,100066e8 <__multiply+0x230>
100066dc:	00000706 	br	100066fc <__multiply+0x244>
100066e0:	a8800017 	ldw	r2,0(r21)
100066e4:	1000051e 	bne	r2,zero,100066fc <__multiply+0x244>
100066e8:	d8c00217 	ldw	r3,8(sp)
100066ec:	ad7fff04 	addi	r21,r21,-4
100066f0:	18ffffc4 	addi	r3,r3,-1
100066f4:	d8c00215 	stw	r3,8(sp)
100066f8:	183ff91e 	bne	r3,zero,100066e0 <__multiply+0x228>
100066fc:	d8c00617 	ldw	r3,24(sp)
10006700:	d9000217 	ldw	r4,8(sp)
10006704:	1805883a 	mov	r2,r3
10006708:	19000415 	stw	r4,16(r3)
1000670c:	dfc01017 	ldw	ra,64(sp)
10006710:	df000f17 	ldw	fp,60(sp)
10006714:	ddc00e17 	ldw	r23,56(sp)
10006718:	dd800d17 	ldw	r22,52(sp)
1000671c:	dd400c17 	ldw	r21,48(sp)
10006720:	dd000b17 	ldw	r20,44(sp)
10006724:	dcc00a17 	ldw	r19,40(sp)
10006728:	dc800917 	ldw	r18,36(sp)
1000672c:	dc400817 	ldw	r17,32(sp)
10006730:	dc000717 	ldw	r16,28(sp)
10006734:	dec01104 	addi	sp,sp,68
10006738:	f800283a 	ret
1000673c:	3025883a 	mov	r18,r6
10006740:	282d883a 	mov	r22,r5
10006744:	003f6f06 	br	10006504 <__multiply+0x4c>

10006748 <__pow5mult>:
10006748:	defffa04 	addi	sp,sp,-24
1000674c:	dcc00315 	stw	r19,12(sp)
10006750:	dc800215 	stw	r18,8(sp)
10006754:	dc000015 	stw	r16,0(sp)
10006758:	dfc00515 	stw	ra,20(sp)
1000675c:	dd000415 	stw	r20,16(sp)
10006760:	dc400115 	stw	r17,4(sp)
10006764:	308000cc 	andi	r2,r6,3
10006768:	3021883a 	mov	r16,r6
1000676c:	2027883a 	mov	r19,r4
10006770:	2825883a 	mov	r18,r5
10006774:	10002e1e 	bne	r2,zero,10006830 <__pow5mult+0xe8>
10006778:	8021d0ba 	srai	r16,r16,2
1000677c:	80001a26 	beq	r16,zero,100067e8 <__pow5mult+0xa0>
10006780:	9c401217 	ldw	r17,72(r19)
10006784:	8800061e 	bne	r17,zero,100067a0 <__pow5mult+0x58>
10006788:	00003406 	br	1000685c <__pow5mult+0x114>
1000678c:	8021d07a 	srai	r16,r16,1
10006790:	80001526 	beq	r16,zero,100067e8 <__pow5mult+0xa0>
10006794:	88800017 	ldw	r2,0(r17)
10006798:	10001c26 	beq	r2,zero,1000680c <__pow5mult+0xc4>
1000679c:	1023883a 	mov	r17,r2
100067a0:	80c0004c 	andi	r3,r16,1
100067a4:	183ff926 	beq	r3,zero,1000678c <__pow5mult+0x44>
100067a8:	900b883a 	mov	r5,r18
100067ac:	880d883a 	mov	r6,r17
100067b0:	9809883a 	mov	r4,r19
100067b4:	00064b80 	call	100064b8 <__multiply>
100067b8:	90001b26 	beq	r18,zero,10006828 <__pow5mult+0xe0>
100067bc:	91c00117 	ldw	r7,4(r18)
100067c0:	98c01317 	ldw	r3,76(r19)
100067c4:	8021d07a 	srai	r16,r16,1
100067c8:	39cf883a 	add	r7,r7,r7
100067cc:	39cf883a 	add	r7,r7,r7
100067d0:	19c7883a 	add	r3,r3,r7
100067d4:	19000017 	ldw	r4,0(r3)
100067d8:	91000015 	stw	r4,0(r18)
100067dc:	1c800015 	stw	r18,0(r3)
100067e0:	1025883a 	mov	r18,r2
100067e4:	803feb1e 	bne	r16,zero,10006794 <__pow5mult+0x4c>
100067e8:	9005883a 	mov	r2,r18
100067ec:	dfc00517 	ldw	ra,20(sp)
100067f0:	dd000417 	ldw	r20,16(sp)
100067f4:	dcc00317 	ldw	r19,12(sp)
100067f8:	dc800217 	ldw	r18,8(sp)
100067fc:	dc400117 	ldw	r17,4(sp)
10006800:	dc000017 	ldw	r16,0(sp)
10006804:	dec00604 	addi	sp,sp,24
10006808:	f800283a 	ret
1000680c:	9809883a 	mov	r4,r19
10006810:	880b883a 	mov	r5,r17
10006814:	880d883a 	mov	r6,r17
10006818:	00064b80 	call	100064b8 <__multiply>
1000681c:	88800015 	stw	r2,0(r17)
10006820:	10000015 	stw	zero,0(r2)
10006824:	003fdd06 	br	1000679c <__pow5mult+0x54>
10006828:	1025883a 	mov	r18,r2
1000682c:	003fd706 	br	1000678c <__pow5mult+0x44>
10006830:	10bfffc4 	addi	r2,r2,-1
10006834:	1085883a 	add	r2,r2,r2
10006838:	00c40074 	movhi	r3,4097
1000683c:	18fd9404 	addi	r3,r3,-2480
10006840:	1085883a 	add	r2,r2,r2
10006844:	1885883a 	add	r2,r3,r2
10006848:	11800017 	ldw	r6,0(r2)
1000684c:	000f883a 	mov	r7,zero
10006850:	00061240 	call	10006124 <__multadd>
10006854:	1025883a 	mov	r18,r2
10006858:	003fc706 	br	10006778 <__pow5mult+0x30>
1000685c:	05000044 	movi	r20,1
10006860:	9809883a 	mov	r4,r19
10006864:	a00b883a 	mov	r5,r20
10006868:	00060540 	call	10006054 <_Balloc>
1000686c:	1023883a 	mov	r17,r2
10006870:	00809c44 	movi	r2,625
10006874:	88800515 	stw	r2,20(r17)
10006878:	8d000415 	stw	r20,16(r17)
1000687c:	9c401215 	stw	r17,72(r19)
10006880:	88000015 	stw	zero,0(r17)
10006884:	003fc606 	br	100067a0 <__pow5mult+0x58>

10006888 <__lshift>:
10006888:	defff904 	addi	sp,sp,-28
1000688c:	dd000415 	stw	r20,16(sp)
10006890:	dcc00315 	stw	r19,12(sp)
10006894:	3029d17a 	srai	r20,r6,5
10006898:	2cc00417 	ldw	r19,16(r5)
1000689c:	28800217 	ldw	r2,8(r5)
100068a0:	dd400515 	stw	r21,20(sp)
100068a4:	a4e7883a 	add	r19,r20,r19
100068a8:	dc800215 	stw	r18,8(sp)
100068ac:	dc400115 	stw	r17,4(sp)
100068b0:	dc000015 	stw	r16,0(sp)
100068b4:	dfc00615 	stw	ra,24(sp)
100068b8:	9c000044 	addi	r16,r19,1
100068bc:	2823883a 	mov	r17,r5
100068c0:	302b883a 	mov	r21,r6
100068c4:	2025883a 	mov	r18,r4
100068c8:	29400117 	ldw	r5,4(r5)
100068cc:	1400030e 	bge	r2,r16,100068dc <__lshift+0x54>
100068d0:	1085883a 	add	r2,r2,r2
100068d4:	29400044 	addi	r5,r5,1
100068d8:	143ffd16 	blt	r2,r16,100068d0 <__lshift+0x48>
100068dc:	9009883a 	mov	r4,r18
100068e0:	00060540 	call	10006054 <_Balloc>
100068e4:	11c00504 	addi	r7,r2,20
100068e8:	0500090e 	bge	zero,r20,10006910 <__lshift+0x88>
100068ec:	3811883a 	mov	r8,r7
100068f0:	0007883a 	mov	r3,zero
100068f4:	40000015 	stw	zero,0(r8)
100068f8:	18c00044 	addi	r3,r3,1
100068fc:	42000104 	addi	r8,r8,4
10006900:	1d3ffc1e 	bne	r3,r20,100068f4 <__lshift+0x6c>
10006904:	18c7883a 	add	r3,r3,r3
10006908:	18c7883a 	add	r3,r3,r3
1000690c:	38cf883a 	add	r7,r7,r3
10006910:	89000417 	ldw	r4,16(r17)
10006914:	88c00504 	addi	r3,r17,20
10006918:	a98007cc 	andi	r6,r21,31
1000691c:	2109883a 	add	r4,r4,r4
10006920:	2109883a 	add	r4,r4,r4
10006924:	1909883a 	add	r4,r3,r4
10006928:	30002326 	beq	r6,zero,100069b8 <__lshift+0x130>
1000692c:	01400804 	movi	r5,32
10006930:	298bc83a 	sub	r5,r5,r6
10006934:	0013883a 	mov	r9,zero
10006938:	1a000017 	ldw	r8,0(r3)
1000693c:	3815883a 	mov	r10,r7
10006940:	39c00104 	addi	r7,r7,4
10006944:	4190983a 	sll	r8,r8,r6
10006948:	18c00104 	addi	r3,r3,4
1000694c:	4a10b03a 	or	r8,r9,r8
10006950:	3a3fff15 	stw	r8,-4(r7)
10006954:	1a3fff17 	ldw	r8,-4(r3)
10006958:	4152d83a 	srl	r9,r8,r5
1000695c:	193ff636 	bltu	r3,r4,10006938 <__lshift+0xb0>
10006960:	52400115 	stw	r9,4(r10)
10006964:	48000126 	beq	r9,zero,1000696c <__lshift+0xe4>
10006968:	9c000084 	addi	r16,r19,2
1000696c:	89000117 	ldw	r4,4(r17)
10006970:	90c01317 	ldw	r3,76(r18)
10006974:	843fffc4 	addi	r16,r16,-1
10006978:	2109883a 	add	r4,r4,r4
1000697c:	2109883a 	add	r4,r4,r4
10006980:	1907883a 	add	r3,r3,r4
10006984:	19000017 	ldw	r4,0(r3)
10006988:	14000415 	stw	r16,16(r2)
1000698c:	89000015 	stw	r4,0(r17)
10006990:	1c400015 	stw	r17,0(r3)
10006994:	dfc00617 	ldw	ra,24(sp)
10006998:	dd400517 	ldw	r21,20(sp)
1000699c:	dd000417 	ldw	r20,16(sp)
100069a0:	dcc00317 	ldw	r19,12(sp)
100069a4:	dc800217 	ldw	r18,8(sp)
100069a8:	dc400117 	ldw	r17,4(sp)
100069ac:	dc000017 	ldw	r16,0(sp)
100069b0:	dec00704 	addi	sp,sp,28
100069b4:	f800283a 	ret
100069b8:	19400017 	ldw	r5,0(r3)
100069bc:	39c00104 	addi	r7,r7,4
100069c0:	18c00104 	addi	r3,r3,4
100069c4:	397fff15 	stw	r5,-4(r7)
100069c8:	193ffb36 	bltu	r3,r4,100069b8 <__lshift+0x130>
100069cc:	003fe706 	br	1000696c <__lshift+0xe4>

100069d0 <__mcmp>:
100069d0:	20800417 	ldw	r2,16(r4)
100069d4:	28c00417 	ldw	r3,16(r5)
100069d8:	10c5c83a 	sub	r2,r2,r3
100069dc:	1000111e 	bne	r2,zero,10006a24 <__mcmp+0x54>
100069e0:	18c7883a 	add	r3,r3,r3
100069e4:	18c7883a 	add	r3,r3,r3
100069e8:	21000504 	addi	r4,r4,20
100069ec:	29400504 	addi	r5,r5,20
100069f0:	20c5883a 	add	r2,r4,r3
100069f4:	28cb883a 	add	r5,r5,r3
100069f8:	00000106 	br	10006a00 <__mcmp+0x30>
100069fc:	20800a2e 	bgeu	r4,r2,10006a28 <__mcmp+0x58>
10006a00:	10bfff04 	addi	r2,r2,-4
10006a04:	297fff04 	addi	r5,r5,-4
10006a08:	11800017 	ldw	r6,0(r2)
10006a0c:	28c00017 	ldw	r3,0(r5)
10006a10:	30fffa26 	beq	r6,r3,100069fc <__mcmp+0x2c>
10006a14:	30c00236 	bltu	r6,r3,10006a20 <__mcmp+0x50>
10006a18:	00800044 	movi	r2,1
10006a1c:	f800283a 	ret
10006a20:	00bfffc4 	movi	r2,-1
10006a24:	f800283a 	ret
10006a28:	0005883a 	mov	r2,zero
10006a2c:	f800283a 	ret

10006a30 <__mdiff>:
10006a30:	defffb04 	addi	sp,sp,-20
10006a34:	dc000015 	stw	r16,0(sp)
10006a38:	2821883a 	mov	r16,r5
10006a3c:	dcc00315 	stw	r19,12(sp)
10006a40:	300b883a 	mov	r5,r6
10006a44:	2027883a 	mov	r19,r4
10006a48:	8009883a 	mov	r4,r16
10006a4c:	dc800215 	stw	r18,8(sp)
10006a50:	dfc00415 	stw	ra,16(sp)
10006a54:	dc400115 	stw	r17,4(sp)
10006a58:	3025883a 	mov	r18,r6
10006a5c:	00069d00 	call	100069d0 <__mcmp>
10006a60:	10005226 	beq	r2,zero,10006bac <__mdiff+0x17c>
10006a64:	10004c16 	blt	r2,zero,10006b98 <__mdiff+0x168>
10006a68:	0023883a 	mov	r17,zero
10006a6c:	81400117 	ldw	r5,4(r16)
10006a70:	9809883a 	mov	r4,r19
10006a74:	00060540 	call	10006054 <_Balloc>
10006a78:	83400417 	ldw	r13,16(r16)
10006a7c:	93800417 	ldw	r14,16(r18)
10006a80:	81000504 	addi	r4,r16,20
10006a84:	6b59883a 	add	r12,r13,r13
10006a88:	739d883a 	add	r14,r14,r14
10006a8c:	6319883a 	add	r12,r12,r12
10006a90:	91800504 	addi	r6,r18,20
10006a94:	739d883a 	add	r14,r14,r14
10006a98:	14400315 	stw	r17,12(r2)
10006a9c:	2319883a 	add	r12,r4,r12
10006aa0:	339d883a 	add	r14,r6,r14
10006aa4:	12400504 	addi	r9,r2,20
10006aa8:	0007883a 	mov	r3,zero
10006aac:	22000017 	ldw	r8,0(r4)
10006ab0:	32800017 	ldw	r10,0(r6)
10006ab4:	4ac00104 	addi	r11,r9,4
10006ab8:	41ffffcc 	andi	r7,r8,65535
10006abc:	38c7883a 	add	r3,r7,r3
10006ac0:	51ffffcc 	andi	r7,r10,65535
10006ac4:	19cfc83a 	sub	r7,r3,r7
10006ac8:	4010d43a 	srli	r8,r8,16
10006acc:	5014d43a 	srli	r10,r10,16
10006ad0:	3807d43a 	srai	r3,r7,16
10006ad4:	39ffffcc 	andi	r7,r7,65535
10006ad8:	4291c83a 	sub	r8,r8,r10
10006adc:	40c7883a 	add	r3,r8,r3
10006ae0:	1810943a 	slli	r8,r3,16
10006ae4:	31800104 	addi	r6,r6,4
10006ae8:	21000104 	addi	r4,r4,4
10006aec:	41ceb03a 	or	r7,r8,r7
10006af0:	49c00015 	stw	r7,0(r9)
10006af4:	1807d43a 	srai	r3,r3,16
10006af8:	580b883a 	mov	r5,r11
10006afc:	5813883a 	mov	r9,r11
10006b00:	33bfea36 	bltu	r6,r14,10006aac <__mdiff+0x7c>
10006b04:	2011883a 	mov	r8,r4
10006b08:	2300152e 	bgeu	r4,r12,10006b60 <__mdiff+0x130>
10006b0c:	21400017 	ldw	r5,0(r4)
10006b10:	4a400104 	addi	r9,r9,4
10006b14:	21000104 	addi	r4,r4,4
10006b18:	29ffffcc 	andi	r7,r5,65535
10006b1c:	38c7883a 	add	r3,r7,r3
10006b20:	280ad43a 	srli	r5,r5,16
10006b24:	180dd43a 	srai	r6,r3,16
10006b28:	19ffffcc 	andi	r7,r3,65535
10006b2c:	3147883a 	add	r3,r6,r5
10006b30:	180a943a 	slli	r5,r3,16
10006b34:	1807d43a 	srai	r3,r3,16
10006b38:	29ceb03a 	or	r7,r5,r7
10006b3c:	49ffff15 	stw	r7,-4(r9)
10006b40:	233ff236 	bltu	r4,r12,10006b0c <__mdiff+0xdc>
10006b44:	0206303a 	nor	r3,zero,r8
10006b48:	1b07883a 	add	r3,r3,r12
10006b4c:	1806d0ba 	srli	r3,r3,2
10006b50:	18c00044 	addi	r3,r3,1
10006b54:	18c7883a 	add	r3,r3,r3
10006b58:	18c7883a 	add	r3,r3,r3
10006b5c:	58cb883a 	add	r5,r11,r3
10006b60:	28ffff04 	addi	r3,r5,-4
10006b64:	3800041e 	bne	r7,zero,10006b78 <__mdiff+0x148>
10006b68:	18ffff04 	addi	r3,r3,-4
10006b6c:	19000017 	ldw	r4,0(r3)
10006b70:	6b7fffc4 	addi	r13,r13,-1
10006b74:	203ffc26 	beq	r4,zero,10006b68 <__mdiff+0x138>
10006b78:	13400415 	stw	r13,16(r2)
10006b7c:	dfc00417 	ldw	ra,16(sp)
10006b80:	dcc00317 	ldw	r19,12(sp)
10006b84:	dc800217 	ldw	r18,8(sp)
10006b88:	dc400117 	ldw	r17,4(sp)
10006b8c:	dc000017 	ldw	r16,0(sp)
10006b90:	dec00504 	addi	sp,sp,20
10006b94:	f800283a 	ret
10006b98:	8005883a 	mov	r2,r16
10006b9c:	04400044 	movi	r17,1
10006ba0:	9021883a 	mov	r16,r18
10006ba4:	1025883a 	mov	r18,r2
10006ba8:	003fb006 	br	10006a6c <__mdiff+0x3c>
10006bac:	9809883a 	mov	r4,r19
10006bb0:	000b883a 	mov	r5,zero
10006bb4:	00060540 	call	10006054 <_Balloc>
10006bb8:	00c00044 	movi	r3,1
10006bbc:	10c00415 	stw	r3,16(r2)
10006bc0:	10000515 	stw	zero,20(r2)
10006bc4:	003fed06 	br	10006b7c <__mdiff+0x14c>

10006bc8 <__ulp>:
10006bc8:	295ffc2c 	andhi	r5,r5,32752
10006bcc:	00bf3034 	movhi	r2,64704
10006bd0:	2887883a 	add	r3,r5,r2
10006bd4:	00c0020e 	bge	zero,r3,10006be0 <__ulp+0x18>
10006bd8:	0005883a 	mov	r2,zero
10006bdc:	f800283a 	ret
10006be0:	00c7c83a 	sub	r3,zero,r3
10006be4:	180bd53a 	srai	r5,r3,20
10006be8:	008004c4 	movi	r2,19
10006bec:	11400a0e 	bge	r2,r5,10006c18 <__ulp+0x50>
10006bf0:	00800c84 	movi	r2,50
10006bf4:	0007883a 	mov	r3,zero
10006bf8:	11400516 	blt	r2,r5,10006c10 <__ulp+0x48>
10006bfc:	00800cc4 	movi	r2,51
10006c00:	114bc83a 	sub	r5,r2,r5
10006c04:	00800044 	movi	r2,1
10006c08:	1144983a 	sll	r2,r2,r5
10006c0c:	f800283a 	ret
10006c10:	00800044 	movi	r2,1
10006c14:	f800283a 	ret
10006c18:	00800234 	movhi	r2,8
10006c1c:	1147d83a 	sra	r3,r2,r5
10006c20:	0005883a 	mov	r2,zero
10006c24:	f800283a 	ret

10006c28 <__b2d>:
10006c28:	defffa04 	addi	sp,sp,-24
10006c2c:	dc000015 	stw	r16,0(sp)
10006c30:	24000417 	ldw	r16,16(r4)
10006c34:	dc400115 	stw	r17,4(sp)
10006c38:	24400504 	addi	r17,r4,20
10006c3c:	8421883a 	add	r16,r16,r16
10006c40:	8421883a 	add	r16,r16,r16
10006c44:	8c21883a 	add	r16,r17,r16
10006c48:	dc800215 	stw	r18,8(sp)
10006c4c:	84bfff17 	ldw	r18,-4(r16)
10006c50:	dd000415 	stw	r20,16(sp)
10006c54:	dcc00315 	stw	r19,12(sp)
10006c58:	9009883a 	mov	r4,r18
10006c5c:	2829883a 	mov	r20,r5
10006c60:	dfc00515 	stw	ra,20(sp)
10006c64:	00063640 	call	10006364 <__hi0bits>
10006c68:	00c00804 	movi	r3,32
10006c6c:	1887c83a 	sub	r3,r3,r2
10006c70:	a0c00015 	stw	r3,0(r20)
10006c74:	00c00284 	movi	r3,10
10006c78:	84ffff04 	addi	r19,r16,-4
10006c7c:	18801216 	blt	r3,r2,10006cc8 <__b2d+0xa0>
10006c80:	014002c4 	movi	r5,11
10006c84:	2889c83a 	sub	r4,r5,r2
10006c88:	9106d83a 	srl	r3,r18,r4
10006c8c:	18cffc34 	orhi	r3,r3,16368
10006c90:	8cc0282e 	bgeu	r17,r19,10006d34 <__b2d+0x10c>
10006c94:	817ffe17 	ldw	r5,-8(r16)
10006c98:	290ad83a 	srl	r5,r5,r4
10006c9c:	10800544 	addi	r2,r2,21
10006ca0:	9084983a 	sll	r2,r18,r2
10006ca4:	2884b03a 	or	r2,r5,r2
10006ca8:	dfc00517 	ldw	ra,20(sp)
10006cac:	dd000417 	ldw	r20,16(sp)
10006cb0:	dcc00317 	ldw	r19,12(sp)
10006cb4:	dc800217 	ldw	r18,8(sp)
10006cb8:	dc400117 	ldw	r17,4(sp)
10006cbc:	dc000017 	ldw	r16,0(sp)
10006cc0:	dec00604 	addi	sp,sp,24
10006cc4:	f800283a 	ret
10006cc8:	113ffd44 	addi	r4,r2,-11
10006ccc:	8cc00f2e 	bgeu	r17,r19,10006d0c <__b2d+0xe4>
10006cd0:	81bffe04 	addi	r6,r16,-8
10006cd4:	817ffe17 	ldw	r5,-8(r16)
10006cd8:	20001326 	beq	r4,zero,10006d28 <__b2d+0x100>
10006cdc:	00c00ac4 	movi	r3,43
10006ce0:	1885c83a 	sub	r2,r3,r2
10006ce4:	2886d83a 	srl	r3,r5,r2
10006ce8:	9124983a 	sll	r18,r18,r4
10006cec:	90e4b03a 	or	r18,r18,r3
10006cf0:	90cffc34 	orhi	r3,r18,16368
10006cf4:	8980112e 	bgeu	r17,r6,10006d3c <__b2d+0x114>
10006cf8:	81bffd17 	ldw	r6,-12(r16)
10006cfc:	308cd83a 	srl	r6,r6,r2
10006d00:	2904983a 	sll	r2,r5,r4
10006d04:	1184b03a 	or	r2,r2,r6
10006d08:	003fe706 	br	10006ca8 <__b2d+0x80>
10006d0c:	20000526 	beq	r4,zero,10006d24 <__b2d+0xfc>
10006d10:	9124983a 	sll	r18,r18,r4
10006d14:	000d883a 	mov	r6,zero
10006d18:	000b883a 	mov	r5,zero
10006d1c:	90cffc34 	orhi	r3,r18,16368
10006d20:	003ff706 	br	10006d00 <__b2d+0xd8>
10006d24:	000b883a 	mov	r5,zero
10006d28:	90cffc34 	orhi	r3,r18,16368
10006d2c:	2805883a 	mov	r2,r5
10006d30:	003fdd06 	br	10006ca8 <__b2d+0x80>
10006d34:	000b883a 	mov	r5,zero
10006d38:	003fd806 	br	10006c9c <__b2d+0x74>
10006d3c:	000d883a 	mov	r6,zero
10006d40:	003fef06 	br	10006d00 <__b2d+0xd8>

10006d44 <__d2b>:
10006d44:	defff704 	addi	sp,sp,-36
10006d48:	dc000215 	stw	r16,8(sp)
10006d4c:	3021883a 	mov	r16,r6
10006d50:	dc400315 	stw	r17,12(sp)
10006d54:	8022907a 	slli	r17,r16,1
10006d58:	dd400715 	stw	r21,28(sp)
10006d5c:	282b883a 	mov	r21,r5
10006d60:	01400044 	movi	r5,1
10006d64:	dd000615 	stw	r20,24(sp)
10006d68:	dcc00515 	stw	r19,20(sp)
10006d6c:	dc800415 	stw	r18,16(sp)
10006d70:	dfc00815 	stw	ra,32(sp)
10006d74:	3829883a 	mov	r20,r7
10006d78:	dc800917 	ldw	r18,36(sp)
10006d7c:	8822d57a 	srli	r17,r17,21
10006d80:	00060540 	call	10006054 <_Balloc>
10006d84:	1027883a 	mov	r19,r2
10006d88:	00800434 	movhi	r2,16
10006d8c:	10bfffc4 	addi	r2,r2,-1
10006d90:	808c703a 	and	r6,r16,r2
10006d94:	88000126 	beq	r17,zero,10006d9c <__d2b+0x58>
10006d98:	31800434 	orhi	r6,r6,16
10006d9c:	d9800015 	stw	r6,0(sp)
10006da0:	a8001f26 	beq	r21,zero,10006e20 <__d2b+0xdc>
10006da4:	d9000104 	addi	r4,sp,4
10006da8:	dd400115 	stw	r21,4(sp)
10006dac:	00063cc0 	call	100063cc <__lo0bits>
10006db0:	d8c00017 	ldw	r3,0(sp)
10006db4:	1000291e 	bne	r2,zero,10006e5c <__d2b+0x118>
10006db8:	d9000117 	ldw	r4,4(sp)
10006dbc:	99000515 	stw	r4,20(r19)
10006dc0:	1820c03a 	cmpne	r16,r3,zero
10006dc4:	84000044 	addi	r16,r16,1
10006dc8:	98c00615 	stw	r3,24(r19)
10006dcc:	9c000415 	stw	r16,16(r19)
10006dd0:	88001b1e 	bne	r17,zero,10006e40 <__d2b+0xfc>
10006dd4:	800690ba 	slli	r3,r16,2
10006dd8:	10bef384 	addi	r2,r2,-1074
10006ddc:	a0800015 	stw	r2,0(r20)
10006de0:	98c5883a 	add	r2,r19,r3
10006de4:	11000417 	ldw	r4,16(r2)
10006de8:	8020917a 	slli	r16,r16,5
10006dec:	00063640 	call	10006364 <__hi0bits>
10006df0:	8085c83a 	sub	r2,r16,r2
10006df4:	90800015 	stw	r2,0(r18)
10006df8:	9805883a 	mov	r2,r19
10006dfc:	dfc00817 	ldw	ra,32(sp)
10006e00:	dd400717 	ldw	r21,28(sp)
10006e04:	dd000617 	ldw	r20,24(sp)
10006e08:	dcc00517 	ldw	r19,20(sp)
10006e0c:	dc800417 	ldw	r18,16(sp)
10006e10:	dc400317 	ldw	r17,12(sp)
10006e14:	dc000217 	ldw	r16,8(sp)
10006e18:	dec00904 	addi	sp,sp,36
10006e1c:	f800283a 	ret
10006e20:	d809883a 	mov	r4,sp
10006e24:	00063cc0 	call	100063cc <__lo0bits>
10006e28:	d8c00017 	ldw	r3,0(sp)
10006e2c:	04000044 	movi	r16,1
10006e30:	9c000415 	stw	r16,16(r19)
10006e34:	98c00515 	stw	r3,20(r19)
10006e38:	10800804 	addi	r2,r2,32
10006e3c:	883fe526 	beq	r17,zero,10006dd4 <__d2b+0x90>
10006e40:	8c7ef344 	addi	r17,r17,-1075
10006e44:	88a3883a 	add	r17,r17,r2
10006e48:	00c00d44 	movi	r3,53
10006e4c:	a4400015 	stw	r17,0(r20)
10006e50:	1885c83a 	sub	r2,r3,r2
10006e54:	90800015 	stw	r2,0(r18)
10006e58:	003fe706 	br	10006df8 <__d2b+0xb4>
10006e5c:	01000804 	movi	r4,32
10006e60:	2089c83a 	sub	r4,r4,r2
10006e64:	1908983a 	sll	r4,r3,r4
10006e68:	d9400117 	ldw	r5,4(sp)
10006e6c:	1886d83a 	srl	r3,r3,r2
10006e70:	2148b03a 	or	r4,r4,r5
10006e74:	99000515 	stw	r4,20(r19)
10006e78:	d8c00015 	stw	r3,0(sp)
10006e7c:	003fd006 	br	10006dc0 <__d2b+0x7c>

10006e80 <__ratio>:
10006e80:	defff904 	addi	sp,sp,-28
10006e84:	dc400315 	stw	r17,12(sp)
10006e88:	2823883a 	mov	r17,r5
10006e8c:	d9400104 	addi	r5,sp,4
10006e90:	dfc00615 	stw	ra,24(sp)
10006e94:	dcc00515 	stw	r19,20(sp)
10006e98:	dc800415 	stw	r18,16(sp)
10006e9c:	2027883a 	mov	r19,r4
10006ea0:	dc000215 	stw	r16,8(sp)
10006ea4:	0006c280 	call	10006c28 <__b2d>
10006ea8:	8809883a 	mov	r4,r17
10006eac:	d80b883a 	mov	r5,sp
10006eb0:	1025883a 	mov	r18,r2
10006eb4:	1821883a 	mov	r16,r3
10006eb8:	0006c280 	call	10006c28 <__b2d>
10006ebc:	8a400417 	ldw	r9,16(r17)
10006ec0:	9a000417 	ldw	r8,16(r19)
10006ec4:	100d883a 	mov	r6,r2
10006ec8:	d8800017 	ldw	r2,0(sp)
10006ecc:	4251c83a 	sub	r8,r8,r9
10006ed0:	4012917a 	slli	r9,r8,5
10006ed4:	da000117 	ldw	r8,4(sp)
10006ed8:	4091c83a 	sub	r8,r8,r2
10006edc:	4251883a 	add	r8,r8,r9
10006ee0:	02000d0e 	bge	zero,r8,10006f18 <__ratio+0x98>
10006ee4:	4010953a 	slli	r8,r8,20
10006ee8:	4421883a 	add	r16,r8,r16
10006eec:	9009883a 	mov	r4,r18
10006ef0:	800b883a 	mov	r5,r16
10006ef4:	180f883a 	mov	r7,r3
10006ef8:	000af400 	call	1000af40 <__divdf3>
10006efc:	dfc00617 	ldw	ra,24(sp)
10006f00:	dcc00517 	ldw	r19,20(sp)
10006f04:	dc800417 	ldw	r18,16(sp)
10006f08:	dc400317 	ldw	r17,12(sp)
10006f0c:	dc000217 	ldw	r16,8(sp)
10006f10:	dec00704 	addi	sp,sp,28
10006f14:	f800283a 	ret
10006f18:	4010953a 	slli	r8,r8,20
10006f1c:	1a07c83a 	sub	r3,r3,r8
10006f20:	003ff206 	br	10006eec <__ratio+0x6c>

10006f24 <_mprec_log10>:
10006f24:	defffe04 	addi	sp,sp,-8
10006f28:	dc000015 	stw	r16,0(sp)
10006f2c:	dfc00115 	stw	ra,4(sp)
10006f30:	008005c4 	movi	r2,23
10006f34:	2021883a 	mov	r16,r4
10006f38:	11000d0e 	bge	r2,r4,10006f70 <_mprec_log10+0x4c>
10006f3c:	0005883a 	mov	r2,zero
10006f40:	00cffc34 	movhi	r3,16368
10006f44:	843fffc4 	addi	r16,r16,-1
10006f48:	1009883a 	mov	r4,r2
10006f4c:	180b883a 	mov	r5,r3
10006f50:	000d883a 	mov	r6,zero
10006f54:	01d00934 	movhi	r7,16420
10006f58:	000bb040 	call	1000bb04 <__muldf3>
10006f5c:	803ff91e 	bne	r16,zero,10006f44 <_mprec_log10+0x20>
10006f60:	dfc00117 	ldw	ra,4(sp)
10006f64:	dc000017 	ldw	r16,0(sp)
10006f68:	dec00204 	addi	sp,sp,8
10006f6c:	f800283a 	ret
10006f70:	202090fa 	slli	r16,r4,3
10006f74:	00840074 	movhi	r2,4097
10006f78:	10bdab04 	addi	r2,r2,-2388
10006f7c:	1421883a 	add	r16,r2,r16
10006f80:	80800017 	ldw	r2,0(r16)
10006f84:	80c00117 	ldw	r3,4(r16)
10006f88:	dfc00117 	ldw	ra,4(sp)
10006f8c:	dc000017 	ldw	r16,0(sp)
10006f90:	dec00204 	addi	sp,sp,8
10006f94:	f800283a 	ret

10006f98 <__copybits>:
10006f98:	297fffc4 	addi	r5,r5,-1
10006f9c:	280fd17a 	srai	r7,r5,5
10006fa0:	30c00417 	ldw	r3,16(r6)
10006fa4:	30800504 	addi	r2,r6,20
10006fa8:	39c00044 	addi	r7,r7,1
10006fac:	18c7883a 	add	r3,r3,r3
10006fb0:	39cf883a 	add	r7,r7,r7
10006fb4:	18c7883a 	add	r3,r3,r3
10006fb8:	39cf883a 	add	r7,r7,r7
10006fbc:	10c7883a 	add	r3,r2,r3
10006fc0:	21cf883a 	add	r7,r4,r7
10006fc4:	10c00d2e 	bgeu	r2,r3,10006ffc <__copybits+0x64>
10006fc8:	200b883a 	mov	r5,r4
10006fcc:	12000017 	ldw	r8,0(r2)
10006fd0:	29400104 	addi	r5,r5,4
10006fd4:	10800104 	addi	r2,r2,4
10006fd8:	2a3fff15 	stw	r8,-4(r5)
10006fdc:	10fffb36 	bltu	r2,r3,10006fcc <__copybits+0x34>
10006fe0:	1985c83a 	sub	r2,r3,r6
10006fe4:	10bffac4 	addi	r2,r2,-21
10006fe8:	1004d0ba 	srli	r2,r2,2
10006fec:	10800044 	addi	r2,r2,1
10006ff0:	1085883a 	add	r2,r2,r2
10006ff4:	1085883a 	add	r2,r2,r2
10006ff8:	2089883a 	add	r4,r4,r2
10006ffc:	21c0032e 	bgeu	r4,r7,1000700c <__copybits+0x74>
10007000:	20000015 	stw	zero,0(r4)
10007004:	21000104 	addi	r4,r4,4
10007008:	21fffd36 	bltu	r4,r7,10007000 <__copybits+0x68>
1000700c:	f800283a 	ret

10007010 <__any_on>:
10007010:	20c00417 	ldw	r3,16(r4)
10007014:	2805d17a 	srai	r2,r5,5
10007018:	21000504 	addi	r4,r4,20
1000701c:	18800d0e 	bge	r3,r2,10007054 <__any_on+0x44>
10007020:	18c7883a 	add	r3,r3,r3
10007024:	18c7883a 	add	r3,r3,r3
10007028:	20c7883a 	add	r3,r4,r3
1000702c:	20c0192e 	bgeu	r4,r3,10007094 <__any_on+0x84>
10007030:	18bfff17 	ldw	r2,-4(r3)
10007034:	18ffff04 	addi	r3,r3,-4
10007038:	1000041e 	bne	r2,zero,1000704c <__any_on+0x3c>
1000703c:	20c0142e 	bgeu	r4,r3,10007090 <__any_on+0x80>
10007040:	18ffff04 	addi	r3,r3,-4
10007044:	19400017 	ldw	r5,0(r3)
10007048:	283ffc26 	beq	r5,zero,1000703c <__any_on+0x2c>
1000704c:	00800044 	movi	r2,1
10007050:	f800283a 	ret
10007054:	10c00a0e 	bge	r2,r3,10007080 <__any_on+0x70>
10007058:	1085883a 	add	r2,r2,r2
1000705c:	1085883a 	add	r2,r2,r2
10007060:	294007cc 	andi	r5,r5,31
10007064:	2087883a 	add	r3,r4,r2
10007068:	283ff026 	beq	r5,zero,1000702c <__any_on+0x1c>
1000706c:	19800017 	ldw	r6,0(r3)
10007070:	3144d83a 	srl	r2,r6,r5
10007074:	114a983a 	sll	r5,r2,r5
10007078:	29bff41e 	bne	r5,r6,1000704c <__any_on+0x3c>
1000707c:	003feb06 	br	1000702c <__any_on+0x1c>
10007080:	1085883a 	add	r2,r2,r2
10007084:	1085883a 	add	r2,r2,r2
10007088:	2087883a 	add	r3,r4,r2
1000708c:	003fe706 	br	1000702c <__any_on+0x1c>
10007090:	f800283a 	ret
10007094:	0005883a 	mov	r2,zero
10007098:	f800283a 	ret

1000709c <_putc_r>:
1000709c:	defffc04 	addi	sp,sp,-16
100070a0:	dc000215 	stw	r16,8(sp)
100070a4:	dfc00315 	stw	ra,12(sp)
100070a8:	2021883a 	mov	r16,r4
100070ac:	20000226 	beq	r4,zero,100070b8 <_putc_r+0x1c>
100070b0:	20800e17 	ldw	r2,56(r4)
100070b4:	10001b26 	beq	r2,zero,10007124 <_putc_r+0x88>
100070b8:	30800217 	ldw	r2,8(r6)
100070bc:	10bfffc4 	addi	r2,r2,-1
100070c0:	30800215 	stw	r2,8(r6)
100070c4:	10000a16 	blt	r2,zero,100070f0 <_putc_r+0x54>
100070c8:	30800017 	ldw	r2,0(r6)
100070cc:	11400005 	stb	r5,0(r2)
100070d0:	30800017 	ldw	r2,0(r6)
100070d4:	10c00044 	addi	r3,r2,1
100070d8:	30c00015 	stw	r3,0(r6)
100070dc:	10800003 	ldbu	r2,0(r2)
100070e0:	dfc00317 	ldw	ra,12(sp)
100070e4:	dc000217 	ldw	r16,8(sp)
100070e8:	dec00404 	addi	sp,sp,16
100070ec:	f800283a 	ret
100070f0:	30c00617 	ldw	r3,24(r6)
100070f4:	10c00616 	blt	r2,r3,10007110 <_putc_r+0x74>
100070f8:	30800017 	ldw	r2,0(r6)
100070fc:	00c00284 	movi	r3,10
10007100:	11400005 	stb	r5,0(r2)
10007104:	30800017 	ldw	r2,0(r6)
10007108:	11400003 	ldbu	r5,0(r2)
1000710c:	28fff11e 	bne	r5,r3,100070d4 <_putc_r+0x38>
10007110:	8009883a 	mov	r4,r16
10007114:	dfc00317 	ldw	ra,12(sp)
10007118:	dc000217 	ldw	r16,8(sp)
1000711c:	dec00404 	addi	sp,sp,16
10007120:	0008fa81 	jmpi	10008fa8 <__swbuf_r>
10007124:	d9400015 	stw	r5,0(sp)
10007128:	d9800115 	stw	r6,4(sp)
1000712c:	00046fc0 	call	100046fc <__sinit>
10007130:	d9800117 	ldw	r6,4(sp)
10007134:	d9400017 	ldw	r5,0(sp)
10007138:	003fdf06 	br	100070b8 <_putc_r+0x1c>

1000713c <putc>:
1000713c:	defffc04 	addi	sp,sp,-16
10007140:	dc400115 	stw	r17,4(sp)
10007144:	04440074 	movhi	r17,4097
10007148:	8c44e004 	addi	r17,r17,4992
1000714c:	dc800215 	stw	r18,8(sp)
10007150:	2025883a 	mov	r18,r4
10007154:	89000017 	ldw	r4,0(r17)
10007158:	dc000015 	stw	r16,0(sp)
1000715c:	dfc00315 	stw	ra,12(sp)
10007160:	2821883a 	mov	r16,r5
10007164:	20000226 	beq	r4,zero,10007170 <putc+0x34>
10007168:	20c00e17 	ldw	r3,56(r4)
1000716c:	18001a26 	beq	r3,zero,100071d8 <putc+0x9c>
10007170:	80800217 	ldw	r2,8(r16)
10007174:	10bfffc4 	addi	r2,r2,-1
10007178:	80800215 	stw	r2,8(r16)
1000717c:	10000c16 	blt	r2,zero,100071b0 <putc+0x74>
10007180:	80800017 	ldw	r2,0(r16)
10007184:	14800005 	stb	r18,0(r2)
10007188:	80800017 	ldw	r2,0(r16)
1000718c:	10c00044 	addi	r3,r2,1
10007190:	80c00015 	stw	r3,0(r16)
10007194:	10800003 	ldbu	r2,0(r2)
10007198:	dfc00317 	ldw	ra,12(sp)
1000719c:	dc800217 	ldw	r18,8(sp)
100071a0:	dc400117 	ldw	r17,4(sp)
100071a4:	dc000017 	ldw	r16,0(sp)
100071a8:	dec00404 	addi	sp,sp,16
100071ac:	f800283a 	ret
100071b0:	80c00617 	ldw	r3,24(r16)
100071b4:	10c00a16 	blt	r2,r3,100071e0 <putc+0xa4>
100071b8:	80800017 	ldw	r2,0(r16)
100071bc:	00c00284 	movi	r3,10
100071c0:	14800005 	stb	r18,0(r2)
100071c4:	80800017 	ldw	r2,0(r16)
100071c8:	11400003 	ldbu	r5,0(r2)
100071cc:	28ffef1e 	bne	r5,r3,1000718c <putc+0x50>
100071d0:	89000017 	ldw	r4,0(r17)
100071d4:	00000406 	br	100071e8 <putc+0xac>
100071d8:	00046fc0 	call	100046fc <__sinit>
100071dc:	003fe406 	br	10007170 <putc+0x34>
100071e0:	89000017 	ldw	r4,0(r17)
100071e4:	900b883a 	mov	r5,r18
100071e8:	800d883a 	mov	r6,r16
100071ec:	dfc00317 	ldw	ra,12(sp)
100071f0:	dc800217 	ldw	r18,8(sp)
100071f4:	dc400117 	ldw	r17,4(sp)
100071f8:	dc000017 	ldw	r16,0(sp)
100071fc:	dec00404 	addi	sp,sp,16
10007200:	0008fa81 	jmpi	10008fa8 <__swbuf_r>

10007204 <_realloc_r>:
10007204:	defff604 	addi	sp,sp,-40
10007208:	dcc00315 	stw	r19,12(sp)
1000720c:	dc400115 	stw	r17,4(sp)
10007210:	dfc00915 	stw	ra,36(sp)
10007214:	df000815 	stw	fp,32(sp)
10007218:	ddc00715 	stw	r23,28(sp)
1000721c:	dd800615 	stw	r22,24(sp)
10007220:	dd400515 	stw	r21,20(sp)
10007224:	dd000415 	stw	r20,16(sp)
10007228:	dc800215 	stw	r18,8(sp)
1000722c:	dc000015 	stw	r16,0(sp)
10007230:	2827883a 	mov	r19,r5
10007234:	3023883a 	mov	r17,r6
10007238:	2800bf26 	beq	r5,zero,10007538 <_realloc_r+0x334>
1000723c:	2025883a 	mov	r18,r4
10007240:	000d4800 	call	1000d480 <__malloc_lock>
10007244:	98ffff17 	ldw	r3,-4(r19)
10007248:	01bfff04 	movi	r6,-4
1000724c:	890002c4 	addi	r4,r17,11
10007250:	01c00584 	movi	r7,22
10007254:	9d7ffe04 	addi	r21,r19,-8
10007258:	19a0703a 	and	r16,r3,r6
1000725c:	39003f2e 	bgeu	r7,r4,1000735c <_realloc_r+0x158>
10007260:	053ffe04 	movi	r20,-8
10007264:	2528703a 	and	r20,r4,r20
10007268:	a00f883a 	mov	r7,r20
1000726c:	a0008216 	blt	r20,zero,10007478 <_realloc_r+0x274>
10007270:	a4408136 	bltu	r20,r17,10007478 <_realloc_r+0x274>
10007274:	81c03c0e 	bge	r16,r7,10007368 <_realloc_r+0x164>
10007278:	07040074 	movhi	fp,4097
1000727c:	e73f5904 	addi	fp,fp,-668
10007280:	e1000217 	ldw	r4,8(fp)
10007284:	ac05883a 	add	r2,r21,r16
10007288:	2080bf26 	beq	r4,r2,10007588 <_realloc_r+0x384>
1000728c:	11000117 	ldw	r4,4(r2)
10007290:	023fff84 	movi	r8,-2
10007294:	2210703a 	and	r8,r4,r8
10007298:	1211883a 	add	r8,r2,r8
1000729c:	41400117 	ldw	r5,4(r8)
100072a0:	2940004c 	andi	r5,r5,1
100072a4:	28004a1e 	bne	r5,zero,100073d0 <_realloc_r+0x1cc>
100072a8:	017fff04 	movi	r5,-4
100072ac:	2148703a 	and	r4,r4,r5
100072b0:	2409883a 	add	r4,r4,r16
100072b4:	21c0ad0e 	bge	r4,r7,1000756c <_realloc_r+0x368>
100072b8:	18c0004c 	andi	r3,r3,1
100072bc:	18007f1e 	bne	r3,zero,100074bc <_realloc_r+0x2b8>
100072c0:	9dfffe17 	ldw	r23,-8(r19)
100072c4:	adefc83a 	sub	r23,r21,r23
100072c8:	bd800117 	ldw	r22,4(r23)
100072cc:	b14a703a 	and	r5,r22,r5
100072d0:	216d883a 	add	r22,r4,r5
100072d4:	b1c04516 	blt	r22,r7,100073ec <_realloc_r+0x1e8>
100072d8:	10c00317 	ldw	r3,12(r2)
100072dc:	10800217 	ldw	r2,8(r2)
100072e0:	81bfff04 	addi	r6,r16,-4
100072e4:	bc400204 	addi	r17,r23,8
100072e8:	10c00315 	stw	r3,12(r2)
100072ec:	18800215 	stw	r2,8(r3)
100072f0:	b9400217 	ldw	r5,8(r23)
100072f4:	b8c00317 	ldw	r3,12(r23)
100072f8:	00800904 	movi	r2,36
100072fc:	28c00315 	stw	r3,12(r5)
10007300:	19400215 	stw	r5,8(r3)
10007304:	1180ef36 	bltu	r2,r6,100076c4 <_realloc_r+0x4c0>
10007308:	008004c4 	movi	r2,19
1000730c:	1180da2e 	bgeu	r2,r6,10007678 <_realloc_r+0x474>
10007310:	98800017 	ldw	r2,0(r19)
10007314:	b8800215 	stw	r2,8(r23)
10007318:	98800117 	ldw	r2,4(r19)
1000731c:	b8800315 	stw	r2,12(r23)
10007320:	008006c4 	movi	r2,27
10007324:	1180fc2e 	bgeu	r2,r6,10007718 <_realloc_r+0x514>
10007328:	98800217 	ldw	r2,8(r19)
1000732c:	b8800415 	stw	r2,16(r23)
10007330:	98800317 	ldw	r2,12(r19)
10007334:	b8800515 	stw	r2,20(r23)
10007338:	00800904 	movi	r2,36
1000733c:	3080421e 	bne	r6,r2,10007448 <_realloc_r+0x244>
10007340:	98800417 	ldw	r2,16(r19)
10007344:	9cc00604 	addi	r19,r19,24
10007348:	b8c00804 	addi	r3,r23,32
1000734c:	b8800615 	stw	r2,24(r23)
10007350:	98bfff17 	ldw	r2,-4(r19)
10007354:	b8800715 	stw	r2,28(r23)
10007358:	00003d06 	br	10007450 <_realloc_r+0x24c>
1000735c:	01c00404 	movi	r7,16
10007360:	3829883a 	mov	r20,r7
10007364:	003fc206 	br	10007270 <_realloc_r+0x6c>
10007368:	9823883a 	mov	r17,r19
1000736c:	850fc83a 	sub	r7,r16,r20
10007370:	008003c4 	movi	r2,15
10007374:	18c0004c 	andi	r3,r3,1
10007378:	11c04336 	bltu	r2,r7,10007488 <_realloc_r+0x284>
1000737c:	1c06b03a 	or	r3,r3,r16
10007380:	a8c00115 	stw	r3,4(r21)
10007384:	ac21883a 	add	r16,r21,r16
10007388:	80c00117 	ldw	r3,4(r16)
1000738c:	18c00054 	ori	r3,r3,1
10007390:	80c00115 	stw	r3,4(r16)
10007394:	9009883a 	mov	r4,r18
10007398:	000d4a00 	call	1000d4a0 <__malloc_unlock>
1000739c:	8805883a 	mov	r2,r17
100073a0:	dfc00917 	ldw	ra,36(sp)
100073a4:	df000817 	ldw	fp,32(sp)
100073a8:	ddc00717 	ldw	r23,28(sp)
100073ac:	dd800617 	ldw	r22,24(sp)
100073b0:	dd400517 	ldw	r21,20(sp)
100073b4:	dd000417 	ldw	r20,16(sp)
100073b8:	dcc00317 	ldw	r19,12(sp)
100073bc:	dc800217 	ldw	r18,8(sp)
100073c0:	dc400117 	ldw	r17,4(sp)
100073c4:	dc000017 	ldw	r16,0(sp)
100073c8:	dec00a04 	addi	sp,sp,40
100073cc:	f800283a 	ret
100073d0:	18c0004c 	andi	r3,r3,1
100073d4:	1800391e 	bne	r3,zero,100074bc <_realloc_r+0x2b8>
100073d8:	9dfffe17 	ldw	r23,-8(r19)
100073dc:	00bfff04 	movi	r2,-4
100073e0:	adefc83a 	sub	r23,r21,r23
100073e4:	b9400117 	ldw	r5,4(r23)
100073e8:	288a703a 	and	r5,r5,r2
100073ec:	2c2d883a 	add	r22,r5,r16
100073f0:	b1c03216 	blt	r22,r7,100074bc <_realloc_r+0x2b8>
100073f4:	b8800317 	ldw	r2,12(r23)
100073f8:	b8c00217 	ldw	r3,8(r23)
100073fc:	81bfff04 	addi	r6,r16,-4
10007400:	01000904 	movi	r4,36
10007404:	18800315 	stw	r2,12(r3)
10007408:	10c00215 	stw	r3,8(r2)
1000740c:	bc400204 	addi	r17,r23,8
10007410:	2180ac36 	bltu	r4,r6,100076c4 <_realloc_r+0x4c0>
10007414:	008004c4 	movi	r2,19
10007418:	1180972e 	bgeu	r2,r6,10007678 <_realloc_r+0x474>
1000741c:	98800017 	ldw	r2,0(r19)
10007420:	b8800215 	stw	r2,8(r23)
10007424:	98800117 	ldw	r2,4(r19)
10007428:	b8800315 	stw	r2,12(r23)
1000742c:	008006c4 	movi	r2,27
10007430:	1180b92e 	bgeu	r2,r6,10007718 <_realloc_r+0x514>
10007434:	98800217 	ldw	r2,8(r19)
10007438:	b8800415 	stw	r2,16(r23)
1000743c:	98800317 	ldw	r2,12(r19)
10007440:	b8800515 	stw	r2,20(r23)
10007444:	313fbe26 	beq	r6,r4,10007340 <_realloc_r+0x13c>
10007448:	b8c00604 	addi	r3,r23,24
1000744c:	9cc00404 	addi	r19,r19,16
10007450:	98800017 	ldw	r2,0(r19)
10007454:	b021883a 	mov	r16,r22
10007458:	b82b883a 	mov	r21,r23
1000745c:	18800015 	stw	r2,0(r3)
10007460:	98800117 	ldw	r2,4(r19)
10007464:	18800115 	stw	r2,4(r3)
10007468:	98800217 	ldw	r2,8(r19)
1000746c:	18800215 	stw	r2,8(r3)
10007470:	b8c00117 	ldw	r3,4(r23)
10007474:	003fbd06 	br	1000736c <_realloc_r+0x168>
10007478:	00800304 	movi	r2,12
1000747c:	90800015 	stw	r2,0(r18)
10007480:	0005883a 	mov	r2,zero
10007484:	003fc606 	br	100073a0 <_realloc_r+0x19c>
10007488:	1d06b03a 	or	r3,r3,r20
1000748c:	ad0b883a 	add	r5,r21,r20
10007490:	a8c00115 	stw	r3,4(r21)
10007494:	38800054 	ori	r2,r7,1
10007498:	28800115 	stw	r2,4(r5)
1000749c:	29cf883a 	add	r7,r5,r7
100074a0:	38800117 	ldw	r2,4(r7)
100074a4:	9009883a 	mov	r4,r18
100074a8:	29400204 	addi	r5,r5,8
100074ac:	10800054 	ori	r2,r2,1
100074b0:	38800115 	stw	r2,4(r7)
100074b4:	00048700 	call	10004870 <_free_r>
100074b8:	003fb606 	br	10007394 <_realloc_r+0x190>
100074bc:	880b883a 	mov	r5,r17
100074c0:	9009883a 	mov	r4,r18
100074c4:	000540c0 	call	1000540c <_malloc_r>
100074c8:	1023883a 	mov	r17,r2
100074cc:	1000aa26 	beq	r2,zero,10007778 <_realloc_r+0x574>
100074d0:	98ffff17 	ldw	r3,-4(r19)
100074d4:	113ffe04 	addi	r4,r2,-8
100074d8:	00bfff84 	movi	r2,-2
100074dc:	1884703a 	and	r2,r3,r2
100074e0:	a885883a 	add	r2,r21,r2
100074e4:	20808626 	beq	r4,r2,10007700 <_realloc_r+0x4fc>
100074e8:	81bfff04 	addi	r6,r16,-4
100074ec:	00800904 	movi	r2,36
100074f0:	11807036 	bltu	r2,r6,100076b4 <_realloc_r+0x4b0>
100074f4:	00c004c4 	movi	r3,19
100074f8:	19805636 	bltu	r3,r6,10007654 <_realloc_r+0x450>
100074fc:	8805883a 	mov	r2,r17
10007500:	9807883a 	mov	r3,r19
10007504:	19000017 	ldw	r4,0(r3)
10007508:	11000015 	stw	r4,0(r2)
1000750c:	19000117 	ldw	r4,4(r3)
10007510:	11000115 	stw	r4,4(r2)
10007514:	18c00217 	ldw	r3,8(r3)
10007518:	10c00215 	stw	r3,8(r2)
1000751c:	980b883a 	mov	r5,r19
10007520:	9009883a 	mov	r4,r18
10007524:	00048700 	call	10004870 <_free_r>
10007528:	9009883a 	mov	r4,r18
1000752c:	000d4a00 	call	1000d4a0 <__malloc_unlock>
10007530:	8805883a 	mov	r2,r17
10007534:	003f9a06 	br	100073a0 <_realloc_r+0x19c>
10007538:	300b883a 	mov	r5,r6
1000753c:	dfc00917 	ldw	ra,36(sp)
10007540:	df000817 	ldw	fp,32(sp)
10007544:	ddc00717 	ldw	r23,28(sp)
10007548:	dd800617 	ldw	r22,24(sp)
1000754c:	dd400517 	ldw	r21,20(sp)
10007550:	dd000417 	ldw	r20,16(sp)
10007554:	dcc00317 	ldw	r19,12(sp)
10007558:	dc800217 	ldw	r18,8(sp)
1000755c:	dc400117 	ldw	r17,4(sp)
10007560:	dc000017 	ldw	r16,0(sp)
10007564:	dec00a04 	addi	sp,sp,40
10007568:	000540c1 	jmpi	1000540c <_malloc_r>
1000756c:	11400317 	ldw	r5,12(r2)
10007570:	10800217 	ldw	r2,8(r2)
10007574:	9823883a 	mov	r17,r19
10007578:	2021883a 	mov	r16,r4
1000757c:	11400315 	stw	r5,12(r2)
10007580:	28800215 	stw	r2,8(r5)
10007584:	003f7906 	br	1000736c <_realloc_r+0x168>
10007588:	21000117 	ldw	r4,4(r4)
1000758c:	00bfff04 	movi	r2,-4
10007590:	a1800404 	addi	r6,r20,16
10007594:	2088703a 	and	r4,r4,r2
10007598:	2409883a 	add	r4,r4,r16
1000759c:	2180380e 	bge	r4,r6,10007680 <_realloc_r+0x47c>
100075a0:	18c0004c 	andi	r3,r3,1
100075a4:	183fc51e 	bne	r3,zero,100074bc <_realloc_r+0x2b8>
100075a8:	9dfffe17 	ldw	r23,-8(r19)
100075ac:	adefc83a 	sub	r23,r21,r23
100075b0:	b9400117 	ldw	r5,4(r23)
100075b4:	288a703a 	and	r5,r5,r2
100075b8:	216d883a 	add	r22,r4,r5
100075bc:	b1bf8b16 	blt	r22,r6,100073ec <_realloc_r+0x1e8>
100075c0:	b8800317 	ldw	r2,12(r23)
100075c4:	b8c00217 	ldw	r3,8(r23)
100075c8:	81bfff04 	addi	r6,r16,-4
100075cc:	01000904 	movi	r4,36
100075d0:	18800315 	stw	r2,12(r3)
100075d4:	10c00215 	stw	r3,8(r2)
100075d8:	bc400204 	addi	r17,r23,8
100075dc:	21805a36 	bltu	r4,r6,10007748 <_realloc_r+0x544>
100075e0:	008004c4 	movi	r2,19
100075e4:	1180562e 	bgeu	r2,r6,10007740 <_realloc_r+0x53c>
100075e8:	98800017 	ldw	r2,0(r19)
100075ec:	b8800215 	stw	r2,8(r23)
100075f0:	98800117 	ldw	r2,4(r19)
100075f4:	b8800315 	stw	r2,12(r23)
100075f8:	008006c4 	movi	r2,27
100075fc:	11805636 	bltu	r2,r6,10007758 <_realloc_r+0x554>
10007600:	b8800404 	addi	r2,r23,16
10007604:	9cc00204 	addi	r19,r19,8
10007608:	98c00017 	ldw	r3,0(r19)
1000760c:	10c00015 	stw	r3,0(r2)
10007610:	98c00117 	ldw	r3,4(r19)
10007614:	10c00115 	stw	r3,4(r2)
10007618:	98c00217 	ldw	r3,8(r19)
1000761c:	10c00215 	stw	r3,8(r2)
10007620:	bd07883a 	add	r3,r23,r20
10007624:	b505c83a 	sub	r2,r22,r20
10007628:	e0c00215 	stw	r3,8(fp)
1000762c:	10800054 	ori	r2,r2,1
10007630:	18800115 	stw	r2,4(r3)
10007634:	b8800117 	ldw	r2,4(r23)
10007638:	9009883a 	mov	r4,r18
1000763c:	1080004c 	andi	r2,r2,1
10007640:	a0a8b03a 	or	r20,r20,r2
10007644:	bd000115 	stw	r20,4(r23)
10007648:	000d4a00 	call	1000d4a0 <__malloc_unlock>
1000764c:	8805883a 	mov	r2,r17
10007650:	003f5306 	br	100073a0 <_realloc_r+0x19c>
10007654:	98c00017 	ldw	r3,0(r19)
10007658:	88c00015 	stw	r3,0(r17)
1000765c:	98c00117 	ldw	r3,4(r19)
10007660:	88c00115 	stw	r3,4(r17)
10007664:	00c006c4 	movi	r3,27
10007668:	19801d36 	bltu	r3,r6,100076e0 <_realloc_r+0x4dc>
1000766c:	88800204 	addi	r2,r17,8
10007670:	98c00204 	addi	r3,r19,8
10007674:	003fa306 	br	10007504 <_realloc_r+0x300>
10007678:	8807883a 	mov	r3,r17
1000767c:	003f7406 	br	10007450 <_realloc_r+0x24c>
10007680:	ad2b883a 	add	r21,r21,r20
10007684:	2505c83a 	sub	r2,r4,r20
10007688:	e5400215 	stw	r21,8(fp)
1000768c:	10800054 	ori	r2,r2,1
10007690:	a8800115 	stw	r2,4(r21)
10007694:	98bfff17 	ldw	r2,-4(r19)
10007698:	9009883a 	mov	r4,r18
1000769c:	1080004c 	andi	r2,r2,1
100076a0:	a0a8b03a 	or	r20,r20,r2
100076a4:	9d3fff15 	stw	r20,-4(r19)
100076a8:	000d4a00 	call	1000d4a0 <__malloc_unlock>
100076ac:	9805883a 	mov	r2,r19
100076b0:	003f3b06 	br	100073a0 <_realloc_r+0x19c>
100076b4:	8809883a 	mov	r4,r17
100076b8:	980b883a 	mov	r5,r19
100076bc:	0005dd40 	call	10005dd4 <memmove>
100076c0:	003f9606 	br	1000751c <_realloc_r+0x318>
100076c4:	8809883a 	mov	r4,r17
100076c8:	980b883a 	mov	r5,r19
100076cc:	0005dd40 	call	10005dd4 <memmove>
100076d0:	b8c00117 	ldw	r3,4(r23)
100076d4:	b021883a 	mov	r16,r22
100076d8:	b82b883a 	mov	r21,r23
100076dc:	003f2306 	br	1000736c <_realloc_r+0x168>
100076e0:	98c00217 	ldw	r3,8(r19)
100076e4:	88c00215 	stw	r3,8(r17)
100076e8:	98c00317 	ldw	r3,12(r19)
100076ec:	88c00315 	stw	r3,12(r17)
100076f0:	30800c26 	beq	r6,r2,10007724 <_realloc_r+0x520>
100076f4:	88800404 	addi	r2,r17,16
100076f8:	98c00404 	addi	r3,r19,16
100076fc:	003f8106 	br	10007504 <_realloc_r+0x300>
10007700:	893fff17 	ldw	r4,-4(r17)
10007704:	00bfff04 	movi	r2,-4
10007708:	9823883a 	mov	r17,r19
1000770c:	2084703a 	and	r2,r4,r2
10007710:	80a1883a 	add	r16,r16,r2
10007714:	003f1506 	br	1000736c <_realloc_r+0x168>
10007718:	b8c00404 	addi	r3,r23,16
1000771c:	9cc00204 	addi	r19,r19,8
10007720:	003f4b06 	br	10007450 <_realloc_r+0x24c>
10007724:	99000417 	ldw	r4,16(r19)
10007728:	88800604 	addi	r2,r17,24
1000772c:	98c00604 	addi	r3,r19,24
10007730:	89000415 	stw	r4,16(r17)
10007734:	99000517 	ldw	r4,20(r19)
10007738:	89000515 	stw	r4,20(r17)
1000773c:	003f7106 	br	10007504 <_realloc_r+0x300>
10007740:	8805883a 	mov	r2,r17
10007744:	003fb006 	br	10007608 <_realloc_r+0x404>
10007748:	8809883a 	mov	r4,r17
1000774c:	980b883a 	mov	r5,r19
10007750:	0005dd40 	call	10005dd4 <memmove>
10007754:	003fb206 	br	10007620 <_realloc_r+0x41c>
10007758:	98800217 	ldw	r2,8(r19)
1000775c:	b8800415 	stw	r2,16(r23)
10007760:	98800317 	ldw	r2,12(r19)
10007764:	b8800515 	stw	r2,20(r23)
10007768:	31000726 	beq	r6,r4,10007788 <_realloc_r+0x584>
1000776c:	b8800604 	addi	r2,r23,24
10007770:	9cc00404 	addi	r19,r19,16
10007774:	003fa406 	br	10007608 <_realloc_r+0x404>
10007778:	9009883a 	mov	r4,r18
1000777c:	000d4a00 	call	1000d4a0 <__malloc_unlock>
10007780:	0005883a 	mov	r2,zero
10007784:	003f0606 	br	100073a0 <_realloc_r+0x19c>
10007788:	98c00417 	ldw	r3,16(r19)
1000778c:	9cc00604 	addi	r19,r19,24
10007790:	b8800804 	addi	r2,r23,32
10007794:	b8c00615 	stw	r3,24(r23)
10007798:	98ffff17 	ldw	r3,-4(r19)
1000779c:	b8c00715 	stw	r3,28(r23)
100077a0:	003f9906 	br	10007608 <_realloc_r+0x404>

100077a4 <__fpclassifyd>:
100077a4:	00a00034 	movhi	r2,32768
100077a8:	10bfffc4 	addi	r2,r2,-1
100077ac:	2884703a 	and	r2,r5,r2
100077b0:	10000726 	beq	r2,zero,100077d0 <__fpclassifyd+0x2c>
100077b4:	00fffc34 	movhi	r3,65520
100077b8:	019ff834 	movhi	r6,32736
100077bc:	28c7883a 	add	r3,r5,r3
100077c0:	31bfffc4 	addi	r6,r6,-1
100077c4:	30c00536 	bltu	r6,r3,100077dc <__fpclassifyd+0x38>
100077c8:	00800104 	movi	r2,4
100077cc:	f800283a 	ret
100077d0:	2000021e 	bne	r4,zero,100077dc <__fpclassifyd+0x38>
100077d4:	00800084 	movi	r2,2
100077d8:	f800283a 	ret
100077dc:	00dffc34 	movhi	r3,32752
100077e0:	019ff834 	movhi	r6,32736
100077e4:	28cb883a 	add	r5,r5,r3
100077e8:	31bfffc4 	addi	r6,r6,-1
100077ec:	317ff62e 	bgeu	r6,r5,100077c8 <__fpclassifyd+0x24>
100077f0:	01400434 	movhi	r5,16
100077f4:	297fffc4 	addi	r5,r5,-1
100077f8:	28800236 	bltu	r5,r2,10007804 <__fpclassifyd+0x60>
100077fc:	008000c4 	movi	r2,3
10007800:	f800283a 	ret
10007804:	10c00226 	beq	r2,r3,10007810 <__fpclassifyd+0x6c>
10007808:	0005883a 	mov	r2,zero
1000780c:	f800283a 	ret
10007810:	2005003a 	cmpeq	r2,r4,zero
10007814:	f800283a 	ret

10007818 <_sbrk_r>:
10007818:	defffd04 	addi	sp,sp,-12
1000781c:	dc000015 	stw	r16,0(sp)
10007820:	04040074 	movhi	r16,4097
10007824:	dc400115 	stw	r17,4(sp)
10007828:	840bb204 	addi	r16,r16,11976
1000782c:	2023883a 	mov	r17,r4
10007830:	2809883a 	mov	r4,r5
10007834:	dfc00215 	stw	ra,8(sp)
10007838:	80000015 	stw	zero,0(r16)
1000783c:	000d6940 	call	1000d694 <sbrk>
10007840:	00ffffc4 	movi	r3,-1
10007844:	10c00526 	beq	r2,r3,1000785c <_sbrk_r+0x44>
10007848:	dfc00217 	ldw	ra,8(sp)
1000784c:	dc400117 	ldw	r17,4(sp)
10007850:	dc000017 	ldw	r16,0(sp)
10007854:	dec00304 	addi	sp,sp,12
10007858:	f800283a 	ret
1000785c:	80c00017 	ldw	r3,0(r16)
10007860:	183ff926 	beq	r3,zero,10007848 <_sbrk_r+0x30>
10007864:	88c00015 	stw	r3,0(r17)
10007868:	003ff706 	br	10007848 <_sbrk_r+0x30>

1000786c <__sread>:
1000786c:	defffe04 	addi	sp,sp,-8
10007870:	dc000015 	stw	r16,0(sp)
10007874:	2821883a 	mov	r16,r5
10007878:	2940038f 	ldh	r5,14(r5)
1000787c:	dfc00115 	stw	ra,4(sp)
10007880:	00096980 	call	10009698 <_read_r>
10007884:	10000716 	blt	r2,zero,100078a4 <__sread+0x38>
10007888:	80c01417 	ldw	r3,80(r16)
1000788c:	1887883a 	add	r3,r3,r2
10007890:	80c01415 	stw	r3,80(r16)
10007894:	dfc00117 	ldw	ra,4(sp)
10007898:	dc000017 	ldw	r16,0(sp)
1000789c:	dec00204 	addi	sp,sp,8
100078a0:	f800283a 	ret
100078a4:	80c0030b 	ldhu	r3,12(r16)
100078a8:	18fbffcc 	andi	r3,r3,61439
100078ac:	80c0030d 	sth	r3,12(r16)
100078b0:	dfc00117 	ldw	ra,4(sp)
100078b4:	dc000017 	ldw	r16,0(sp)
100078b8:	dec00204 	addi	sp,sp,8
100078bc:	f800283a 	ret

100078c0 <__seofread>:
100078c0:	0005883a 	mov	r2,zero
100078c4:	f800283a 	ret

100078c8 <__swrite>:
100078c8:	2880030b 	ldhu	r2,12(r5)
100078cc:	defffb04 	addi	sp,sp,-20
100078d0:	dcc00315 	stw	r19,12(sp)
100078d4:	dc800215 	stw	r18,8(sp)
100078d8:	dc400115 	stw	r17,4(sp)
100078dc:	dc000015 	stw	r16,0(sp)
100078e0:	dfc00415 	stw	ra,16(sp)
100078e4:	10c0400c 	andi	r3,r2,256
100078e8:	2821883a 	mov	r16,r5
100078ec:	2027883a 	mov	r19,r4
100078f0:	3025883a 	mov	r18,r6
100078f4:	3823883a 	mov	r17,r7
100078f8:	18000526 	beq	r3,zero,10007910 <__swrite+0x48>
100078fc:	2940038f 	ldh	r5,14(r5)
10007900:	000d883a 	mov	r6,zero
10007904:	01c00084 	movi	r7,2
10007908:	000963c0 	call	1000963c <_lseek_r>
1000790c:	8080030b 	ldhu	r2,12(r16)
10007910:	8140038f 	ldh	r5,14(r16)
10007914:	10bbffcc 	andi	r2,r2,61439
10007918:	9809883a 	mov	r4,r19
1000791c:	900d883a 	mov	r6,r18
10007920:	880f883a 	mov	r7,r17
10007924:	8080030d 	sth	r2,12(r16)
10007928:	dfc00417 	ldw	ra,16(sp)
1000792c:	dcc00317 	ldw	r19,12(sp)
10007930:	dc800217 	ldw	r18,8(sp)
10007934:	dc400117 	ldw	r17,4(sp)
10007938:	dc000017 	ldw	r16,0(sp)
1000793c:	dec00504 	addi	sp,sp,20
10007940:	00091181 	jmpi	10009118 <_write_r>

10007944 <__sseek>:
10007944:	defffe04 	addi	sp,sp,-8
10007948:	dc000015 	stw	r16,0(sp)
1000794c:	2821883a 	mov	r16,r5
10007950:	2940038f 	ldh	r5,14(r5)
10007954:	dfc00115 	stw	ra,4(sp)
10007958:	000963c0 	call	1000963c <_lseek_r>
1000795c:	00ffffc4 	movi	r3,-1
10007960:	10c00826 	beq	r2,r3,10007984 <__sseek+0x40>
10007964:	80c0030b 	ldhu	r3,12(r16)
10007968:	80801415 	stw	r2,80(r16)
1000796c:	18c40014 	ori	r3,r3,4096
10007970:	80c0030d 	sth	r3,12(r16)
10007974:	dfc00117 	ldw	ra,4(sp)
10007978:	dc000017 	ldw	r16,0(sp)
1000797c:	dec00204 	addi	sp,sp,8
10007980:	f800283a 	ret
10007984:	80c0030b 	ldhu	r3,12(r16)
10007988:	18fbffcc 	andi	r3,r3,61439
1000798c:	80c0030d 	sth	r3,12(r16)
10007990:	dfc00117 	ldw	ra,4(sp)
10007994:	dc000017 	ldw	r16,0(sp)
10007998:	dec00204 	addi	sp,sp,8
1000799c:	f800283a 	ret

100079a0 <__sclose>:
100079a0:	2940038f 	ldh	r5,14(r5)
100079a4:	00091741 	jmpi	10009174 <_close_r>

100079a8 <strcmp>:
100079a8:	2144b03a 	or	r2,r4,r5
100079ac:	108000cc 	andi	r2,r2,3
100079b0:	1000171e 	bne	r2,zero,10007a10 <strcmp+0x68>
100079b4:	20800017 	ldw	r2,0(r4)
100079b8:	28c00017 	ldw	r3,0(r5)
100079bc:	10c0141e 	bne	r2,r3,10007a10 <strcmp+0x68>
100079c0:	027fbff4 	movhi	r9,65279
100079c4:	4a7fbfc4 	addi	r9,r9,-257
100079c8:	0086303a 	nor	r3,zero,r2
100079cc:	02202074 	movhi	r8,32897
100079d0:	1245883a 	add	r2,r2,r9
100079d4:	42202004 	addi	r8,r8,-32640
100079d8:	10c4703a 	and	r2,r2,r3
100079dc:	1204703a 	and	r2,r2,r8
100079e0:	10000226 	beq	r2,zero,100079ec <strcmp+0x44>
100079e4:	00001706 	br	10007a44 <strcmp+0x9c>
100079e8:	1000161e 	bne	r2,zero,10007a44 <strcmp+0x9c>
100079ec:	21000104 	addi	r4,r4,4
100079f0:	20c00017 	ldw	r3,0(r4)
100079f4:	29400104 	addi	r5,r5,4
100079f8:	29800017 	ldw	r6,0(r5)
100079fc:	1a4f883a 	add	r7,r3,r9
10007a00:	00c4303a 	nor	r2,zero,r3
10007a04:	3884703a 	and	r2,r7,r2
10007a08:	1204703a 	and	r2,r2,r8
10007a0c:	19bff626 	beq	r3,r6,100079e8 <strcmp+0x40>
10007a10:	20800007 	ldb	r2,0(r4)
10007a14:	1000051e 	bne	r2,zero,10007a2c <strcmp+0x84>
10007a18:	00000606 	br	10007a34 <strcmp+0x8c>
10007a1c:	21000044 	addi	r4,r4,1
10007a20:	20800007 	ldb	r2,0(r4)
10007a24:	29400044 	addi	r5,r5,1
10007a28:	10000226 	beq	r2,zero,10007a34 <strcmp+0x8c>
10007a2c:	28c00007 	ldb	r3,0(r5)
10007a30:	10fffa26 	beq	r2,r3,10007a1c <strcmp+0x74>
10007a34:	20800003 	ldbu	r2,0(r4)
10007a38:	28c00003 	ldbu	r3,0(r5)
10007a3c:	10c5c83a 	sub	r2,r2,r3
10007a40:	f800283a 	ret
10007a44:	0005883a 	mov	r2,zero
10007a48:	f800283a 	ret

10007a4c <__sprint_r.part.0>:
10007a4c:	28801917 	ldw	r2,100(r5)
10007a50:	defff604 	addi	sp,sp,-40
10007a54:	dd400515 	stw	r21,20(sp)
10007a58:	dcc00315 	stw	r19,12(sp)
10007a5c:	dfc00915 	stw	ra,36(sp)
10007a60:	df000815 	stw	fp,32(sp)
10007a64:	ddc00715 	stw	r23,28(sp)
10007a68:	dd800615 	stw	r22,24(sp)
10007a6c:	dd000415 	stw	r20,16(sp)
10007a70:	dc800215 	stw	r18,8(sp)
10007a74:	dc400115 	stw	r17,4(sp)
10007a78:	dc000015 	stw	r16,0(sp)
10007a7c:	1088000c 	andi	r2,r2,8192
10007a80:	2827883a 	mov	r19,r5
10007a84:	302b883a 	mov	r21,r6
10007a88:	10002d26 	beq	r2,zero,10007b40 <__sprint_r.part.0+0xf4>
10007a8c:	30800217 	ldw	r2,8(r6)
10007a90:	35800017 	ldw	r22,0(r6)
10007a94:	10002826 	beq	r2,zero,10007b38 <__sprint_r.part.0+0xec>
10007a98:	2029883a 	mov	r20,r4
10007a9c:	b5c00104 	addi	r23,r22,4
10007aa0:	04bfffc4 	movi	r18,-1
10007aa4:	bc400017 	ldw	r17,0(r23)
10007aa8:	b4000017 	ldw	r16,0(r22)
10007aac:	0039883a 	mov	fp,zero
10007ab0:	8822d0ba 	srli	r17,r17,2
10007ab4:	04400316 	blt	zero,r17,10007ac4 <__sprint_r.part.0+0x78>
10007ab8:	00001706 	br	10007b18 <__sprint_r.part.0+0xcc>
10007abc:	84000104 	addi	r16,r16,4
10007ac0:	8f001526 	beq	r17,fp,10007b18 <__sprint_r.part.0+0xcc>
10007ac4:	81400017 	ldw	r5,0(r16)
10007ac8:	a009883a 	mov	r4,r20
10007acc:	980d883a 	mov	r6,r19
10007ad0:	00093b40 	call	100093b4 <_fputwc_r>
10007ad4:	e7000044 	addi	fp,fp,1
10007ad8:	14bff81e 	bne	r2,r18,10007abc <__sprint_r.part.0+0x70>
10007adc:	9005883a 	mov	r2,r18
10007ae0:	a8000215 	stw	zero,8(r21)
10007ae4:	a8000115 	stw	zero,4(r21)
10007ae8:	dfc00917 	ldw	ra,36(sp)
10007aec:	df000817 	ldw	fp,32(sp)
10007af0:	ddc00717 	ldw	r23,28(sp)
10007af4:	dd800617 	ldw	r22,24(sp)
10007af8:	dd400517 	ldw	r21,20(sp)
10007afc:	dd000417 	ldw	r20,16(sp)
10007b00:	dcc00317 	ldw	r19,12(sp)
10007b04:	dc800217 	ldw	r18,8(sp)
10007b08:	dc400117 	ldw	r17,4(sp)
10007b0c:	dc000017 	ldw	r16,0(sp)
10007b10:	dec00a04 	addi	sp,sp,40
10007b14:	f800283a 	ret
10007b18:	a8c00217 	ldw	r3,8(r21)
10007b1c:	8c63883a 	add	r17,r17,r17
10007b20:	8c63883a 	add	r17,r17,r17
10007b24:	1c45c83a 	sub	r2,r3,r17
10007b28:	a8800215 	stw	r2,8(r21)
10007b2c:	b5800204 	addi	r22,r22,8
10007b30:	bdc00204 	addi	r23,r23,8
10007b34:	103fdb1e 	bne	r2,zero,10007aa4 <__sprint_r.part.0+0x58>
10007b38:	0005883a 	mov	r2,zero
10007b3c:	003fe806 	br	10007ae0 <__sprint_r.part.0+0x94>
10007b40:	0004b600 	call	10004b60 <__sfvwrite_r>
10007b44:	003fe606 	br	10007ae0 <__sprint_r.part.0+0x94>

10007b48 <__sprint_r>:
10007b48:	30c00217 	ldw	r3,8(r6)
10007b4c:	18000126 	beq	r3,zero,10007b54 <__sprint_r+0xc>
10007b50:	0007a4c1 	jmpi	10007a4c <__sprint_r.part.0>
10007b54:	30000115 	stw	zero,4(r6)
10007b58:	0005883a 	mov	r2,zero
10007b5c:	f800283a 	ret

10007b60 <___vfiprintf_internal_r>:
10007b60:	defeca04 	addi	sp,sp,-1240
10007b64:	dcc12f15 	stw	r19,1212(sp)
10007b68:	dfc13515 	stw	ra,1236(sp)
10007b6c:	df013415 	stw	fp,1232(sp)
10007b70:	ddc13315 	stw	r23,1228(sp)
10007b74:	dd813215 	stw	r22,1224(sp)
10007b78:	dd413115 	stw	r21,1220(sp)
10007b7c:	dd013015 	stw	r20,1216(sp)
10007b80:	dc812e15 	stw	r18,1208(sp)
10007b84:	dc412d15 	stw	r17,1204(sp)
10007b88:	dc012c15 	stw	r16,1200(sp)
10007b8c:	d9012115 	stw	r4,1156(sp)
10007b90:	d9412015 	stw	r5,1152(sp)
10007b94:	d9c12315 	stw	r7,1164(sp)
10007b98:	3027883a 	mov	r19,r6
10007b9c:	20000226 	beq	r4,zero,10007ba8 <___vfiprintf_internal_r+0x48>
10007ba0:	20800e17 	ldw	r2,56(r4)
10007ba4:	1000f726 	beq	r2,zero,10007f84 <___vfiprintf_internal_r+0x424>
10007ba8:	d8812017 	ldw	r2,1152(sp)
10007bac:	10c0030b 	ldhu	r3,12(r2)
10007bb0:	1908000c 	andi	r4,r3,8192
10007bb4:	1805883a 	mov	r2,r3
10007bb8:	2000081e 	bne	r4,zero,10007bdc <___vfiprintf_internal_r+0x7c>
10007bbc:	d9412017 	ldw	r5,1152(sp)
10007bc0:	18880014 	ori	r2,r3,8192
10007bc4:	00f7ffc4 	movi	r3,-8193
10007bc8:	29001917 	ldw	r4,100(r5)
10007bcc:	2880030d 	sth	r2,12(r5)
10007bd0:	20c8703a 	and	r4,r4,r3
10007bd4:	29001915 	stw	r4,100(r5)
10007bd8:	1007883a 	mov	r3,r2
10007bdc:	1100020c 	andi	r4,r2,8
10007be0:	2000a726 	beq	r4,zero,10007e80 <___vfiprintf_internal_r+0x320>
10007be4:	d9412017 	ldw	r5,1152(sp)
10007be8:	29000417 	ldw	r4,16(r5)
10007bec:	2000a426 	beq	r4,zero,10007e80 <___vfiprintf_internal_r+0x320>
10007bf0:	1080068c 	andi	r2,r2,26
10007bf4:	01000284 	movi	r4,10
10007bf8:	1100ab26 	beq	r2,r4,10007ea8 <___vfiprintf_internal_r+0x348>
10007bfc:	d9010a04 	addi	r4,sp,1064
10007c00:	d94109c4 	addi	r5,sp,1063
10007c04:	07040074 	movhi	fp,4097
10007c08:	04440074 	movhi	r17,4097
10007c0c:	2145c83a 	sub	r2,r4,r5
10007c10:	e73de104 	addi	fp,fp,-2172
10007c14:	8c7ddd04 	addi	r17,r17,-2188
10007c18:	d9011e15 	stw	r4,1144(sp)
10007c1c:	d9411f15 	stw	r5,1148(sp)
10007c20:	dec11a15 	stw	sp,1128(sp)
10007c24:	d8011c15 	stw	zero,1136(sp)
10007c28:	d8011b15 	stw	zero,1132(sp)
10007c2c:	d8012715 	stw	zero,1180(sp)
10007c30:	d8012515 	stw	zero,1172(sp)
10007c34:	d811883a 	mov	r8,sp
10007c38:	d8812815 	stw	r2,1184(sp)
10007c3c:	982f883a 	mov	r23,r19
10007c40:	b8800007 	ldb	r2,0(r23)
10007c44:	1003b026 	beq	r2,zero,10008b08 <___vfiprintf_internal_r+0xfa8>
10007c48:	01000944 	movi	r4,37
10007c4c:	1103ae26 	beq	r2,r4,10008b08 <___vfiprintf_internal_r+0xfa8>
10007c50:	b805883a 	mov	r2,r23
10007c54:	00000106 	br	10007c5c <___vfiprintf_internal_r+0xfc>
10007c58:	19000326 	beq	r3,r4,10007c68 <___vfiprintf_internal_r+0x108>
10007c5c:	10800044 	addi	r2,r2,1
10007c60:	10c00007 	ldb	r3,0(r2)
10007c64:	183ffc1e 	bne	r3,zero,10007c58 <___vfiprintf_internal_r+0xf8>
10007c68:	15e1c83a 	sub	r16,r2,r23
10007c6c:	1029883a 	mov	r20,r2
10007c70:	80001026 	beq	r16,zero,10007cb4 <___vfiprintf_internal_r+0x154>
10007c74:	d8c11c17 	ldw	r3,1136(sp)
10007c78:	d8811b17 	ldw	r2,1132(sp)
10007c7c:	45c00015 	stw	r23,0(r8)
10007c80:	80c7883a 	add	r3,r16,r3
10007c84:	10800044 	addi	r2,r2,1
10007c88:	44000115 	stw	r16,4(r8)
10007c8c:	d8c11c15 	stw	r3,1136(sp)
10007c90:	d8811b15 	stw	r2,1132(sp)
10007c94:	010001c4 	movi	r4,7
10007c98:	2080740e 	bge	r4,r2,10007e6c <___vfiprintf_internal_r+0x30c>
10007c9c:	1803a71e 	bne	r3,zero,10008b3c <___vfiprintf_internal_r+0xfdc>
10007ca0:	d8c12517 	ldw	r3,1172(sp)
10007ca4:	d8011b15 	stw	zero,1132(sp)
10007ca8:	d811883a 	mov	r8,sp
10007cac:	1c07883a 	add	r3,r3,r16
10007cb0:	d8c12515 	stw	r3,1172(sp)
10007cb4:	a0800007 	ldb	r2,0(r20)
10007cb8:	1002bf26 	beq	r2,zero,100087b8 <___vfiprintf_internal_r+0xc58>
10007cbc:	a5c00044 	addi	r23,r20,1
10007cc0:	a1800047 	ldb	r6,1(r20)
10007cc4:	d8011d85 	stb	zero,1142(sp)
10007cc8:	d8012205 	stb	zero,1160(sp)
10007ccc:	043fffc4 	movi	r16,-1
10007cd0:	d8012415 	stw	zero,1168(sp)
10007cd4:	0025883a 	mov	r18,zero
10007cd8:	05001604 	movi	r20,88
10007cdc:	05400244 	movi	r21,9
10007ce0:	4027883a 	mov	r19,r8
10007ce4:	bdc00044 	addi	r23,r23,1
10007ce8:	30bff804 	addi	r2,r6,-32
10007cec:	a0825636 	bltu	r20,r2,10008648 <___vfiprintf_internal_r+0xae8>
10007cf0:	100490ba 	slli	r2,r2,2
10007cf4:	01040034 	movhi	r4,4096
10007cf8:	211f4204 	addi	r4,r4,32008
10007cfc:	1105883a 	add	r2,r2,r4
10007d00:	10800017 	ldw	r2,0(r2)
10007d04:	1000683a 	jmp	r2
10007d08:	100085d8 	cmpnei	zero,r2,535
10007d0c:	10008648 	cmpgei	zero,r2,537
10007d10:	10008648 	cmpgei	zero,r2,537
10007d14:	1000863c 	xorhi	zero,r2,536
10007d18:	10008648 	cmpgei	zero,r2,537
10007d1c:	10008648 	cmpgei	zero,r2,537
10007d20:	10008648 	cmpgei	zero,r2,537
10007d24:	10008648 	cmpgei	zero,r2,537
10007d28:	10008648 	cmpgei	zero,r2,537
10007d2c:	10008648 	cmpgei	zero,r2,537
10007d30:	100083c8 	cmpgei	zero,r2,527
10007d34:	100085f0 	cmpltui	zero,r2,535
10007d38:	10008648 	cmpgei	zero,r2,537
10007d3c:	10007f9c 	xori	zero,r2,510
10007d40:	100083ec 	andhi	zero,r2,527
10007d44:	10008648 	cmpgei	zero,r2,537
10007d48:	10007fa8 	cmpgeui	zero,r2,510
10007d4c:	10007fb4 	orhi	zero,r2,510
10007d50:	10007fb4 	orhi	zero,r2,510
10007d54:	10007fb4 	orhi	zero,r2,510
10007d58:	10007fb4 	orhi	zero,r2,510
10007d5c:	10007fb4 	orhi	zero,r2,510
10007d60:	10007fb4 	orhi	zero,r2,510
10007d64:	10007fb4 	orhi	zero,r2,510
10007d68:	10007fb4 	orhi	zero,r2,510
10007d6c:	10007fb4 	orhi	zero,r2,510
10007d70:	10008648 	cmpgei	zero,r2,537
10007d74:	10008648 	cmpgei	zero,r2,537
10007d78:	10008648 	cmpgei	zero,r2,537
10007d7c:	10008648 	cmpgei	zero,r2,537
10007d80:	10008648 	cmpgei	zero,r2,537
10007d84:	10008648 	cmpgei	zero,r2,537
10007d88:	10008648 	cmpgei	zero,r2,537
10007d8c:	10008648 	cmpgei	zero,r2,537
10007d90:	10008648 	cmpgei	zero,r2,537
10007d94:	10008648 	cmpgei	zero,r2,537
10007d98:	10007ff4 	orhi	zero,r2,511
10007d9c:	10008648 	cmpgei	zero,r2,537
10007da0:	10008648 	cmpgei	zero,r2,537
10007da4:	10008648 	cmpgei	zero,r2,537
10007da8:	10008648 	cmpgei	zero,r2,537
10007dac:	10008648 	cmpgei	zero,r2,537
10007db0:	10008648 	cmpgei	zero,r2,537
10007db4:	10008648 	cmpgei	zero,r2,537
10007db8:	10008648 	cmpgei	zero,r2,537
10007dbc:	10008648 	cmpgei	zero,r2,537
10007dc0:	10008648 	cmpgei	zero,r2,537
10007dc4:	100082e4 	muli	zero,r2,523
10007dc8:	10008648 	cmpgei	zero,r2,537
10007dcc:	10008648 	cmpgei	zero,r2,537
10007dd0:	10008648 	cmpgei	zero,r2,537
10007dd4:	10008648 	cmpgei	zero,r2,537
10007dd8:	10008648 	cmpgei	zero,r2,537
10007ddc:	10008324 	muli	zero,r2,524
10007de0:	10008648 	cmpgei	zero,r2,537
10007de4:	10008648 	cmpgei	zero,r2,537
10007de8:	10008368 	cmpgeui	zero,r2,525
10007dec:	10008648 	cmpgei	zero,r2,537
10007df0:	10008648 	cmpgei	zero,r2,537
10007df4:	10008648 	cmpgei	zero,r2,537
10007df8:	10008648 	cmpgei	zero,r2,537
10007dfc:	10008648 	cmpgei	zero,r2,537
10007e00:	10008648 	cmpgei	zero,r2,537
10007e04:	10008648 	cmpgei	zero,r2,537
10007e08:	10008648 	cmpgei	zero,r2,537
10007e0c:	10008648 	cmpgei	zero,r2,537
10007e10:	10008648 	cmpgei	zero,r2,537
10007e14:	100082b0 	cmpltui	zero,r2,522
10007e18:	10008600 	call	11000860 <_gp+0xfe74ec>
10007e1c:	10008648 	cmpgei	zero,r2,537
10007e20:	10008648 	cmpgei	zero,r2,537
10007e24:	10008648 	cmpgei	zero,r2,537
10007e28:	1000843c 	xorhi	zero,r2,528
10007e2c:	10008600 	call	11000860 <_gp+0xfe74ec>
10007e30:	10008648 	cmpgei	zero,r2,537
10007e34:	10008648 	cmpgei	zero,r2,537
10007e38:	10008354 	ori	zero,r2,525
10007e3c:	10008648 	cmpgei	zero,r2,537
10007e40:	100085a0 	cmpeqi	zero,r2,534
10007e44:	10008528 	cmpgeui	zero,r2,532
10007e48:	1000855c 	xori	zero,r2,533
10007e4c:	10008448 	cmpgei	zero,r2,529
10007e50:	10008648 	cmpgei	zero,r2,537
10007e54:	10008454 	ori	zero,r2,529
10007e58:	10008648 	cmpgei	zero,r2,537
10007e5c:	100084b0 	cmpltui	zero,r2,530
10007e60:	10008648 	cmpgei	zero,r2,537
10007e64:	10008648 	cmpgei	zero,r2,537
10007e68:	100084e4 	muli	zero,r2,531
10007e6c:	42000204 	addi	r8,r8,8
10007e70:	d8c12517 	ldw	r3,1172(sp)
10007e74:	1c07883a 	add	r3,r3,r16
10007e78:	d8c12515 	stw	r3,1172(sp)
10007e7c:	003f8d06 	br	10007cb4 <___vfiprintf_internal_r+0x154>
10007e80:	d9012117 	ldw	r4,1156(sp)
10007e84:	d9412017 	ldw	r5,1152(sp)
10007e88:	00026c00 	call	100026c0 <__swsetup_r>
10007e8c:	1000301e 	bne	r2,zero,10007f50 <___vfiprintf_internal_r+0x3f0>
10007e90:	d8812017 	ldw	r2,1152(sp)
10007e94:	01000284 	movi	r4,10
10007e98:	10c0030b 	ldhu	r3,12(r2)
10007e9c:	1805883a 	mov	r2,r3
10007ea0:	1080068c 	andi	r2,r2,26
10007ea4:	113f551e 	bne	r2,r4,10007bfc <___vfiprintf_internal_r+0x9c>
10007ea8:	d9012017 	ldw	r4,1152(sp)
10007eac:	2080038b 	ldhu	r2,14(r4)
10007eb0:	113fffcc 	andi	r4,r2,65535
10007eb4:	2120001c 	xori	r4,r4,32768
10007eb8:	21200004 	addi	r4,r4,-32768
10007ebc:	203f4f16 	blt	r4,zero,10007bfc <___vfiprintf_internal_r+0x9c>
10007ec0:	d9412017 	ldw	r5,1152(sp)
10007ec4:	d9012117 	ldw	r4,1156(sp)
10007ec8:	d9c12317 	ldw	r7,1164(sp)
10007ecc:	2b001917 	ldw	r12,100(r5)
10007ed0:	2ac00717 	ldw	r11,28(r5)
10007ed4:	2a800917 	ldw	r10,36(r5)
10007ed8:	02010004 	movi	r8,1024
10007edc:	18ffff4c 	andi	r3,r3,65533
10007ee0:	da0b883a 	add	r5,sp,r8
10007ee4:	980d883a 	mov	r6,r19
10007ee8:	d8c1030d 	sth	r3,1036(sp)
10007eec:	db011915 	stw	r12,1124(sp)
10007ef0:	d881038d 	sth	r2,1038(sp)
10007ef4:	dac10715 	stw	r11,1052(sp)
10007ef8:	da810915 	stw	r10,1060(sp)
10007efc:	dec10015 	stw	sp,1024(sp)
10007f00:	dec10415 	stw	sp,1040(sp)
10007f04:	da010215 	stw	r8,1032(sp)
10007f08:	da010515 	stw	r8,1044(sp)
10007f0c:	d8010615 	stw	zero,1048(sp)
10007f10:	0007b600 	call	10007b60 <___vfiprintf_internal_r>
10007f14:	1021883a 	mov	r16,r2
10007f18:	10000416 	blt	r2,zero,10007f2c <___vfiprintf_internal_r+0x3cc>
10007f1c:	d9012117 	ldw	r4,1156(sp)
10007f20:	d9410004 	addi	r5,sp,1024
10007f24:	00041400 	call	10004140 <_fflush_r>
10007f28:	10040f1e 	bne	r2,zero,10008f68 <___vfiprintf_internal_r+0x1408>
10007f2c:	d881030b 	ldhu	r2,1036(sp)
10007f30:	1080100c 	andi	r2,r2,64
10007f34:	10000426 	beq	r2,zero,10007f48 <___vfiprintf_internal_r+0x3e8>
10007f38:	d8c12017 	ldw	r3,1152(sp)
10007f3c:	1880030b 	ldhu	r2,12(r3)
10007f40:	10801014 	ori	r2,r2,64
10007f44:	1880030d 	sth	r2,12(r3)
10007f48:	8005883a 	mov	r2,r16
10007f4c:	00000106 	br	10007f54 <___vfiprintf_internal_r+0x3f4>
10007f50:	00bfffc4 	movi	r2,-1
10007f54:	dfc13517 	ldw	ra,1236(sp)
10007f58:	df013417 	ldw	fp,1232(sp)
10007f5c:	ddc13317 	ldw	r23,1228(sp)
10007f60:	dd813217 	ldw	r22,1224(sp)
10007f64:	dd413117 	ldw	r21,1220(sp)
10007f68:	dd013017 	ldw	r20,1216(sp)
10007f6c:	dcc12f17 	ldw	r19,1212(sp)
10007f70:	dc812e17 	ldw	r18,1208(sp)
10007f74:	dc412d17 	ldw	r17,1204(sp)
10007f78:	dc012c17 	ldw	r16,1200(sp)
10007f7c:	dec13604 	addi	sp,sp,1240
10007f80:	f800283a 	ret
10007f84:	00046fc0 	call	100046fc <__sinit>
10007f88:	003f0706 	br	10007ba8 <___vfiprintf_internal_r+0x48>
10007f8c:	d8c12417 	ldw	r3,1168(sp)
10007f90:	d8812315 	stw	r2,1164(sp)
10007f94:	00c7c83a 	sub	r3,zero,r3
10007f98:	d8c12415 	stw	r3,1168(sp)
10007f9c:	94800114 	ori	r18,r18,4
10007fa0:	b9800007 	ldb	r6,0(r23)
10007fa4:	003f4f06 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10007fa8:	94802014 	ori	r18,r18,128
10007fac:	b9800007 	ldb	r6,0(r23)
10007fb0:	003f4c06 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10007fb4:	dc012615 	stw	r16,1176(sp)
10007fb8:	d8012415 	stw	zero,1168(sp)
10007fbc:	35bff404 	addi	r22,r6,-48
10007fc0:	0009883a 	mov	r4,zero
10007fc4:	b821883a 	mov	r16,r23
10007fc8:	01400284 	movi	r5,10
10007fcc:	000a67c0 	call	1000a67c <__mulsi3>
10007fd0:	81800007 	ldb	r6,0(r16)
10007fd4:	1589883a 	add	r4,r2,r22
10007fd8:	bdc00044 	addi	r23,r23,1
10007fdc:	35bff404 	addi	r22,r6,-48
10007fe0:	b821883a 	mov	r16,r23
10007fe4:	adbff82e 	bgeu	r21,r22,10007fc8 <___vfiprintf_internal_r+0x468>
10007fe8:	d9012415 	stw	r4,1168(sp)
10007fec:	dc012617 	ldw	r16,1176(sp)
10007ff0:	003f3d06 	br	10007ce8 <___vfiprintf_internal_r+0x188>
10007ff4:	d8c12203 	ldbu	r3,1160(sp)
10007ff8:	94800414 	ori	r18,r18,16
10007ffc:	9080080c 	andi	r2,r18,32
10008000:	d8c11d85 	stb	r3,1142(sp)
10008004:	9811883a 	mov	r8,r19
10008008:	d8c12317 	ldw	r3,1164(sp)
1000800c:	10018226 	beq	r2,zero,10008618 <___vfiprintf_internal_r+0xab8>
10008010:	d9012317 	ldw	r4,1164(sp)
10008014:	18800117 	ldw	r2,4(r3)
10008018:	1cc00017 	ldw	r19,0(r3)
1000801c:	21000204 	addi	r4,r4,8
10008020:	d9012315 	stw	r4,1164(sp)
10008024:	102b883a 	mov	r21,r2
10008028:	10030016 	blt	r2,zero,10008c2c <___vfiprintf_internal_r+0x10cc>
1000802c:	dd811d83 	ldbu	r22,1142(sp)
10008030:	8029883a 	mov	r20,r16
10008034:	00800044 	movi	r2,1
10008038:	9d46b03a 	or	r3,r19,r21
1000803c:	80000216 	blt	r16,zero,10008048 <___vfiprintf_internal_r+0x4e8>
10008040:	013fdfc4 	movi	r4,-129
10008044:	9124703a 	and	r18,r18,r4
10008048:	1801b41e 	bne	r3,zero,1000871c <___vfiprintf_internal_r+0xbbc>
1000804c:	80028126 	beq	r16,zero,10008a54 <___vfiprintf_internal_r+0xef4>
10008050:	10803fcc 	andi	r2,r2,255
10008054:	00c00044 	movi	r3,1
10008058:	10c1d126 	beq	r2,r3,100087a0 <___vfiprintf_internal_r+0xc40>
1000805c:	00c00084 	movi	r3,2
10008060:	10c28626 	beq	r2,r3,10008a7c <___vfiprintf_internal_r+0xf1c>
10008064:	d8c10a04 	addi	r3,sp,1064
10008068:	9808d0fa 	srli	r4,r19,3
1000806c:	a80a977a 	slli	r5,r21,29
10008070:	a82ad0fa 	srli	r21,r21,3
10008074:	9cc001cc 	andi	r19,r19,7
10008078:	98800c04 	addi	r2,r19,48
1000807c:	18ffffc4 	addi	r3,r3,-1
10008080:	2926b03a 	or	r19,r5,r4
10008084:	18800005 	stb	r2,0(r3)
10008088:	9d48b03a 	or	r4,r19,r21
1000808c:	203ff61e 	bne	r4,zero,10008068 <___vfiprintf_internal_r+0x508>
10008090:	9100004c 	andi	r4,r18,1
10008094:	d8c12215 	stw	r3,1160(sp)
10008098:	2002b31e 	bne	r4,zero,10008b68 <___vfiprintf_internal_r+0x1008>
1000809c:	d9411e17 	ldw	r5,1144(sp)
100080a0:	28e9c83a 	sub	r20,r5,r3
100080a4:	a02b883a 	mov	r21,r20
100080a8:	a400010e 	bge	r20,r16,100080b0 <___vfiprintf_internal_r+0x550>
100080ac:	802b883a 	mov	r21,r16
100080b0:	b5803fcc 	andi	r22,r22,255
100080b4:	b580201c 	xori	r22,r22,128
100080b8:	b5bfe004 	addi	r22,r22,-128
100080bc:	b0000126 	beq	r22,zero,100080c4 <___vfiprintf_internal_r+0x564>
100080c0:	ad400044 	addi	r21,r21,1
100080c4:	9280008c 	andi	r10,r18,2
100080c8:	50000126 	beq	r10,zero,100080d0 <___vfiprintf_internal_r+0x570>
100080cc:	ad400084 	addi	r21,r21,2
100080d0:	9580210c 	andi	r22,r18,132
100080d4:	b001751e 	bne	r22,zero,100086ac <___vfiprintf_internal_r+0xb4c>
100080d8:	d9012417 	ldw	r4,1168(sp)
100080dc:	2567c83a 	sub	r19,r4,r21
100080e0:	04c1720e 	bge	zero,r19,100086ac <___vfiprintf_internal_r+0xb4c>
100080e4:	01c00404 	movi	r7,16
100080e8:	d8c11c17 	ldw	r3,1136(sp)
100080ec:	3cc36b0e 	bge	r7,r19,10008e9c <___vfiprintf_internal_r+0x133c>
100080f0:	00840074 	movhi	r2,4097
100080f4:	10bde104 	addi	r2,r2,-2172
100080f8:	dc012915 	stw	r16,1188(sp)
100080fc:	d9011b17 	ldw	r4,1132(sp)
10008100:	9821883a 	mov	r16,r19
10008104:	d8812615 	stw	r2,1176(sp)
10008108:	030001c4 	movi	r12,7
1000810c:	5027883a 	mov	r19,r10
10008110:	00000506 	br	10008128 <___vfiprintf_internal_r+0x5c8>
10008114:	21400084 	addi	r5,r4,2
10008118:	42000204 	addi	r8,r8,8
1000811c:	1009883a 	mov	r4,r2
10008120:	843ffc04 	addi	r16,r16,-16
10008124:	3c000d0e 	bge	r7,r16,1000815c <___vfiprintf_internal_r+0x5fc>
10008128:	18c00404 	addi	r3,r3,16
1000812c:	20800044 	addi	r2,r4,1
10008130:	47000015 	stw	fp,0(r8)
10008134:	41c00115 	stw	r7,4(r8)
10008138:	d8c11c15 	stw	r3,1136(sp)
1000813c:	d8811b15 	stw	r2,1132(sp)
10008140:	60bff40e 	bge	r12,r2,10008114 <___vfiprintf_internal_r+0x5b4>
10008144:	18014b1e 	bne	r3,zero,10008674 <___vfiprintf_internal_r+0xb14>
10008148:	843ffc04 	addi	r16,r16,-16
1000814c:	0009883a 	mov	r4,zero
10008150:	01400044 	movi	r5,1
10008154:	d811883a 	mov	r8,sp
10008158:	3c3ff316 	blt	r7,r16,10008128 <___vfiprintf_internal_r+0x5c8>
1000815c:	9815883a 	mov	r10,r19
10008160:	8027883a 	mov	r19,r16
10008164:	dc012917 	ldw	r16,1188(sp)
10008168:	d9012617 	ldw	r4,1176(sp)
1000816c:	98c7883a 	add	r3,r19,r3
10008170:	44c00115 	stw	r19,4(r8)
10008174:	41000015 	stw	r4,0(r8)
10008178:	d8c11c15 	stw	r3,1136(sp)
1000817c:	d9411b15 	stw	r5,1132(sp)
10008180:	008001c4 	movi	r2,7
10008184:	11425116 	blt	r2,r5,10008acc <___vfiprintf_internal_r+0xf6c>
10008188:	d9011d87 	ldb	r4,1142(sp)
1000818c:	42000204 	addi	r8,r8,8
10008190:	28800044 	addi	r2,r5,1
10008194:	20014a1e 	bne	r4,zero,100086c0 <___vfiprintf_internal_r+0xb60>
10008198:	50000c26 	beq	r10,zero,100081cc <___vfiprintf_internal_r+0x66c>
1000819c:	d9011d04 	addi	r4,sp,1140
100081a0:	18c00084 	addi	r3,r3,2
100081a4:	41000015 	stw	r4,0(r8)
100081a8:	01000084 	movi	r4,2
100081ac:	41000115 	stw	r4,4(r8)
100081b0:	d8c11c15 	stw	r3,1136(sp)
100081b4:	d8811b15 	stw	r2,1132(sp)
100081b8:	010001c4 	movi	r4,7
100081bc:	20822016 	blt	r4,r2,10008a40 <___vfiprintf_internal_r+0xee0>
100081c0:	100b883a 	mov	r5,r2
100081c4:	42000204 	addi	r8,r8,8
100081c8:	10800044 	addi	r2,r2,1
100081cc:	01002004 	movi	r4,128
100081d0:	b101de26 	beq	r22,r4,1000894c <___vfiprintf_internal_r+0xdec>
100081d4:	8521c83a 	sub	r16,r16,r20
100081d8:	0400230e 	bge	zero,r16,10008268 <___vfiprintf_internal_r+0x708>
100081dc:	04c00404 	movi	r19,16
100081e0:	9c030d0e 	bge	r19,r16,10008e18 <___vfiprintf_internal_r+0x12b8>
100081e4:	00840074 	movhi	r2,4097
100081e8:	10bddd04 	addi	r2,r2,-2188
100081ec:	d8812615 	stw	r2,1176(sp)
100081f0:	058001c4 	movi	r22,7
100081f4:	00000506 	br	1000820c <___vfiprintf_internal_r+0x6ac>
100081f8:	28800084 	addi	r2,r5,2
100081fc:	42000204 	addi	r8,r8,8
10008200:	200b883a 	mov	r5,r4
10008204:	843ffc04 	addi	r16,r16,-16
10008208:	9c000d0e 	bge	r19,r16,10008240 <___vfiprintf_internal_r+0x6e0>
1000820c:	18c00404 	addi	r3,r3,16
10008210:	29000044 	addi	r4,r5,1
10008214:	44400015 	stw	r17,0(r8)
10008218:	44c00115 	stw	r19,4(r8)
1000821c:	d8c11c15 	stw	r3,1136(sp)
10008220:	d9011b15 	stw	r4,1132(sp)
10008224:	b13ff40e 	bge	r22,r4,100081f8 <___vfiprintf_internal_r+0x698>
10008228:	1801321e 	bne	r3,zero,100086f4 <___vfiprintf_internal_r+0xb94>
1000822c:	843ffc04 	addi	r16,r16,-16
10008230:	000b883a 	mov	r5,zero
10008234:	00800044 	movi	r2,1
10008238:	d811883a 	mov	r8,sp
1000823c:	9c3ff316 	blt	r19,r16,1000820c <___vfiprintf_internal_r+0x6ac>
10008240:	d9012617 	ldw	r4,1176(sp)
10008244:	1c07883a 	add	r3,r3,r16
10008248:	44000115 	stw	r16,4(r8)
1000824c:	41000015 	stw	r4,0(r8)
10008250:	d8c11c15 	stw	r3,1136(sp)
10008254:	d8811b15 	stw	r2,1132(sp)
10008258:	010001c4 	movi	r4,7
1000825c:	20816216 	blt	r4,r2,100087e8 <___vfiprintf_internal_r+0xc88>
10008260:	42000204 	addi	r8,r8,8
10008264:	10800044 	addi	r2,r2,1
10008268:	d9012217 	ldw	r4,1160(sp)
1000826c:	1d07883a 	add	r3,r3,r20
10008270:	45000115 	stw	r20,4(r8)
10008274:	41000015 	stw	r4,0(r8)
10008278:	d8c11c15 	stw	r3,1136(sp)
1000827c:	d8811b15 	stw	r2,1132(sp)
10008280:	010001c4 	movi	r4,7
10008284:	2081610e 	bge	r4,r2,1000880c <___vfiprintf_internal_r+0xcac>
10008288:	1802211e 	bne	r3,zero,10008b10 <___vfiprintf_internal_r+0xfb0>
1000828c:	d8011b15 	stw	zero,1132(sp)
10008290:	9480010c 	andi	r18,r18,4
10008294:	9002171e 	bne	r18,zero,10008af4 <___vfiprintf_internal_r+0xf94>
10008298:	d9412417 	ldw	r5,1168(sp)
1000829c:	a9433716 	blt	r21,r5,10008f7c <___vfiprintf_internal_r+0x141c>
100082a0:	d8812517 	ldw	r2,1172(sp)
100082a4:	1545883a 	add	r2,r2,r21
100082a8:	d8812515 	stw	r2,1172(sp)
100082ac:	00019a06 	br	10008918 <___vfiprintf_internal_r+0xdb8>
100082b0:	d8c12317 	ldw	r3,1164(sp)
100082b4:	05400044 	movi	r21,1
100082b8:	9811883a 	mov	r8,r19
100082bc:	18800017 	ldw	r2,0(r3)
100082c0:	18c00104 	addi	r3,r3,4
100082c4:	d8c12315 	stw	r3,1164(sp)
100082c8:	d8c10004 	addi	r3,sp,1024
100082cc:	d8011d85 	stb	zero,1142(sp)
100082d0:	d8810005 	stb	r2,1024(sp)
100082d4:	a829883a 	mov	r20,r21
100082d8:	d8c12215 	stw	r3,1160(sp)
100082dc:	0021883a 	mov	r16,zero
100082e0:	003f7806 	br	100080c4 <___vfiprintf_internal_r+0x564>
100082e4:	94800414 	ori	r18,r18,16
100082e8:	9080080c 	andi	r2,r18,32
100082ec:	9811883a 	mov	r8,r19
100082f0:	10009026 	beq	r2,zero,10008534 <___vfiprintf_internal_r+0x9d4>
100082f4:	d8812317 	ldw	r2,1164(sp)
100082f8:	d8c12317 	ldw	r3,1164(sp)
100082fc:	14c00017 	ldw	r19,0(r2)
10008300:	15400117 	ldw	r21,4(r2)
10008304:	18c00204 	addi	r3,r3,8
10008308:	d8c12315 	stw	r3,1164(sp)
1000830c:	0005883a 	mov	r2,zero
10008310:	9d46b03a 	or	r3,r19,r21
10008314:	d8011d85 	stb	zero,1142(sp)
10008318:	8029883a 	mov	r20,r16
1000831c:	002d883a 	mov	r22,zero
10008320:	003f4606 	br	1000803c <___vfiprintf_internal_r+0x4dc>
10008324:	94800414 	ori	r18,r18,16
10008328:	9080080c 	andi	r2,r18,32
1000832c:	9811883a 	mov	r8,r19
10008330:	10006226 	beq	r2,zero,100084bc <___vfiprintf_internal_r+0x95c>
10008334:	d9012317 	ldw	r4,1164(sp)
10008338:	00800044 	movi	r2,1
1000833c:	24c00017 	ldw	r19,0(r4)
10008340:	25400117 	ldw	r21,4(r4)
10008344:	21000204 	addi	r4,r4,8
10008348:	d9012315 	stw	r4,1164(sp)
1000834c:	9d46b03a 	or	r3,r19,r21
10008350:	003ff006 	br	10008314 <___vfiprintf_internal_r+0x7b4>
10008354:	b9800007 	ldb	r6,0(r23)
10008358:	00801b04 	movi	r2,108
1000835c:	3082b226 	beq	r6,r2,10008e28 <___vfiprintf_internal_r+0x12c8>
10008360:	94800414 	ori	r18,r18,16
10008364:	003e5f06 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10008368:	d8c12203 	ldbu	r3,1160(sp)
1000836c:	01040074 	movhi	r4,4097
10008370:	213d7704 	addi	r4,r4,-2596
10008374:	d8c11d85 	stb	r3,1142(sp)
10008378:	d9012715 	stw	r4,1180(sp)
1000837c:	90c0080c 	andi	r3,r18,32
10008380:	9811883a 	mov	r8,r19
10008384:	d8812317 	ldw	r2,1164(sp)
10008388:	18005f26 	beq	r3,zero,10008508 <___vfiprintf_internal_r+0x9a8>
1000838c:	d9012317 	ldw	r4,1164(sp)
10008390:	14c00017 	ldw	r19,0(r2)
10008394:	15400117 	ldw	r21,4(r2)
10008398:	21000204 	addi	r4,r4,8
1000839c:	d9012315 	stw	r4,1164(sp)
100083a0:	9080004c 	andi	r2,r18,1
100083a4:	1001e226 	beq	r2,zero,10008b30 <___vfiprintf_internal_r+0xfd0>
100083a8:	9d46b03a 	or	r3,r19,r21
100083ac:	18024e26 	beq	r3,zero,10008ce8 <___vfiprintf_internal_r+0x1188>
100083b0:	00800c04 	movi	r2,48
100083b4:	d8811d05 	stb	r2,1140(sp)
100083b8:	d9811d45 	stb	r6,1141(sp)
100083bc:	94800094 	ori	r18,r18,2
100083c0:	00800084 	movi	r2,2
100083c4:	003fd306 	br	10008314 <___vfiprintf_internal_r+0x7b4>
100083c8:	d9012317 	ldw	r4,1164(sp)
100083cc:	d9412317 	ldw	r5,1164(sp)
100083d0:	21000017 	ldw	r4,0(r4)
100083d4:	28800104 	addi	r2,r5,4
100083d8:	d9012415 	stw	r4,1168(sp)
100083dc:	203eeb16 	blt	r4,zero,10007f8c <___vfiprintf_internal_r+0x42c>
100083e0:	d8812315 	stw	r2,1164(sp)
100083e4:	b9800007 	ldb	r6,0(r23)
100083e8:	003e3e06 	br	10007ce4 <___vfiprintf_internal_r+0x184>
100083ec:	b9800007 	ldb	r6,0(r23)
100083f0:	01000a84 	movi	r4,42
100083f4:	b8800044 	addi	r2,r23,1
100083f8:	3102d226 	beq	r6,r4,10008f44 <___vfiprintf_internal_r+0x13e4>
100083fc:	35bff404 	addi	r22,r6,-48
10008400:	102f883a 	mov	r23,r2
10008404:	0021883a 	mov	r16,zero
10008408:	adbe3736 	bltu	r21,r22,10007ce8 <___vfiprintf_internal_r+0x188>
1000840c:	0009883a 	mov	r4,zero
10008410:	01400284 	movi	r5,10
10008414:	000a67c0 	call	1000a67c <__mulsi3>
10008418:	b9800007 	ldb	r6,0(r23)
1000841c:	b089883a 	add	r4,r22,r2
10008420:	bdc00044 	addi	r23,r23,1
10008424:	35bff404 	addi	r22,r6,-48
10008428:	adbff92e 	bgeu	r21,r22,10008410 <___vfiprintf_internal_r+0x8b0>
1000842c:	2021883a 	mov	r16,r4
10008430:	203e2d0e 	bge	r4,zero,10007ce8 <___vfiprintf_internal_r+0x188>
10008434:	043fffc4 	movi	r16,-1
10008438:	003e2b06 	br	10007ce8 <___vfiprintf_internal_r+0x188>
1000843c:	94801014 	ori	r18,r18,64
10008440:	b9800007 	ldb	r6,0(r23)
10008444:	003e2706 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10008448:	94800814 	ori	r18,r18,32
1000844c:	b9800007 	ldb	r6,0(r23)
10008450:	003e2406 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10008454:	d9412317 	ldw	r5,1164(sp)
10008458:	d8812317 	ldw	r2,1164(sp)
1000845c:	d8011d85 	stb	zero,1142(sp)
10008460:	29400017 	ldw	r5,0(r5)
10008464:	9811883a 	mov	r8,r19
10008468:	14c00104 	addi	r19,r2,4
1000846c:	d9412215 	stw	r5,1160(sp)
10008470:	28029026 	beq	r5,zero,10008eb4 <___vfiprintf_internal_r+0x1354>
10008474:	d9012217 	ldw	r4,1160(sp)
10008478:	80027616 	blt	r16,zero,10008e54 <___vfiprintf_internal_r+0x12f4>
1000847c:	000b883a 	mov	r5,zero
10008480:	800d883a 	mov	r6,r16
10008484:	da012a15 	stw	r8,1192(sp)
10008488:	0005bb40 	call	10005bb4 <memchr>
1000848c:	da012a17 	ldw	r8,1192(sp)
10008490:	1002a026 	beq	r2,zero,10008f14 <___vfiprintf_internal_r+0x13b4>
10008494:	d8c12217 	ldw	r3,1160(sp)
10008498:	10e9c83a 	sub	r20,r2,r3
1000849c:	85023816 	blt	r16,r20,10008d80 <___vfiprintf_internal_r+0x1220>
100084a0:	dd811d83 	ldbu	r22,1142(sp)
100084a4:	dcc12315 	stw	r19,1164(sp)
100084a8:	0021883a 	mov	r16,zero
100084ac:	003efd06 	br	100080a4 <___vfiprintf_internal_r+0x544>
100084b0:	9080080c 	andi	r2,r18,32
100084b4:	9811883a 	mov	r8,r19
100084b8:	103f9e1e 	bne	r2,zero,10008334 <___vfiprintf_internal_r+0x7d4>
100084bc:	9080040c 	andi	r2,r18,16
100084c0:	10021726 	beq	r2,zero,10008d20 <___vfiprintf_internal_r+0x11c0>
100084c4:	d9412317 	ldw	r5,1164(sp)
100084c8:	002b883a 	mov	r21,zero
100084cc:	00800044 	movi	r2,1
100084d0:	2cc00017 	ldw	r19,0(r5)
100084d4:	29400104 	addi	r5,r5,4
100084d8:	d9412315 	stw	r5,1164(sp)
100084dc:	9807883a 	mov	r3,r19
100084e0:	003f8c06 	br	10008314 <___vfiprintf_internal_r+0x7b4>
100084e4:	d8c12203 	ldbu	r3,1160(sp)
100084e8:	01040074 	movhi	r4,4097
100084ec:	213d7c04 	addi	r4,r4,-2576
100084f0:	d8c11d85 	stb	r3,1142(sp)
100084f4:	d9012715 	stw	r4,1180(sp)
100084f8:	90c0080c 	andi	r3,r18,32
100084fc:	9811883a 	mov	r8,r19
10008500:	d8812317 	ldw	r2,1164(sp)
10008504:	183fa11e 	bne	r3,zero,1000838c <___vfiprintf_internal_r+0x82c>
10008508:	90c0040c 	andi	r3,r18,16
1000850c:	1801e526 	beq	r3,zero,10008ca4 <___vfiprintf_internal_r+0x1144>
10008510:	d9412317 	ldw	r5,1164(sp)
10008514:	14c00017 	ldw	r19,0(r2)
10008518:	002b883a 	mov	r21,zero
1000851c:	29400104 	addi	r5,r5,4
10008520:	d9412315 	stw	r5,1164(sp)
10008524:	003f9e06 	br	100083a0 <___vfiprintf_internal_r+0x840>
10008528:	9080080c 	andi	r2,r18,32
1000852c:	9811883a 	mov	r8,r19
10008530:	103f701e 	bne	r2,zero,100082f4 <___vfiprintf_internal_r+0x794>
10008534:	9080040c 	andi	r2,r18,16
10008538:	1001ef26 	beq	r2,zero,10008cf8 <___vfiprintf_internal_r+0x1198>
1000853c:	d9012317 	ldw	r4,1164(sp)
10008540:	002b883a 	mov	r21,zero
10008544:	0005883a 	mov	r2,zero
10008548:	24c00017 	ldw	r19,0(r4)
1000854c:	21000104 	addi	r4,r4,4
10008550:	d9012315 	stw	r4,1164(sp)
10008554:	9807883a 	mov	r3,r19
10008558:	003f6e06 	br	10008314 <___vfiprintf_internal_r+0x7b4>
1000855c:	d8c12317 	ldw	r3,1164(sp)
10008560:	9811883a 	mov	r8,r19
10008564:	00800c04 	movi	r2,48
10008568:	1cc00017 	ldw	r19,0(r3)
1000856c:	01040074 	movhi	r4,4097
10008570:	18c00104 	addi	r3,r3,4
10008574:	d8811d05 	stb	r2,1140(sp)
10008578:	213d7c04 	addi	r4,r4,-2576
1000857c:	00801e04 	movi	r2,120
10008580:	d8811d45 	stb	r2,1141(sp)
10008584:	d8c12315 	stw	r3,1164(sp)
10008588:	002b883a 	mov	r21,zero
1000858c:	94800094 	ori	r18,r18,2
10008590:	d9012715 	stw	r4,1180(sp)
10008594:	00800084 	movi	r2,2
10008598:	9807883a 	mov	r3,r19
1000859c:	003f5d06 	br	10008314 <___vfiprintf_internal_r+0x7b4>
100085a0:	d8c12203 	ldbu	r3,1160(sp)
100085a4:	9080080c 	andi	r2,r18,32
100085a8:	9811883a 	mov	r8,r19
100085ac:	d8c11d85 	stb	r3,1142(sp)
100085b0:	1001b126 	beq	r2,zero,10008c78 <___vfiprintf_internal_r+0x1118>
100085b4:	d9012317 	ldw	r4,1164(sp)
100085b8:	d9412517 	ldw	r5,1172(sp)
100085bc:	20800017 	ldw	r2,0(r4)
100085c0:	2807d7fa 	srai	r3,r5,31
100085c4:	21000104 	addi	r4,r4,4
100085c8:	d9012315 	stw	r4,1164(sp)
100085cc:	11400015 	stw	r5,0(r2)
100085d0:	10c00115 	stw	r3,4(r2)
100085d4:	003d9a06 	br	10007c40 <___vfiprintf_internal_r+0xe0>
100085d8:	d8812207 	ldb	r2,1160(sp)
100085dc:	1001c41e 	bne	r2,zero,10008cf0 <___vfiprintf_internal_r+0x1190>
100085e0:	00c00804 	movi	r3,32
100085e4:	d8c12205 	stb	r3,1160(sp)
100085e8:	b9800007 	ldb	r6,0(r23)
100085ec:	003dbd06 	br	10007ce4 <___vfiprintf_internal_r+0x184>
100085f0:	00c00ac4 	movi	r3,43
100085f4:	d8c12205 	stb	r3,1160(sp)
100085f8:	b9800007 	ldb	r6,0(r23)
100085fc:	003db906 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10008600:	d8c12203 	ldbu	r3,1160(sp)
10008604:	9080080c 	andi	r2,r18,32
10008608:	9811883a 	mov	r8,r19
1000860c:	d8c11d85 	stb	r3,1142(sp)
10008610:	d8c12317 	ldw	r3,1164(sp)
10008614:	103e7e1e 	bne	r2,zero,10008010 <___vfiprintf_internal_r+0x4b0>
10008618:	9080040c 	andi	r2,r18,16
1000861c:	1001a926 	beq	r2,zero,10008cc4 <___vfiprintf_internal_r+0x1164>
10008620:	1cc00017 	ldw	r19,0(r3)
10008624:	d9412317 	ldw	r5,1164(sp)
10008628:	982bd7fa 	srai	r21,r19,31
1000862c:	29400104 	addi	r5,r5,4
10008630:	d9412315 	stw	r5,1164(sp)
10008634:	a805883a 	mov	r2,r21
10008638:	003e7b06 	br	10008028 <___vfiprintf_internal_r+0x4c8>
1000863c:	94800054 	ori	r18,r18,1
10008640:	b9800007 	ldb	r6,0(r23)
10008644:	003da706 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10008648:	d8c12203 	ldbu	r3,1160(sp)
1000864c:	9811883a 	mov	r8,r19
10008650:	d8c11d85 	stb	r3,1142(sp)
10008654:	30005826 	beq	r6,zero,100087b8 <___vfiprintf_internal_r+0xc58>
10008658:	05400044 	movi	r21,1
1000865c:	d8c10004 	addi	r3,sp,1024
10008660:	d9810005 	stb	r6,1024(sp)
10008664:	d8011d85 	stb	zero,1142(sp)
10008668:	a829883a 	mov	r20,r21
1000866c:	d8c12215 	stw	r3,1160(sp)
10008670:	003f1a06 	br	100082dc <___vfiprintf_internal_r+0x77c>
10008674:	d9012117 	ldw	r4,1156(sp)
10008678:	d9412017 	ldw	r5,1152(sp)
1000867c:	d9811a04 	addi	r6,sp,1128
10008680:	d9c12a15 	stw	r7,1192(sp)
10008684:	db012b15 	stw	r12,1196(sp)
10008688:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
1000868c:	d9c12a17 	ldw	r7,1192(sp)
10008690:	db012b17 	ldw	r12,1196(sp)
10008694:	10004e1e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008698:	d9011b17 	ldw	r4,1132(sp)
1000869c:	d8c11c17 	ldw	r3,1136(sp)
100086a0:	d811883a 	mov	r8,sp
100086a4:	21400044 	addi	r5,r4,1
100086a8:	003e9d06 	br	10008120 <___vfiprintf_internal_r+0x5c0>
100086ac:	d9411b17 	ldw	r5,1132(sp)
100086b0:	d8c11c17 	ldw	r3,1136(sp)
100086b4:	28800044 	addi	r2,r5,1
100086b8:	d9011d87 	ldb	r4,1142(sp)
100086bc:	203eb626 	beq	r4,zero,10008198 <___vfiprintf_internal_r+0x638>
100086c0:	01000044 	movi	r4,1
100086c4:	d9411d84 	addi	r5,sp,1142
100086c8:	1907883a 	add	r3,r3,r4
100086cc:	41400015 	stw	r5,0(r8)
100086d0:	41000115 	stw	r4,4(r8)
100086d4:	d8c11c15 	stw	r3,1136(sp)
100086d8:	d8811b15 	stw	r2,1132(sp)
100086dc:	014001c4 	movi	r5,7
100086e0:	2880ce16 	blt	r5,r2,10008a1c <___vfiprintf_internal_r+0xebc>
100086e4:	100b883a 	mov	r5,r2
100086e8:	42000204 	addi	r8,r8,8
100086ec:	10800044 	addi	r2,r2,1
100086f0:	003ea906 	br	10008198 <___vfiprintf_internal_r+0x638>
100086f4:	d9012117 	ldw	r4,1156(sp)
100086f8:	d9412017 	ldw	r5,1152(sp)
100086fc:	d9811a04 	addi	r6,sp,1128
10008700:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008704:	1000321e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008708:	d9411b17 	ldw	r5,1132(sp)
1000870c:	d8c11c17 	ldw	r3,1136(sp)
10008710:	d811883a 	mov	r8,sp
10008714:	28800044 	addi	r2,r5,1
10008718:	003eba06 	br	10008204 <___vfiprintf_internal_r+0x6a4>
1000871c:	10803fcc 	andi	r2,r2,255
10008720:	00c00044 	movi	r3,1
10008724:	10fe4d1e 	bne	r2,r3,1000805c <___vfiprintf_internal_r+0x4fc>
10008728:	a800021e 	bne	r21,zero,10008734 <___vfiprintf_internal_r+0xbd4>
1000872c:	00800244 	movi	r2,9
10008730:	14c01b2e 	bgeu	r2,r19,100087a0 <___vfiprintf_internal_r+0xc40>
10008734:	dc012215 	stw	r16,1160(sp)
10008738:	dd010a04 	addi	r20,sp,1064
1000873c:	a821883a 	mov	r16,r21
10008740:	402b883a 	mov	r21,r8
10008744:	9809883a 	mov	r4,r19
10008748:	800b883a 	mov	r5,r16
1000874c:	01800284 	movi	r6,10
10008750:	000f883a 	mov	r7,zero
10008754:	0009f340 	call	10009f34 <__umoddi3>
10008758:	10800c04 	addi	r2,r2,48
1000875c:	a53fffc4 	addi	r20,r20,-1
10008760:	9809883a 	mov	r4,r19
10008764:	800b883a 	mov	r5,r16
10008768:	01800284 	movi	r6,10
1000876c:	000f883a 	mov	r7,zero
10008770:	a0800005 	stb	r2,0(r20)
10008774:	00098f40 	call	100098f4 <__udivdi3>
10008778:	1027883a 	mov	r19,r2
1000877c:	10c4b03a 	or	r2,r2,r3
10008780:	1821883a 	mov	r16,r3
10008784:	103fef1e 	bne	r2,zero,10008744 <___vfiprintf_internal_r+0xbe4>
10008788:	d9011e17 	ldw	r4,1144(sp)
1000878c:	dc012217 	ldw	r16,1160(sp)
10008790:	a811883a 	mov	r8,r21
10008794:	dd012215 	stw	r20,1160(sp)
10008798:	2529c83a 	sub	r20,r4,r20
1000879c:	003e4106 	br	100080a4 <___vfiprintf_internal_r+0x544>
100087a0:	9cc00c04 	addi	r19,r19,48
100087a4:	d8c109c4 	addi	r3,sp,1063
100087a8:	dcc109c5 	stb	r19,1063(sp)
100087ac:	dd012817 	ldw	r20,1184(sp)
100087b0:	d8c12215 	stw	r3,1160(sp)
100087b4:	003e3b06 	br	100080a4 <___vfiprintf_internal_r+0x544>
100087b8:	d8811c17 	ldw	r2,1136(sp)
100087bc:	10000426 	beq	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
100087c0:	d9012117 	ldw	r4,1156(sp)
100087c4:	d9412017 	ldw	r5,1152(sp)
100087c8:	d9811a04 	addi	r6,sp,1128
100087cc:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
100087d0:	d9412017 	ldw	r5,1152(sp)
100087d4:	2880030b 	ldhu	r2,12(r5)
100087d8:	1080100c 	andi	r2,r2,64
100087dc:	103ddc1e 	bne	r2,zero,10007f50 <___vfiprintf_internal_r+0x3f0>
100087e0:	d8812517 	ldw	r2,1172(sp)
100087e4:	003ddb06 	br	10007f54 <___vfiprintf_internal_r+0x3f4>
100087e8:	1801061e 	bne	r3,zero,10008c04 <___vfiprintf_internal_r+0x10a4>
100087ec:	d8c12217 	ldw	r3,1160(sp)
100087f0:	00800044 	movi	r2,1
100087f4:	dd000115 	stw	r20,4(sp)
100087f8:	d8c00015 	stw	r3,0(sp)
100087fc:	dd011c15 	stw	r20,1136(sp)
10008800:	d8811b15 	stw	r2,1132(sp)
10008804:	a007883a 	mov	r3,r20
10008808:	d811883a 	mov	r8,sp
1000880c:	42000204 	addi	r8,r8,8
10008810:	9480010c 	andi	r18,r18,4
10008814:	90003426 	beq	r18,zero,100088e8 <___vfiprintf_internal_r+0xd88>
10008818:	d9412417 	ldw	r5,1168(sp)
1000881c:	2d65c83a 	sub	r18,r5,r21
10008820:	0480310e 	bge	zero,r18,100088e8 <___vfiprintf_internal_r+0xd88>
10008824:	04000404 	movi	r16,16
10008828:	8481ad0e 	bge	r16,r18,10008ee0 <___vfiprintf_internal_r+0x1380>
1000882c:	01440074 	movhi	r5,4097
10008830:	297de104 	addi	r5,r5,-2172
10008834:	d9011b17 	ldw	r4,1132(sp)
10008838:	d9412615 	stw	r5,1176(sp)
1000883c:	04c001c4 	movi	r19,7
10008840:	dd012117 	ldw	r20,1156(sp)
10008844:	dd812017 	ldw	r22,1152(sp)
10008848:	00000506 	br	10008860 <___vfiprintf_internal_r+0xd00>
1000884c:	21400084 	addi	r5,r4,2
10008850:	42000204 	addi	r8,r8,8
10008854:	1009883a 	mov	r4,r2
10008858:	94bffc04 	addi	r18,r18,-16
1000885c:	84800d0e 	bge	r16,r18,10008894 <___vfiprintf_internal_r+0xd34>
10008860:	18c00404 	addi	r3,r3,16
10008864:	20800044 	addi	r2,r4,1
10008868:	47000015 	stw	fp,0(r8)
1000886c:	44000115 	stw	r16,4(r8)
10008870:	d8c11c15 	stw	r3,1136(sp)
10008874:	d8811b15 	stw	r2,1132(sp)
10008878:	98bff40e 	bge	r19,r2,1000884c <___vfiprintf_internal_r+0xcec>
1000887c:	1800291e 	bne	r3,zero,10008924 <___vfiprintf_internal_r+0xdc4>
10008880:	94bffc04 	addi	r18,r18,-16
10008884:	0009883a 	mov	r4,zero
10008888:	01400044 	movi	r5,1
1000888c:	d811883a 	mov	r8,sp
10008890:	84bff316 	blt	r16,r18,10008860 <___vfiprintf_internal_r+0xd00>
10008894:	d8812617 	ldw	r2,1176(sp)
10008898:	1c87883a 	add	r3,r3,r18
1000889c:	44800115 	stw	r18,4(r8)
100088a0:	40800015 	stw	r2,0(r8)
100088a4:	d8c11c15 	stw	r3,1136(sp)
100088a8:	d9411b15 	stw	r5,1132(sp)
100088ac:	008001c4 	movi	r2,7
100088b0:	11400d0e 	bge	r2,r5,100088e8 <___vfiprintf_internal_r+0xd88>
100088b4:	1800061e 	bne	r3,zero,100088d0 <___vfiprintf_internal_r+0xd70>
100088b8:	d8c12417 	ldw	r3,1168(sp)
100088bc:	a8c12e16 	blt	r21,r3,10008d78 <___vfiprintf_internal_r+0x1218>
100088c0:	d9012517 	ldw	r4,1172(sp)
100088c4:	2549883a 	add	r4,r4,r21
100088c8:	d9012515 	stw	r4,1172(sp)
100088cc:	00001206 	br	10008918 <___vfiprintf_internal_r+0xdb8>
100088d0:	d9012117 	ldw	r4,1156(sp)
100088d4:	d9412017 	ldw	r5,1152(sp)
100088d8:	d9811a04 	addi	r6,sp,1128
100088dc:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
100088e0:	103fbb1e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
100088e4:	d8c11c17 	ldw	r3,1136(sp)
100088e8:	d8812417 	ldw	r2,1168(sp)
100088ec:	a880010e 	bge	r21,r2,100088f4 <___vfiprintf_internal_r+0xd94>
100088f0:	102b883a 	mov	r21,r2
100088f4:	d9012517 	ldw	r4,1172(sp)
100088f8:	2549883a 	add	r4,r4,r21
100088fc:	d9012515 	stw	r4,1172(sp)
10008900:	18000526 	beq	r3,zero,10008918 <___vfiprintf_internal_r+0xdb8>
10008904:	d9012117 	ldw	r4,1156(sp)
10008908:	d9412017 	ldw	r5,1152(sp)
1000890c:	d9811a04 	addi	r6,sp,1128
10008910:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008914:	103fae1e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008918:	d8011b15 	stw	zero,1132(sp)
1000891c:	d811883a 	mov	r8,sp
10008920:	003cc706 	br	10007c40 <___vfiprintf_internal_r+0xe0>
10008924:	a009883a 	mov	r4,r20
10008928:	b00b883a 	mov	r5,r22
1000892c:	d9811a04 	addi	r6,sp,1128
10008930:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008934:	103fa61e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008938:	d9011b17 	ldw	r4,1132(sp)
1000893c:	d8c11c17 	ldw	r3,1136(sp)
10008940:	d811883a 	mov	r8,sp
10008944:	21400044 	addi	r5,r4,1
10008948:	003fc306 	br	10008858 <___vfiprintf_internal_r+0xcf8>
1000894c:	d9012417 	ldw	r4,1168(sp)
10008950:	256dc83a 	sub	r22,r4,r21
10008954:	05be1f0e 	bge	zero,r22,100081d4 <___vfiprintf_internal_r+0x674>
10008958:	04c00404 	movi	r19,16
1000895c:	9d81720e 	bge	r19,r22,10008f28 <___vfiprintf_internal_r+0x13c8>
10008960:	00840074 	movhi	r2,4097
10008964:	10bddd04 	addi	r2,r2,-2188
10008968:	d8812615 	stw	r2,1176(sp)
1000896c:	028001c4 	movi	r10,7
10008970:	00000506 	br	10008988 <___vfiprintf_internal_r+0xe28>
10008974:	29000084 	addi	r4,r5,2
10008978:	42000204 	addi	r8,r8,8
1000897c:	100b883a 	mov	r5,r2
10008980:	b5bffc04 	addi	r22,r22,-16
10008984:	9d800d0e 	bge	r19,r22,100089bc <___vfiprintf_internal_r+0xe5c>
10008988:	18c00404 	addi	r3,r3,16
1000898c:	28800044 	addi	r2,r5,1
10008990:	44400015 	stw	r17,0(r8)
10008994:	44c00115 	stw	r19,4(r8)
10008998:	d8c11c15 	stw	r3,1136(sp)
1000899c:	d8811b15 	stw	r2,1132(sp)
100089a0:	50bff40e 	bge	r10,r2,10008974 <___vfiprintf_internal_r+0xe14>
100089a4:	1800111e 	bne	r3,zero,100089ec <___vfiprintf_internal_r+0xe8c>
100089a8:	b5bffc04 	addi	r22,r22,-16
100089ac:	000b883a 	mov	r5,zero
100089b0:	01000044 	movi	r4,1
100089b4:	d811883a 	mov	r8,sp
100089b8:	9dbff316 	blt	r19,r22,10008988 <___vfiprintf_internal_r+0xe28>
100089bc:	d9412617 	ldw	r5,1176(sp)
100089c0:	1d87883a 	add	r3,r3,r22
100089c4:	45800115 	stw	r22,4(r8)
100089c8:	41400015 	stw	r5,0(r8)
100089cc:	d8c11c15 	stw	r3,1136(sp)
100089d0:	d9011b15 	stw	r4,1132(sp)
100089d4:	008001c4 	movi	r2,7
100089d8:	11008516 	blt	r2,r4,10008bf0 <___vfiprintf_internal_r+0x1090>
100089dc:	42000204 	addi	r8,r8,8
100089e0:	20800044 	addi	r2,r4,1
100089e4:	200b883a 	mov	r5,r4
100089e8:	003dfa06 	br	100081d4 <___vfiprintf_internal_r+0x674>
100089ec:	d9012117 	ldw	r4,1156(sp)
100089f0:	d9412017 	ldw	r5,1152(sp)
100089f4:	d9811a04 	addi	r6,sp,1128
100089f8:	da812a15 	stw	r10,1192(sp)
100089fc:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008a00:	da812a17 	ldw	r10,1192(sp)
10008a04:	103f721e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008a08:	d9411b17 	ldw	r5,1132(sp)
10008a0c:	d8c11c17 	ldw	r3,1136(sp)
10008a10:	d811883a 	mov	r8,sp
10008a14:	29000044 	addi	r4,r5,1
10008a18:	003fd906 	br	10008980 <___vfiprintf_internal_r+0xe20>
10008a1c:	1800681e 	bne	r3,zero,10008bc0 <___vfiprintf_internal_r+0x1060>
10008a20:	50004d26 	beq	r10,zero,10008b58 <___vfiprintf_internal_r+0xff8>
10008a24:	d8811d04 	addi	r2,sp,1140
10008a28:	00c00084 	movi	r3,2
10008a2c:	d8800015 	stw	r2,0(sp)
10008a30:	d8c00115 	stw	r3,4(sp)
10008a34:	2005883a 	mov	r2,r4
10008a38:	d811883a 	mov	r8,sp
10008a3c:	003de006 	br	100081c0 <___vfiprintf_internal_r+0x660>
10008a40:	1800551e 	bne	r3,zero,10008b98 <___vfiprintf_internal_r+0x1038>
10008a44:	000b883a 	mov	r5,zero
10008a48:	00800044 	movi	r2,1
10008a4c:	d811883a 	mov	r8,sp
10008a50:	003dde06 	br	100081cc <___vfiprintf_internal_r+0x66c>
10008a54:	10803fcc 	andi	r2,r2,255
10008a58:	1000191e 	bne	r2,zero,10008ac0 <___vfiprintf_internal_r+0xf60>
10008a5c:	9080004c 	andi	r2,r18,1
10008a60:	10001726 	beq	r2,zero,10008ac0 <___vfiprintf_internal_r+0xf60>
10008a64:	00800c04 	movi	r2,48
10008a68:	d8c109c4 	addi	r3,sp,1063
10008a6c:	d88109c5 	stb	r2,1063(sp)
10008a70:	dd012817 	ldw	r20,1184(sp)
10008a74:	d8c12215 	stw	r3,1160(sp)
10008a78:	003d8a06 	br	100080a4 <___vfiprintf_internal_r+0x544>
10008a7c:	d9012717 	ldw	r4,1180(sp)
10008a80:	dd010a04 	addi	r20,sp,1064
10008a84:	988003cc 	andi	r2,r19,15
10008a88:	a806973a 	slli	r3,r21,28
10008a8c:	2085883a 	add	r2,r4,r2
10008a90:	9826d13a 	srli	r19,r19,4
10008a94:	10800003 	ldbu	r2,0(r2)
10008a98:	a82ad13a 	srli	r21,r21,4
10008a9c:	a53fffc4 	addi	r20,r20,-1
10008aa0:	1ce6b03a 	or	r19,r3,r19
10008aa4:	a0800005 	stb	r2,0(r20)
10008aa8:	9d44b03a 	or	r2,r19,r21
10008aac:	103ff51e 	bne	r2,zero,10008a84 <___vfiprintf_internal_r+0xf24>
10008ab0:	d9411e17 	ldw	r5,1144(sp)
10008ab4:	dd012215 	stw	r20,1160(sp)
10008ab8:	2d29c83a 	sub	r20,r5,r20
10008abc:	003d7906 	br	100080a4 <___vfiprintf_internal_r+0x544>
10008ac0:	d8c10a04 	addi	r3,sp,1064
10008ac4:	d8c12215 	stw	r3,1160(sp)
10008ac8:	003d7606 	br	100080a4 <___vfiprintf_internal_r+0x544>
10008acc:	18009e1e 	bne	r3,zero,10008d48 <___vfiprintf_internal_r+0x11e8>
10008ad0:	d8811d87 	ldb	r2,1142(sp)
10008ad4:	10005f26 	beq	r2,zero,10008c54 <___vfiprintf_internal_r+0x10f4>
10008ad8:	00c00044 	movi	r3,1
10008adc:	d9011d84 	addi	r4,sp,1142
10008ae0:	1805883a 	mov	r2,r3
10008ae4:	d9000015 	stw	r4,0(sp)
10008ae8:	d8c00115 	stw	r3,4(sp)
10008aec:	d811883a 	mov	r8,sp
10008af0:	003efc06 	br	100086e4 <___vfiprintf_internal_r+0xb84>
10008af4:	d9412417 	ldw	r5,1168(sp)
10008af8:	d811883a 	mov	r8,sp
10008afc:	2d65c83a 	sub	r18,r5,r21
10008b00:	04bf4816 	blt	zero,r18,10008824 <___vfiprintf_internal_r+0xcc4>
10008b04:	003f6c06 	br	100088b8 <___vfiprintf_internal_r+0xd58>
10008b08:	b829883a 	mov	r20,r23
10008b0c:	003c6906 	br	10007cb4 <___vfiprintf_internal_r+0x154>
10008b10:	d9012117 	ldw	r4,1156(sp)
10008b14:	d9412017 	ldw	r5,1152(sp)
10008b18:	d9811a04 	addi	r6,sp,1128
10008b1c:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008b20:	103f2b1e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008b24:	d8c11c17 	ldw	r3,1136(sp)
10008b28:	d811883a 	mov	r8,sp
10008b2c:	003f3806 	br	10008810 <___vfiprintf_internal_r+0xcb0>
10008b30:	00800084 	movi	r2,2
10008b34:	9d46b03a 	or	r3,r19,r21
10008b38:	003df606 	br	10008314 <___vfiprintf_internal_r+0x7b4>
10008b3c:	d9012117 	ldw	r4,1156(sp)
10008b40:	d9412017 	ldw	r5,1152(sp)
10008b44:	d9811a04 	addi	r6,sp,1128
10008b48:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008b4c:	103f201e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008b50:	d811883a 	mov	r8,sp
10008b54:	003cc606 	br	10007e70 <___vfiprintf_internal_r+0x310>
10008b58:	000b883a 	mov	r5,zero
10008b5c:	2005883a 	mov	r2,r4
10008b60:	d811883a 	mov	r8,sp
10008b64:	003d9906 	br	100081cc <___vfiprintf_internal_r+0x66c>
10008b68:	10803fcc 	andi	r2,r2,255
10008b6c:	1080201c 	xori	r2,r2,128
10008b70:	10bfe004 	addi	r2,r2,-128
10008b74:	01000c04 	movi	r4,48
10008b78:	1100b226 	beq	r2,r4,10008e44 <___vfiprintf_internal_r+0x12e4>
10008b7c:	d9412217 	ldw	r5,1160(sp)
10008b80:	d8811e17 	ldw	r2,1144(sp)
10008b84:	193fffc5 	stb	r4,-1(r3)
10008b88:	297fffc4 	addi	r5,r5,-1
10008b8c:	d9412215 	stw	r5,1160(sp)
10008b90:	1169c83a 	sub	r20,r2,r5
10008b94:	003d4306 	br	100080a4 <___vfiprintf_internal_r+0x544>
10008b98:	d9012117 	ldw	r4,1156(sp)
10008b9c:	d9412017 	ldw	r5,1152(sp)
10008ba0:	d9811a04 	addi	r6,sp,1128
10008ba4:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008ba8:	103f091e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008bac:	d9411b17 	ldw	r5,1132(sp)
10008bb0:	d8c11c17 	ldw	r3,1136(sp)
10008bb4:	d811883a 	mov	r8,sp
10008bb8:	28800044 	addi	r2,r5,1
10008bbc:	003d8306 	br	100081cc <___vfiprintf_internal_r+0x66c>
10008bc0:	d9012117 	ldw	r4,1156(sp)
10008bc4:	d9412017 	ldw	r5,1152(sp)
10008bc8:	d9811a04 	addi	r6,sp,1128
10008bcc:	da812a15 	stw	r10,1192(sp)
10008bd0:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008bd4:	da812a17 	ldw	r10,1192(sp)
10008bd8:	103efd1e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008bdc:	d9411b17 	ldw	r5,1132(sp)
10008be0:	d8c11c17 	ldw	r3,1136(sp)
10008be4:	d811883a 	mov	r8,sp
10008be8:	28800044 	addi	r2,r5,1
10008bec:	003d6a06 	br	10008198 <___vfiprintf_internal_r+0x638>
10008bf0:	1800a01e 	bne	r3,zero,10008e74 <___vfiprintf_internal_r+0x1314>
10008bf4:	000b883a 	mov	r5,zero
10008bf8:	00800044 	movi	r2,1
10008bfc:	d811883a 	mov	r8,sp
10008c00:	003d7406 	br	100081d4 <___vfiprintf_internal_r+0x674>
10008c04:	d9012117 	ldw	r4,1156(sp)
10008c08:	d9412017 	ldw	r5,1152(sp)
10008c0c:	d9811a04 	addi	r6,sp,1128
10008c10:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008c14:	103eee1e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008c18:	d8811b17 	ldw	r2,1132(sp)
10008c1c:	d8c11c17 	ldw	r3,1136(sp)
10008c20:	d811883a 	mov	r8,sp
10008c24:	10800044 	addi	r2,r2,1
10008c28:	003d8f06 	br	10008268 <___vfiprintf_internal_r+0x708>
10008c2c:	04e7c83a 	sub	r19,zero,r19
10008c30:	9804c03a 	cmpne	r2,r19,zero
10008c34:	056bc83a 	sub	r21,zero,r21
10008c38:	a8abc83a 	sub	r21,r21,r2
10008c3c:	05800b44 	movi	r22,45
10008c40:	dd811d85 	stb	r22,1142(sp)
10008c44:	8029883a 	mov	r20,r16
10008c48:	00800044 	movi	r2,1
10008c4c:	9d46b03a 	or	r3,r19,r21
10008c50:	003cfa06 	br	1000803c <___vfiprintf_internal_r+0x4dc>
10008c54:	000b883a 	mov	r5,zero
10008c58:	00800044 	movi	r2,1
10008c5c:	d811883a 	mov	r8,sp
10008c60:	503d5a26 	beq	r10,zero,100081cc <___vfiprintf_internal_r+0x66c>
10008c64:	00c00084 	movi	r3,2
10008c68:	d9011d04 	addi	r4,sp,1140
10008c6c:	d9000015 	stw	r4,0(sp)
10008c70:	d8c00115 	stw	r3,4(sp)
10008c74:	003d5206 	br	100081c0 <___vfiprintf_internal_r+0x660>
10008c78:	9080040c 	andi	r2,r18,16
10008c7c:	1000421e 	bne	r2,zero,10008d88 <___vfiprintf_internal_r+0x1228>
10008c80:	9480100c 	andi	r18,r18,64
10008c84:	90009c26 	beq	r18,zero,10008ef8 <___vfiprintf_internal_r+0x1398>
10008c88:	d9412317 	ldw	r5,1164(sp)
10008c8c:	d8c12517 	ldw	r3,1172(sp)
10008c90:	28800017 	ldw	r2,0(r5)
10008c94:	29400104 	addi	r5,r5,4
10008c98:	d9412315 	stw	r5,1164(sp)
10008c9c:	10c0000d 	sth	r3,0(r2)
10008ca0:	003be706 	br	10007c40 <___vfiprintf_internal_r+0xe0>
10008ca4:	90c0100c 	andi	r3,r18,64
10008ca8:	18003e26 	beq	r3,zero,10008da4 <___vfiprintf_internal_r+0x1244>
10008cac:	d8c12317 	ldw	r3,1164(sp)
10008cb0:	14c0000b 	ldhu	r19,0(r2)
10008cb4:	002b883a 	mov	r21,zero
10008cb8:	18c00104 	addi	r3,r3,4
10008cbc:	d8c12315 	stw	r3,1164(sp)
10008cc0:	003db706 	br	100083a0 <___vfiprintf_internal_r+0x840>
10008cc4:	9080100c 	andi	r2,r18,64
10008cc8:	10004c26 	beq	r2,zero,10008dfc <___vfiprintf_internal_r+0x129c>
10008ccc:	1cc0000f 	ldh	r19,0(r3)
10008cd0:	d8812317 	ldw	r2,1164(sp)
10008cd4:	982bd7fa 	srai	r21,r19,31
10008cd8:	10800104 	addi	r2,r2,4
10008cdc:	d8812315 	stw	r2,1164(sp)
10008ce0:	a805883a 	mov	r2,r21
10008ce4:	003cd006 	br	10008028 <___vfiprintf_internal_r+0x4c8>
10008ce8:	00800084 	movi	r2,2
10008cec:	003d8906 	br	10008314 <___vfiprintf_internal_r+0x7b4>
10008cf0:	b9800007 	ldb	r6,0(r23)
10008cf4:	003bfb06 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10008cf8:	9080100c 	andi	r2,r18,64
10008cfc:	10003726 	beq	r2,zero,10008ddc <___vfiprintf_internal_r+0x127c>
10008d00:	d9412317 	ldw	r5,1164(sp)
10008d04:	002b883a 	mov	r21,zero
10008d08:	0005883a 	mov	r2,zero
10008d0c:	2cc0000b 	ldhu	r19,0(r5)
10008d10:	29400104 	addi	r5,r5,4
10008d14:	d9412315 	stw	r5,1164(sp)
10008d18:	9807883a 	mov	r3,r19
10008d1c:	003d7d06 	br	10008314 <___vfiprintf_internal_r+0x7b4>
10008d20:	9080100c 	andi	r2,r18,64
10008d24:	10002526 	beq	r2,zero,10008dbc <___vfiprintf_internal_r+0x125c>
10008d28:	d8812317 	ldw	r2,1164(sp)
10008d2c:	002b883a 	mov	r21,zero
10008d30:	14c0000b 	ldhu	r19,0(r2)
10008d34:	10800104 	addi	r2,r2,4
10008d38:	d8812315 	stw	r2,1164(sp)
10008d3c:	9807883a 	mov	r3,r19
10008d40:	00800044 	movi	r2,1
10008d44:	003d7306 	br	10008314 <___vfiprintf_internal_r+0x7b4>
10008d48:	d9012117 	ldw	r4,1156(sp)
10008d4c:	d9412017 	ldw	r5,1152(sp)
10008d50:	d9811a04 	addi	r6,sp,1128
10008d54:	da812a15 	stw	r10,1192(sp)
10008d58:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008d5c:	da812a17 	ldw	r10,1192(sp)
10008d60:	103e9b1e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008d64:	d9411b17 	ldw	r5,1132(sp)
10008d68:	d8c11c17 	ldw	r3,1136(sp)
10008d6c:	d811883a 	mov	r8,sp
10008d70:	28800044 	addi	r2,r5,1
10008d74:	003e5006 	br	100086b8 <___vfiprintf_internal_r+0xb58>
10008d78:	182b883a 	mov	r21,r3
10008d7c:	003ed006 	br	100088c0 <___vfiprintf_internal_r+0xd60>
10008d80:	8029883a 	mov	r20,r16
10008d84:	003dc606 	br	100084a0 <___vfiprintf_internal_r+0x940>
10008d88:	d8c12317 	ldw	r3,1164(sp)
10008d8c:	d9012517 	ldw	r4,1172(sp)
10008d90:	18800017 	ldw	r2,0(r3)
10008d94:	18c00104 	addi	r3,r3,4
10008d98:	d8c12315 	stw	r3,1164(sp)
10008d9c:	11000015 	stw	r4,0(r2)
10008da0:	003ba706 	br	10007c40 <___vfiprintf_internal_r+0xe0>
10008da4:	d9012317 	ldw	r4,1164(sp)
10008da8:	14c00017 	ldw	r19,0(r2)
10008dac:	002b883a 	mov	r21,zero
10008db0:	21000104 	addi	r4,r4,4
10008db4:	d9012315 	stw	r4,1164(sp)
10008db8:	003d7906 	br	100083a0 <___vfiprintf_internal_r+0x840>
10008dbc:	d8c12317 	ldw	r3,1164(sp)
10008dc0:	002b883a 	mov	r21,zero
10008dc4:	00800044 	movi	r2,1
10008dc8:	1cc00017 	ldw	r19,0(r3)
10008dcc:	18c00104 	addi	r3,r3,4
10008dd0:	d8c12315 	stw	r3,1164(sp)
10008dd4:	9807883a 	mov	r3,r19
10008dd8:	003d4e06 	br	10008314 <___vfiprintf_internal_r+0x7b4>
10008ddc:	d8812317 	ldw	r2,1164(sp)
10008de0:	002b883a 	mov	r21,zero
10008de4:	14c00017 	ldw	r19,0(r2)
10008de8:	10800104 	addi	r2,r2,4
10008dec:	d8812315 	stw	r2,1164(sp)
10008df0:	9807883a 	mov	r3,r19
10008df4:	0005883a 	mov	r2,zero
10008df8:	003d4606 	br	10008314 <___vfiprintf_internal_r+0x7b4>
10008dfc:	1cc00017 	ldw	r19,0(r3)
10008e00:	d8c12317 	ldw	r3,1164(sp)
10008e04:	982bd7fa 	srai	r21,r19,31
10008e08:	18c00104 	addi	r3,r3,4
10008e0c:	d8c12315 	stw	r3,1164(sp)
10008e10:	a805883a 	mov	r2,r21
10008e14:	003c8406 	br	10008028 <___vfiprintf_internal_r+0x4c8>
10008e18:	01040074 	movhi	r4,4097
10008e1c:	213ddd04 	addi	r4,r4,-2188
10008e20:	d9012615 	stw	r4,1176(sp)
10008e24:	003d0606 	br	10008240 <___vfiprintf_internal_r+0x6e0>
10008e28:	b9800043 	ldbu	r6,1(r23)
10008e2c:	94800814 	ori	r18,r18,32
10008e30:	bdc00044 	addi	r23,r23,1
10008e34:	31803fcc 	andi	r6,r6,255
10008e38:	3180201c 	xori	r6,r6,128
10008e3c:	31bfe004 	addi	r6,r6,-128
10008e40:	003ba806 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10008e44:	d8811e17 	ldw	r2,1144(sp)
10008e48:	d8c12217 	ldw	r3,1160(sp)
10008e4c:	10e9c83a 	sub	r20,r2,r3
10008e50:	003c9406 	br	100080a4 <___vfiprintf_internal_r+0x544>
10008e54:	da012a15 	stw	r8,1192(sp)
10008e58:	00005080 	call	10000508 <strlen>
10008e5c:	1029883a 	mov	r20,r2
10008e60:	dd811d83 	ldbu	r22,1142(sp)
10008e64:	dcc12315 	stw	r19,1164(sp)
10008e68:	0021883a 	mov	r16,zero
10008e6c:	da012a17 	ldw	r8,1192(sp)
10008e70:	003c8c06 	br	100080a4 <___vfiprintf_internal_r+0x544>
10008e74:	d9012117 	ldw	r4,1156(sp)
10008e78:	d9412017 	ldw	r5,1152(sp)
10008e7c:	d9811a04 	addi	r6,sp,1128
10008e80:	0007a4c0 	call	10007a4c <__sprint_r.part.0>
10008e84:	103e521e 	bne	r2,zero,100087d0 <___vfiprintf_internal_r+0xc70>
10008e88:	d9411b17 	ldw	r5,1132(sp)
10008e8c:	d8c11c17 	ldw	r3,1136(sp)
10008e90:	d811883a 	mov	r8,sp
10008e94:	28800044 	addi	r2,r5,1
10008e98:	003cce06 	br	100081d4 <___vfiprintf_internal_r+0x674>
10008e9c:	01440074 	movhi	r5,4097
10008ea0:	297de104 	addi	r5,r5,-2172
10008ea4:	d9412615 	stw	r5,1176(sp)
10008ea8:	d9411b17 	ldw	r5,1132(sp)
10008eac:	29400044 	addi	r5,r5,1
10008eb0:	003cad06 	br	10008168 <___vfiprintf_internal_r+0x608>
10008eb4:	00800184 	movi	r2,6
10008eb8:	1400012e 	bgeu	r2,r16,10008ec0 <___vfiprintf_internal_r+0x1360>
10008ebc:	1021883a 	mov	r16,r2
10008ec0:	8029883a 	mov	r20,r16
10008ec4:	802b883a 	mov	r21,r16
10008ec8:	80001c16 	blt	r16,zero,10008f3c <___vfiprintf_internal_r+0x13dc>
10008ecc:	00c40074 	movhi	r3,4097
10008ed0:	18fd8104 	addi	r3,r3,-2556
10008ed4:	dcc12315 	stw	r19,1164(sp)
10008ed8:	d8c12215 	stw	r3,1160(sp)
10008edc:	003cff06 	br	100082dc <___vfiprintf_internal_r+0x77c>
10008ee0:	d9411b17 	ldw	r5,1132(sp)
10008ee4:	00840074 	movhi	r2,4097
10008ee8:	10bde104 	addi	r2,r2,-2172
10008eec:	d8812615 	stw	r2,1176(sp)
10008ef0:	29400044 	addi	r5,r5,1
10008ef4:	003e6706 	br	10008894 <___vfiprintf_internal_r+0xd34>
10008ef8:	d9012317 	ldw	r4,1164(sp)
10008efc:	d9412517 	ldw	r5,1172(sp)
10008f00:	20800017 	ldw	r2,0(r4)
10008f04:	21000104 	addi	r4,r4,4
10008f08:	d9012315 	stw	r4,1164(sp)
10008f0c:	11400015 	stw	r5,0(r2)
10008f10:	003b4b06 	br	10007c40 <___vfiprintf_internal_r+0xe0>
10008f14:	8029883a 	mov	r20,r16
10008f18:	dd811d83 	ldbu	r22,1142(sp)
10008f1c:	dcc12315 	stw	r19,1164(sp)
10008f20:	0021883a 	mov	r16,zero
10008f24:	003c5f06 	br	100080a4 <___vfiprintf_internal_r+0x544>
10008f28:	01040074 	movhi	r4,4097
10008f2c:	213ddd04 	addi	r4,r4,-2188
10008f30:	d9012615 	stw	r4,1176(sp)
10008f34:	1009883a 	mov	r4,r2
10008f38:	003ea006 	br	100089bc <___vfiprintf_internal_r+0xe5c>
10008f3c:	002b883a 	mov	r21,zero
10008f40:	003fe206 	br	10008ecc <___vfiprintf_internal_r+0x136c>
10008f44:	d9412317 	ldw	r5,1164(sp)
10008f48:	b807883a 	mov	r3,r23
10008f4c:	102f883a 	mov	r23,r2
10008f50:	2c000017 	ldw	r16,0(r5)
10008f54:	29000104 	addi	r4,r5,4
10008f58:	d9012315 	stw	r4,1164(sp)
10008f5c:	80000416 	blt	r16,zero,10008f70 <___vfiprintf_internal_r+0x1410>
10008f60:	19800047 	ldb	r6,1(r3)
10008f64:	003b5f06 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10008f68:	043fffc4 	movi	r16,-1
10008f6c:	003bef06 	br	10007f2c <___vfiprintf_internal_r+0x3cc>
10008f70:	043fffc4 	movi	r16,-1
10008f74:	19800047 	ldb	r6,1(r3)
10008f78:	003b5a06 	br	10007ce4 <___vfiprintf_internal_r+0x184>
10008f7c:	282b883a 	mov	r21,r5
10008f80:	003cc706 	br	100082a0 <___vfiprintf_internal_r+0x740>

10008f84 <__vfiprintf_internal>:
10008f84:	2007883a 	mov	r3,r4
10008f88:	01040074 	movhi	r4,4097
10008f8c:	2104e004 	addi	r4,r4,4992
10008f90:	21000017 	ldw	r4,0(r4)
10008f94:	2805883a 	mov	r2,r5
10008f98:	300f883a 	mov	r7,r6
10008f9c:	180b883a 	mov	r5,r3
10008fa0:	100d883a 	mov	r6,r2
10008fa4:	0007b601 	jmpi	10007b60 <___vfiprintf_internal_r>

10008fa8 <__swbuf_r>:
10008fa8:	defffc04 	addi	sp,sp,-16
10008fac:	dc800215 	stw	r18,8(sp)
10008fb0:	dc400115 	stw	r17,4(sp)
10008fb4:	dc000015 	stw	r16,0(sp)
10008fb8:	dfc00315 	stw	ra,12(sp)
10008fbc:	2025883a 	mov	r18,r4
10008fc0:	2823883a 	mov	r17,r5
10008fc4:	3021883a 	mov	r16,r6
10008fc8:	20000226 	beq	r4,zero,10008fd4 <__swbuf_r+0x2c>
10008fcc:	20800e17 	ldw	r2,56(r4)
10008fd0:	10004126 	beq	r2,zero,100090d8 <__swbuf_r+0x130>
10008fd4:	80c00617 	ldw	r3,24(r16)
10008fd8:	8180030b 	ldhu	r6,12(r16)
10008fdc:	80c00215 	stw	r3,8(r16)
10008fe0:	30c0020c 	andi	r3,r6,8
10008fe4:	18003526 	beq	r3,zero,100090bc <__swbuf_r+0x114>
10008fe8:	80c00417 	ldw	r3,16(r16)
10008fec:	18003326 	beq	r3,zero,100090bc <__swbuf_r+0x114>
10008ff0:	3088000c 	andi	r2,r6,8192
10008ff4:	8c403fcc 	andi	r17,r17,255
10008ff8:	10001726 	beq	r2,zero,10009058 <__swbuf_r+0xb0>
10008ffc:	80800017 	ldw	r2,0(r16)
10009000:	81000517 	ldw	r4,20(r16)
10009004:	10c7c83a 	sub	r3,r2,r3
10009008:	19001d0e 	bge	r3,r4,10009080 <__swbuf_r+0xd8>
1000900c:	18c00044 	addi	r3,r3,1
10009010:	81400217 	ldw	r5,8(r16)
10009014:	11000044 	addi	r4,r2,1
10009018:	81000015 	stw	r4,0(r16)
1000901c:	297fffc4 	addi	r5,r5,-1
10009020:	81400215 	stw	r5,8(r16)
10009024:	14400005 	stb	r17,0(r2)
10009028:	80800517 	ldw	r2,20(r16)
1000902c:	10c01d26 	beq	r2,r3,100090a4 <__swbuf_r+0xfc>
10009030:	8080030b 	ldhu	r2,12(r16)
10009034:	1080004c 	andi	r2,r2,1
10009038:	1000181e 	bne	r2,zero,1000909c <__swbuf_r+0xf4>
1000903c:	8805883a 	mov	r2,r17
10009040:	dfc00317 	ldw	ra,12(sp)
10009044:	dc800217 	ldw	r18,8(sp)
10009048:	dc400117 	ldw	r17,4(sp)
1000904c:	dc000017 	ldw	r16,0(sp)
10009050:	dec00404 	addi	sp,sp,16
10009054:	f800283a 	ret
10009058:	81001917 	ldw	r4,100(r16)
1000905c:	00b7ffc4 	movi	r2,-8193
10009060:	31880014 	ori	r6,r6,8192
10009064:	2084703a 	and	r2,r4,r2
10009068:	80801915 	stw	r2,100(r16)
1000906c:	80800017 	ldw	r2,0(r16)
10009070:	81000517 	ldw	r4,20(r16)
10009074:	8180030d 	sth	r6,12(r16)
10009078:	10c7c83a 	sub	r3,r2,r3
1000907c:	193fe316 	blt	r3,r4,1000900c <__swbuf_r+0x64>
10009080:	9009883a 	mov	r4,r18
10009084:	800b883a 	mov	r5,r16
10009088:	00041400 	call	10004140 <_fflush_r>
1000908c:	1000091e 	bne	r2,zero,100090b4 <__swbuf_r+0x10c>
10009090:	80800017 	ldw	r2,0(r16)
10009094:	00c00044 	movi	r3,1
10009098:	003fdd06 	br	10009010 <__swbuf_r+0x68>
1000909c:	00800284 	movi	r2,10
100090a0:	88bfe61e 	bne	r17,r2,1000903c <__swbuf_r+0x94>
100090a4:	9009883a 	mov	r4,r18
100090a8:	800b883a 	mov	r5,r16
100090ac:	00041400 	call	10004140 <_fflush_r>
100090b0:	103fe226 	beq	r2,zero,1000903c <__swbuf_r+0x94>
100090b4:	00bfffc4 	movi	r2,-1
100090b8:	003fe106 	br	10009040 <__swbuf_r+0x98>
100090bc:	9009883a 	mov	r4,r18
100090c0:	800b883a 	mov	r5,r16
100090c4:	00026c00 	call	100026c0 <__swsetup_r>
100090c8:	1000051e 	bne	r2,zero,100090e0 <__swbuf_r+0x138>
100090cc:	8180030b 	ldhu	r6,12(r16)
100090d0:	80c00417 	ldw	r3,16(r16)
100090d4:	003fc606 	br	10008ff0 <__swbuf_r+0x48>
100090d8:	00046fc0 	call	100046fc <__sinit>
100090dc:	003fbd06 	br	10008fd4 <__swbuf_r+0x2c>
100090e0:	80c0030b 	ldhu	r3,12(r16)
100090e4:	00bfffc4 	movi	r2,-1
100090e8:	18c01014 	ori	r3,r3,64
100090ec:	80c0030d 	sth	r3,12(r16)
100090f0:	00c00244 	movi	r3,9
100090f4:	90c00015 	stw	r3,0(r18)
100090f8:	003fd106 	br	10009040 <__swbuf_r+0x98>

100090fc <__swbuf>:
100090fc:	00c40074 	movhi	r3,4097
10009100:	18c4e004 	addi	r3,r3,4992
10009104:	2005883a 	mov	r2,r4
10009108:	19000017 	ldw	r4,0(r3)
1000910c:	280d883a 	mov	r6,r5
10009110:	100b883a 	mov	r5,r2
10009114:	0008fa81 	jmpi	10008fa8 <__swbuf_r>

10009118 <_write_r>:
10009118:	defffd04 	addi	sp,sp,-12
1000911c:	dc000015 	stw	r16,0(sp)
10009120:	04040074 	movhi	r16,4097
10009124:	dc400115 	stw	r17,4(sp)
10009128:	840bb204 	addi	r16,r16,11976
1000912c:	2023883a 	mov	r17,r4
10009130:	2809883a 	mov	r4,r5
10009134:	300b883a 	mov	r5,r6
10009138:	380d883a 	mov	r6,r7
1000913c:	dfc00215 	stw	ra,8(sp)
10009140:	80000015 	stw	zero,0(r16)
10009144:	000d7940 	call	1000d794 <write>
10009148:	00ffffc4 	movi	r3,-1
1000914c:	10c00526 	beq	r2,r3,10009164 <_write_r+0x4c>
10009150:	dfc00217 	ldw	ra,8(sp)
10009154:	dc400117 	ldw	r17,4(sp)
10009158:	dc000017 	ldw	r16,0(sp)
1000915c:	dec00304 	addi	sp,sp,12
10009160:	f800283a 	ret
10009164:	80c00017 	ldw	r3,0(r16)
10009168:	183ff926 	beq	r3,zero,10009150 <_write_r+0x38>
1000916c:	88c00015 	stw	r3,0(r17)
10009170:	003ff706 	br	10009150 <_write_r+0x38>

10009174 <_close_r>:
10009174:	defffd04 	addi	sp,sp,-12
10009178:	dc000015 	stw	r16,0(sp)
1000917c:	04040074 	movhi	r16,4097
10009180:	dc400115 	stw	r17,4(sp)
10009184:	840bb204 	addi	r16,r16,11976
10009188:	2023883a 	mov	r17,r4
1000918c:	2809883a 	mov	r4,r5
10009190:	dfc00215 	stw	ra,8(sp)
10009194:	80000015 	stw	zero,0(r16)
10009198:	000cef00 	call	1000cef0 <close>
1000919c:	00ffffc4 	movi	r3,-1
100091a0:	10c00526 	beq	r2,r3,100091b8 <_close_r+0x44>
100091a4:	dfc00217 	ldw	ra,8(sp)
100091a8:	dc400117 	ldw	r17,4(sp)
100091ac:	dc000017 	ldw	r16,0(sp)
100091b0:	dec00304 	addi	sp,sp,12
100091b4:	f800283a 	ret
100091b8:	80c00017 	ldw	r3,0(r16)
100091bc:	183ff926 	beq	r3,zero,100091a4 <_close_r+0x30>
100091c0:	88c00015 	stw	r3,0(r17)
100091c4:	003ff706 	br	100091a4 <_close_r+0x30>

100091c8 <_calloc_r>:
100091c8:	defffe04 	addi	sp,sp,-8
100091cc:	dc000015 	stw	r16,0(sp)
100091d0:	2021883a 	mov	r16,r4
100091d4:	2809883a 	mov	r4,r5
100091d8:	300b883a 	mov	r5,r6
100091dc:	dfc00115 	stw	ra,4(sp)
100091e0:	000a67c0 	call	1000a67c <__mulsi3>
100091e4:	8009883a 	mov	r4,r16
100091e8:	100b883a 	mov	r5,r2
100091ec:	000540c0 	call	1000540c <_malloc_r>
100091f0:	1021883a 	mov	r16,r2
100091f4:	10002826 	beq	r2,zero,10009298 <_calloc_r+0xd0>
100091f8:	11bfff17 	ldw	r6,-4(r2)
100091fc:	00bfff04 	movi	r2,-4
10009200:	00c00904 	movi	r3,36
10009204:	308c703a 	and	r6,r6,r2
10009208:	308d883a 	add	r6,r6,r2
1000920c:	19801436 	bltu	r3,r6,10009260 <_calloc_r+0x98>
10009210:	008004c4 	movi	r2,19
10009214:	11800936 	bltu	r2,r6,1000923c <_calloc_r+0x74>
10009218:	8005883a 	mov	r2,r16
1000921c:	10000015 	stw	zero,0(r2)
10009220:	10000115 	stw	zero,4(r2)
10009224:	10000215 	stw	zero,8(r2)
10009228:	8005883a 	mov	r2,r16
1000922c:	dfc00117 	ldw	ra,4(sp)
10009230:	dc000017 	ldw	r16,0(sp)
10009234:	dec00204 	addi	sp,sp,8
10009238:	f800283a 	ret
1000923c:	80000015 	stw	zero,0(r16)
10009240:	80000115 	stw	zero,4(r16)
10009244:	008006c4 	movi	r2,27
10009248:	11800d2e 	bgeu	r2,r6,10009280 <_calloc_r+0xb8>
1000924c:	80000215 	stw	zero,8(r16)
10009250:	80000315 	stw	zero,12(r16)
10009254:	30c00c26 	beq	r6,r3,10009288 <_calloc_r+0xc0>
10009258:	80800404 	addi	r2,r16,16
1000925c:	003fef06 	br	1000921c <_calloc_r+0x54>
10009260:	8009883a 	mov	r4,r16
10009264:	000b883a 	mov	r5,zero
10009268:	0005f300 	call	10005f30 <memset>
1000926c:	8005883a 	mov	r2,r16
10009270:	dfc00117 	ldw	ra,4(sp)
10009274:	dc000017 	ldw	r16,0(sp)
10009278:	dec00204 	addi	sp,sp,8
1000927c:	f800283a 	ret
10009280:	80800204 	addi	r2,r16,8
10009284:	003fe506 	br	1000921c <_calloc_r+0x54>
10009288:	80000415 	stw	zero,16(r16)
1000928c:	80800604 	addi	r2,r16,24
10009290:	80000515 	stw	zero,20(r16)
10009294:	003fe106 	br	1000921c <_calloc_r+0x54>
10009298:	0005883a 	mov	r2,zero
1000929c:	003fe306 	br	1000922c <_calloc_r+0x64>

100092a0 <_fclose_r>:
100092a0:	28003226 	beq	r5,zero,1000936c <_fclose_r+0xcc>
100092a4:	defffc04 	addi	sp,sp,-16
100092a8:	dc400115 	stw	r17,4(sp)
100092ac:	2023883a 	mov	r17,r4
100092b0:	dc000015 	stw	r16,0(sp)
100092b4:	dfc00315 	stw	ra,12(sp)
100092b8:	dc800215 	stw	r18,8(sp)
100092bc:	2821883a 	mov	r16,r5
100092c0:	000470c0 	call	1000470c <__sfp_lock_acquire>
100092c4:	88000226 	beq	r17,zero,100092d0 <_fclose_r+0x30>
100092c8:	88800e17 	ldw	r2,56(r17)
100092cc:	10002926 	beq	r2,zero,10009374 <_fclose_r+0xd4>
100092d0:	8080030f 	ldh	r2,12(r16)
100092d4:	10002226 	beq	r2,zero,10009360 <_fclose_r+0xc0>
100092d8:	8809883a 	mov	r4,r17
100092dc:	800b883a 	mov	r5,r16
100092e0:	00041400 	call	10004140 <_fflush_r>
100092e4:	1025883a 	mov	r18,r2
100092e8:	80800b17 	ldw	r2,44(r16)
100092ec:	10000426 	beq	r2,zero,10009300 <_fclose_r+0x60>
100092f0:	81400717 	ldw	r5,28(r16)
100092f4:	8809883a 	mov	r4,r17
100092f8:	103ee83a 	callr	r2
100092fc:	10002616 	blt	r2,zero,10009398 <_fclose_r+0xf8>
10009300:	8080030b 	ldhu	r2,12(r16)
10009304:	1080200c 	andi	r2,r2,128
10009308:	10001f1e 	bne	r2,zero,10009388 <_fclose_r+0xe8>
1000930c:	81400c17 	ldw	r5,48(r16)
10009310:	28000526 	beq	r5,zero,10009328 <_fclose_r+0x88>
10009314:	80801004 	addi	r2,r16,64
10009318:	28800226 	beq	r5,r2,10009324 <_fclose_r+0x84>
1000931c:	8809883a 	mov	r4,r17
10009320:	00048700 	call	10004870 <_free_r>
10009324:	80000c15 	stw	zero,48(r16)
10009328:	81401117 	ldw	r5,68(r16)
1000932c:	28000326 	beq	r5,zero,1000933c <_fclose_r+0x9c>
10009330:	8809883a 	mov	r4,r17
10009334:	00048700 	call	10004870 <_free_r>
10009338:	80001115 	stw	zero,68(r16)
1000933c:	8000030d 	sth	zero,12(r16)
10009340:	00047100 	call	10004710 <__sfp_lock_release>
10009344:	9005883a 	mov	r2,r18
10009348:	dfc00317 	ldw	ra,12(sp)
1000934c:	dc800217 	ldw	r18,8(sp)
10009350:	dc400117 	ldw	r17,4(sp)
10009354:	dc000017 	ldw	r16,0(sp)
10009358:	dec00404 	addi	sp,sp,16
1000935c:	f800283a 	ret
10009360:	00047100 	call	10004710 <__sfp_lock_release>
10009364:	0005883a 	mov	r2,zero
10009368:	003ff706 	br	10009348 <_fclose_r+0xa8>
1000936c:	0005883a 	mov	r2,zero
10009370:	f800283a 	ret
10009374:	8809883a 	mov	r4,r17
10009378:	00046fc0 	call	100046fc <__sinit>
1000937c:	8080030f 	ldh	r2,12(r16)
10009380:	103fd51e 	bne	r2,zero,100092d8 <_fclose_r+0x38>
10009384:	003ff606 	br	10009360 <_fclose_r+0xc0>
10009388:	81400417 	ldw	r5,16(r16)
1000938c:	8809883a 	mov	r4,r17
10009390:	00048700 	call	10004870 <_free_r>
10009394:	003fdd06 	br	1000930c <_fclose_r+0x6c>
10009398:	04bfffc4 	movi	r18,-1
1000939c:	003fd806 	br	10009300 <_fclose_r+0x60>

100093a0 <fclose>:
100093a0:	00840074 	movhi	r2,4097
100093a4:	1084e004 	addi	r2,r2,4992
100093a8:	200b883a 	mov	r5,r4
100093ac:	11000017 	ldw	r4,0(r2)
100093b0:	00092a01 	jmpi	100092a0 <_fclose_r>

100093b4 <_fputwc_r>:
100093b4:	3080030b 	ldhu	r2,12(r6)
100093b8:	defff804 	addi	sp,sp,-32
100093bc:	dcc00415 	stw	r19,16(sp)
100093c0:	dc800315 	stw	r18,12(sp)
100093c4:	dc000115 	stw	r16,4(sp)
100093c8:	dfc00715 	stw	ra,28(sp)
100093cc:	dd400615 	stw	r21,24(sp)
100093d0:	dd000515 	stw	r20,20(sp)
100093d4:	dc400215 	stw	r17,8(sp)
100093d8:	10c8000c 	andi	r3,r2,8192
100093dc:	3021883a 	mov	r16,r6
100093e0:	2027883a 	mov	r19,r4
100093e4:	2825883a 	mov	r18,r5
100093e8:	1800051e 	bne	r3,zero,10009400 <_fputwc_r+0x4c>
100093ec:	30c01917 	ldw	r3,100(r6)
100093f0:	10880014 	ori	r2,r2,8192
100093f4:	3080030d 	sth	r2,12(r6)
100093f8:	18880014 	ori	r2,r3,8192
100093fc:	30801915 	stw	r2,100(r6)
10009400:	00051fc0 	call	100051fc <__locale_mb_cur_max>
10009404:	00c00044 	movi	r3,1
10009408:	10c03e26 	beq	r2,r3,10009504 <_fputwc_r+0x150>
1000940c:	9809883a 	mov	r4,r19
10009410:	d80b883a 	mov	r5,sp
10009414:	900d883a 	mov	r6,r18
10009418:	81c01704 	addi	r7,r16,92
1000941c:	00096f40 	call	100096f4 <_wcrtomb_r>
10009420:	1029883a 	mov	r20,r2
10009424:	00bfffc4 	movi	r2,-1
10009428:	a0802026 	beq	r20,r2,100094ac <_fputwc_r+0xf8>
1000942c:	d9400003 	ldbu	r5,0(sp)
10009430:	a0001c26 	beq	r20,zero,100094a4 <_fputwc_r+0xf0>
10009434:	0023883a 	mov	r17,zero
10009438:	05400284 	movi	r21,10
1000943c:	00000906 	br	10009464 <_fputwc_r+0xb0>
10009440:	80800017 	ldw	r2,0(r16)
10009444:	11400005 	stb	r5,0(r2)
10009448:	80c00017 	ldw	r3,0(r16)
1000944c:	18c00044 	addi	r3,r3,1
10009450:	80c00015 	stw	r3,0(r16)
10009454:	8c400044 	addi	r17,r17,1
10009458:	dc45883a 	add	r2,sp,r17
1000945c:	8d00112e 	bgeu	r17,r20,100094a4 <_fputwc_r+0xf0>
10009460:	11400003 	ldbu	r5,0(r2)
10009464:	80c00217 	ldw	r3,8(r16)
10009468:	18ffffc4 	addi	r3,r3,-1
1000946c:	80c00215 	stw	r3,8(r16)
10009470:	183ff30e 	bge	r3,zero,10009440 <_fputwc_r+0x8c>
10009474:	80800617 	ldw	r2,24(r16)
10009478:	18801916 	blt	r3,r2,100094e0 <_fputwc_r+0x12c>
1000947c:	80800017 	ldw	r2,0(r16)
10009480:	11400005 	stb	r5,0(r2)
10009484:	80800017 	ldw	r2,0(r16)
10009488:	10c00003 	ldbu	r3,0(r2)
1000948c:	10800044 	addi	r2,r2,1
10009490:	1d402326 	beq	r3,r21,10009520 <_fputwc_r+0x16c>
10009494:	80800015 	stw	r2,0(r16)
10009498:	8c400044 	addi	r17,r17,1
1000949c:	dc45883a 	add	r2,sp,r17
100094a0:	8d3fef36 	bltu	r17,r20,10009460 <_fputwc_r+0xac>
100094a4:	9005883a 	mov	r2,r18
100094a8:	00000406 	br	100094bc <_fputwc_r+0x108>
100094ac:	80c0030b 	ldhu	r3,12(r16)
100094b0:	a005883a 	mov	r2,r20
100094b4:	18c01014 	ori	r3,r3,64
100094b8:	80c0030d 	sth	r3,12(r16)
100094bc:	dfc00717 	ldw	ra,28(sp)
100094c0:	dd400617 	ldw	r21,24(sp)
100094c4:	dd000517 	ldw	r20,20(sp)
100094c8:	dcc00417 	ldw	r19,16(sp)
100094cc:	dc800317 	ldw	r18,12(sp)
100094d0:	dc400217 	ldw	r17,8(sp)
100094d4:	dc000117 	ldw	r16,4(sp)
100094d8:	dec00804 	addi	sp,sp,32
100094dc:	f800283a 	ret
100094e0:	9809883a 	mov	r4,r19
100094e4:	29403fcc 	andi	r5,r5,255
100094e8:	800d883a 	mov	r6,r16
100094ec:	0008fa80 	call	10008fa8 <__swbuf_r>
100094f0:	10bfffe0 	cmpeqi	r2,r2,-1
100094f4:	10803fcc 	andi	r2,r2,255
100094f8:	103fd626 	beq	r2,zero,10009454 <_fputwc_r+0xa0>
100094fc:	00bfffc4 	movi	r2,-1
10009500:	003fee06 	br	100094bc <_fputwc_r+0x108>
10009504:	90ffffc4 	addi	r3,r18,-1
10009508:	01003f84 	movi	r4,254
1000950c:	20ffbf36 	bltu	r4,r3,1000940c <_fputwc_r+0x58>
10009510:	900b883a 	mov	r5,r18
10009514:	dc800005 	stb	r18,0(sp)
10009518:	1029883a 	mov	r20,r2
1000951c:	003fc506 	br	10009434 <_fputwc_r+0x80>
10009520:	9809883a 	mov	r4,r19
10009524:	a80b883a 	mov	r5,r21
10009528:	800d883a 	mov	r6,r16
1000952c:	0008fa80 	call	10008fa8 <__swbuf_r>
10009530:	10bfffe0 	cmpeqi	r2,r2,-1
10009534:	003fef06 	br	100094f4 <_fputwc_r+0x140>

10009538 <fputwc>:
10009538:	defffc04 	addi	sp,sp,-16
1000953c:	dc000115 	stw	r16,4(sp)
10009540:	04040074 	movhi	r16,4097
10009544:	8404e004 	addi	r16,r16,4992
10009548:	dc400215 	stw	r17,8(sp)
1000954c:	2023883a 	mov	r17,r4
10009550:	81000017 	ldw	r4,0(r16)
10009554:	dfc00315 	stw	ra,12(sp)
10009558:	280d883a 	mov	r6,r5
1000955c:	20000626 	beq	r4,zero,10009578 <fputwc+0x40>
10009560:	20800e17 	ldw	r2,56(r4)
10009564:	1000041e 	bne	r2,zero,10009578 <fputwc+0x40>
10009568:	d9400015 	stw	r5,0(sp)
1000956c:	00046fc0 	call	100046fc <__sinit>
10009570:	81000017 	ldw	r4,0(r16)
10009574:	d9800017 	ldw	r6,0(sp)
10009578:	880b883a 	mov	r5,r17
1000957c:	dfc00317 	ldw	ra,12(sp)
10009580:	dc400217 	ldw	r17,8(sp)
10009584:	dc000117 	ldw	r16,4(sp)
10009588:	dec00404 	addi	sp,sp,16
1000958c:	00093b41 	jmpi	100093b4 <_fputwc_r>

10009590 <_fstat_r>:
10009590:	defffd04 	addi	sp,sp,-12
10009594:	dc000015 	stw	r16,0(sp)
10009598:	04040074 	movhi	r16,4097
1000959c:	dc400115 	stw	r17,4(sp)
100095a0:	840bb204 	addi	r16,r16,11976
100095a4:	2023883a 	mov	r17,r4
100095a8:	2809883a 	mov	r4,r5
100095ac:	300b883a 	mov	r5,r6
100095b0:	dfc00215 	stw	ra,8(sp)
100095b4:	80000015 	stw	zero,0(r16)
100095b8:	000d0440 	call	1000d044 <fstat>
100095bc:	00ffffc4 	movi	r3,-1
100095c0:	10c00526 	beq	r2,r3,100095d8 <_fstat_r+0x48>
100095c4:	dfc00217 	ldw	ra,8(sp)
100095c8:	dc400117 	ldw	r17,4(sp)
100095cc:	dc000017 	ldw	r16,0(sp)
100095d0:	dec00304 	addi	sp,sp,12
100095d4:	f800283a 	ret
100095d8:	80c00017 	ldw	r3,0(r16)
100095dc:	183ff926 	beq	r3,zero,100095c4 <_fstat_r+0x34>
100095e0:	88c00015 	stw	r3,0(r17)
100095e4:	003ff706 	br	100095c4 <_fstat_r+0x34>

100095e8 <_isatty_r>:
100095e8:	defffd04 	addi	sp,sp,-12
100095ec:	dc000015 	stw	r16,0(sp)
100095f0:	04040074 	movhi	r16,4097
100095f4:	dc400115 	stw	r17,4(sp)
100095f8:	840bb204 	addi	r16,r16,11976
100095fc:	2023883a 	mov	r17,r4
10009600:	2809883a 	mov	r4,r5
10009604:	dfc00215 	stw	ra,8(sp)
10009608:	80000015 	stw	zero,0(r16)
1000960c:	000d14c0 	call	1000d14c <isatty>
10009610:	00ffffc4 	movi	r3,-1
10009614:	10c00526 	beq	r2,r3,1000962c <_isatty_r+0x44>
10009618:	dfc00217 	ldw	ra,8(sp)
1000961c:	dc400117 	ldw	r17,4(sp)
10009620:	dc000017 	ldw	r16,0(sp)
10009624:	dec00304 	addi	sp,sp,12
10009628:	f800283a 	ret
1000962c:	80c00017 	ldw	r3,0(r16)
10009630:	183ff926 	beq	r3,zero,10009618 <_isatty_r+0x30>
10009634:	88c00015 	stw	r3,0(r17)
10009638:	003ff706 	br	10009618 <_isatty_r+0x30>

1000963c <_lseek_r>:
1000963c:	defffd04 	addi	sp,sp,-12
10009640:	dc000015 	stw	r16,0(sp)
10009644:	04040074 	movhi	r16,4097
10009648:	dc400115 	stw	r17,4(sp)
1000964c:	840bb204 	addi	r16,r16,11976
10009650:	2023883a 	mov	r17,r4
10009654:	2809883a 	mov	r4,r5
10009658:	300b883a 	mov	r5,r6
1000965c:	380d883a 	mov	r6,r7
10009660:	dfc00215 	stw	ra,8(sp)
10009664:	80000015 	stw	zero,0(r16)
10009668:	000d32c0 	call	1000d32c <lseek>
1000966c:	00ffffc4 	movi	r3,-1
10009670:	10c00526 	beq	r2,r3,10009688 <_lseek_r+0x4c>
10009674:	dfc00217 	ldw	ra,8(sp)
10009678:	dc400117 	ldw	r17,4(sp)
1000967c:	dc000017 	ldw	r16,0(sp)
10009680:	dec00304 	addi	sp,sp,12
10009684:	f800283a 	ret
10009688:	80c00017 	ldw	r3,0(r16)
1000968c:	183ff926 	beq	r3,zero,10009674 <_lseek_r+0x38>
10009690:	88c00015 	stw	r3,0(r17)
10009694:	003ff706 	br	10009674 <_lseek_r+0x38>

10009698 <_read_r>:
10009698:	defffd04 	addi	sp,sp,-12
1000969c:	dc000015 	stw	r16,0(sp)
100096a0:	04040074 	movhi	r16,4097
100096a4:	dc400115 	stw	r17,4(sp)
100096a8:	840bb204 	addi	r16,r16,11976
100096ac:	2023883a 	mov	r17,r4
100096b0:	2809883a 	mov	r4,r5
100096b4:	300b883a 	mov	r5,r6
100096b8:	380d883a 	mov	r6,r7
100096bc:	dfc00215 	stw	ra,8(sp)
100096c0:	80000015 	stw	zero,0(r16)
100096c4:	000d5100 	call	1000d510 <read>
100096c8:	00ffffc4 	movi	r3,-1
100096cc:	10c00526 	beq	r2,r3,100096e4 <_read_r+0x4c>
100096d0:	dfc00217 	ldw	ra,8(sp)
100096d4:	dc400117 	ldw	r17,4(sp)
100096d8:	dc000017 	ldw	r16,0(sp)
100096dc:	dec00304 	addi	sp,sp,12
100096e0:	f800283a 	ret
100096e4:	80c00017 	ldw	r3,0(r16)
100096e8:	183ff926 	beq	r3,zero,100096d0 <_read_r+0x38>
100096ec:	88c00015 	stw	r3,0(r17)
100096f0:	003ff706 	br	100096d0 <_read_r+0x38>

100096f4 <_wcrtomb_r>:
100096f4:	defff604 	addi	sp,sp,-40
100096f8:	00840074 	movhi	r2,4097
100096fc:	dc800815 	stw	r18,32(sp)
10009700:	dc400715 	stw	r17,28(sp)
10009704:	dc000615 	stw	r16,24(sp)
10009708:	1084e404 	addi	r2,r2,5008
1000970c:	dfc00915 	stw	ra,36(sp)
10009710:	2021883a 	mov	r16,r4
10009714:	3823883a 	mov	r17,r7
10009718:	14800017 	ldw	r18,0(r2)
1000971c:	28001426 	beq	r5,zero,10009770 <_wcrtomb_r+0x7c>
10009720:	d9400415 	stw	r5,16(sp)
10009724:	d9800515 	stw	r6,20(sp)
10009728:	00051f00 	call	100051f0 <__locale_charset>
1000972c:	d9400417 	ldw	r5,16(sp)
10009730:	d9800517 	ldw	r6,20(sp)
10009734:	8009883a 	mov	r4,r16
10009738:	dc400015 	stw	r17,0(sp)
1000973c:	100f883a 	mov	r7,r2
10009740:	903ee83a 	callr	r18
10009744:	00ffffc4 	movi	r3,-1
10009748:	10c0031e 	bne	r2,r3,10009758 <_wcrtomb_r+0x64>
1000974c:	88000015 	stw	zero,0(r17)
10009750:	00c02284 	movi	r3,138
10009754:	80c00015 	stw	r3,0(r16)
10009758:	dfc00917 	ldw	ra,36(sp)
1000975c:	dc800817 	ldw	r18,32(sp)
10009760:	dc400717 	ldw	r17,28(sp)
10009764:	dc000617 	ldw	r16,24(sp)
10009768:	dec00a04 	addi	sp,sp,40
1000976c:	f800283a 	ret
10009770:	00051f00 	call	100051f0 <__locale_charset>
10009774:	8009883a 	mov	r4,r16
10009778:	dc400015 	stw	r17,0(sp)
1000977c:	d9400104 	addi	r5,sp,4
10009780:	000d883a 	mov	r6,zero
10009784:	100f883a 	mov	r7,r2
10009788:	903ee83a 	callr	r18
1000978c:	003fed06 	br	10009744 <_wcrtomb_r+0x50>

10009790 <wcrtomb>:
10009790:	defff504 	addi	sp,sp,-44
10009794:	dc400515 	stw	r17,20(sp)
10009798:	dc000415 	stw	r16,16(sp)
1000979c:	dfc00a15 	stw	ra,40(sp)
100097a0:	dd400915 	stw	r21,36(sp)
100097a4:	dd000815 	stw	r20,32(sp)
100097a8:	dcc00715 	stw	r19,28(sp)
100097ac:	dc800615 	stw	r18,24(sp)
100097b0:	2021883a 	mov	r16,r4
100097b4:	3023883a 	mov	r17,r6
100097b8:	20001d26 	beq	r4,zero,10009830 <wcrtomb+0xa0>
100097bc:	04840074 	movhi	r18,4097
100097c0:	9484e004 	addi	r18,r18,4992
100097c4:	00840074 	movhi	r2,4097
100097c8:	95400017 	ldw	r21,0(r18)
100097cc:	1084e404 	addi	r2,r2,5008
100097d0:	15000017 	ldw	r20,0(r2)
100097d4:	2827883a 	mov	r19,r5
100097d8:	00051f00 	call	100051f0 <__locale_charset>
100097dc:	a809883a 	mov	r4,r21
100097e0:	dc400015 	stw	r17,0(sp)
100097e4:	800b883a 	mov	r5,r16
100097e8:	980d883a 	mov	r6,r19
100097ec:	100f883a 	mov	r7,r2
100097f0:	a03ee83a 	callr	r20
100097f4:	00ffffc4 	movi	r3,-1
100097f8:	10c0041e 	bne	r2,r3,1000980c <wcrtomb+0x7c>
100097fc:	90c00017 	ldw	r3,0(r18)
10009800:	01002284 	movi	r4,138
10009804:	88000015 	stw	zero,0(r17)
10009808:	19000015 	stw	r4,0(r3)
1000980c:	dfc00a17 	ldw	ra,40(sp)
10009810:	dd400917 	ldw	r21,36(sp)
10009814:	dd000817 	ldw	r20,32(sp)
10009818:	dcc00717 	ldw	r19,28(sp)
1000981c:	dc800617 	ldw	r18,24(sp)
10009820:	dc400517 	ldw	r17,20(sp)
10009824:	dc000417 	ldw	r16,16(sp)
10009828:	dec00b04 	addi	sp,sp,44
1000982c:	f800283a 	ret
10009830:	04840074 	movhi	r18,4097
10009834:	9484e004 	addi	r18,r18,4992
10009838:	00840074 	movhi	r2,4097
1000983c:	94c00017 	ldw	r19,0(r18)
10009840:	1084e404 	addi	r2,r2,5008
10009844:	14000017 	ldw	r16,0(r2)
10009848:	00051f00 	call	100051f0 <__locale_charset>
1000984c:	9809883a 	mov	r4,r19
10009850:	dc400015 	stw	r17,0(sp)
10009854:	d9400104 	addi	r5,sp,4
10009858:	000d883a 	mov	r6,zero
1000985c:	100f883a 	mov	r7,r2
10009860:	803ee83a 	callr	r16
10009864:	003fe306 	br	100097f4 <wcrtomb+0x64>

10009868 <__ascii_wctomb>:
10009868:	28000526 	beq	r5,zero,10009880 <__ascii_wctomb+0x18>
1000986c:	00803fc4 	movi	r2,255
10009870:	11800536 	bltu	r2,r6,10009888 <__ascii_wctomb+0x20>
10009874:	29800005 	stb	r6,0(r5)
10009878:	00800044 	movi	r2,1
1000987c:	f800283a 	ret
10009880:	0005883a 	mov	r2,zero
10009884:	f800283a 	ret
10009888:	00802284 	movi	r2,138
1000988c:	20800015 	stw	r2,0(r4)
10009890:	00bfffc4 	movi	r2,-1
10009894:	f800283a 	ret

10009898 <_wctomb_r>:
10009898:	00840074 	movhi	r2,4097
1000989c:	defff904 	addi	sp,sp,-28
100098a0:	1084e404 	addi	r2,r2,5008
100098a4:	dfc00615 	stw	ra,24(sp)
100098a8:	dc400515 	stw	r17,20(sp)
100098ac:	dc000415 	stw	r16,16(sp)
100098b0:	3823883a 	mov	r17,r7
100098b4:	14000017 	ldw	r16,0(r2)
100098b8:	d9000115 	stw	r4,4(sp)
100098bc:	d9400215 	stw	r5,8(sp)
100098c0:	d9800315 	stw	r6,12(sp)
100098c4:	00051f00 	call	100051f0 <__locale_charset>
100098c8:	d9000117 	ldw	r4,4(sp)
100098cc:	d9400217 	ldw	r5,8(sp)
100098d0:	d9800317 	ldw	r6,12(sp)
100098d4:	dc400015 	stw	r17,0(sp)
100098d8:	100f883a 	mov	r7,r2
100098dc:	803ee83a 	callr	r16
100098e0:	dfc00617 	ldw	ra,24(sp)
100098e4:	dc400517 	ldw	r17,20(sp)
100098e8:	dc000417 	ldw	r16,16(sp)
100098ec:	dec00704 	addi	sp,sp,28
100098f0:	f800283a 	ret

100098f4 <__udivdi3>:
100098f4:	defff504 	addi	sp,sp,-44
100098f8:	dcc00415 	stw	r19,16(sp)
100098fc:	dc000115 	stw	r16,4(sp)
10009900:	dfc00a15 	stw	ra,40(sp)
10009904:	df000915 	stw	fp,36(sp)
10009908:	ddc00815 	stw	r23,32(sp)
1000990c:	dd800715 	stw	r22,28(sp)
10009910:	dd400615 	stw	r21,24(sp)
10009914:	dd000515 	stw	r20,20(sp)
10009918:	dc800315 	stw	r18,12(sp)
1000991c:	dc400215 	stw	r17,8(sp)
10009920:	2027883a 	mov	r19,r4
10009924:	2821883a 	mov	r16,r5
10009928:	3800471e 	bne	r7,zero,10009a48 <__udivdi3+0x154>
1000992c:	3025883a 	mov	r18,r6
10009930:	2023883a 	mov	r17,r4
10009934:	2980592e 	bgeu	r5,r6,10009a9c <__udivdi3+0x1a8>
10009938:	00bfffd4 	movui	r2,65535
1000993c:	2829883a 	mov	r20,r5
10009940:	1180b236 	bltu	r2,r6,10009c0c <__udivdi3+0x318>
10009944:	00803fc4 	movi	r2,255
10009948:	1181622e 	bgeu	r2,r6,10009ed4 <__udivdi3+0x5e0>
1000994c:	00800204 	movi	r2,8
10009950:	1007883a 	mov	r3,r2
10009954:	3084d83a 	srl	r2,r6,r2
10009958:	01040074 	movhi	r4,4097
1000995c:	213de504 	addi	r4,r4,-2156
10009960:	2085883a 	add	r2,r4,r2
10009964:	11000003 	ldbu	r4,0(r2)
10009968:	20c9883a 	add	r4,r4,r3
1000996c:	00c00804 	movi	r3,32
10009970:	1907c83a 	sub	r3,r3,r4
10009974:	18000526 	beq	r3,zero,1000998c <__udivdi3+0x98>
10009978:	80e0983a 	sll	r16,r16,r3
1000997c:	9908d83a 	srl	r4,r19,r4
10009980:	30e4983a 	sll	r18,r6,r3
10009984:	98e2983a 	sll	r17,r19,r3
10009988:	8128b03a 	or	r20,r16,r4
1000998c:	902ad43a 	srli	r21,r18,16
10009990:	a009883a 	mov	r4,r20
10009994:	95bfffcc 	andi	r22,r18,65535
10009998:	a80b883a 	mov	r5,r21
1000999c:	000a6740 	call	1000a674 <__umodsi3>
100099a0:	a009883a 	mov	r4,r20
100099a4:	a80b883a 	mov	r5,r21
100099a8:	102f883a 	mov	r23,r2
100099ac:	000a66c0 	call	1000a66c <__udivsi3>
100099b0:	1009883a 	mov	r4,r2
100099b4:	b00b883a 	mov	r5,r22
100099b8:	1021883a 	mov	r16,r2
100099bc:	000a67c0 	call	1000a67c <__mulsi3>
100099c0:	b82e943a 	slli	r23,r23,16
100099c4:	8808d43a 	srli	r4,r17,16
100099c8:	b906b03a 	or	r3,r23,r4
100099cc:	1880052e 	bgeu	r3,r2,100099e4 <__udivdi3+0xf0>
100099d0:	1c87883a 	add	r3,r3,r18
100099d4:	813fffc4 	addi	r4,r16,-1
100099d8:	1c800136 	bltu	r3,r18,100099e0 <__udivdi3+0xec>
100099dc:	18815236 	bltu	r3,r2,10009f28 <__udivdi3+0x634>
100099e0:	2021883a 	mov	r16,r4
100099e4:	18a7c83a 	sub	r19,r3,r2
100099e8:	9809883a 	mov	r4,r19
100099ec:	a80b883a 	mov	r5,r21
100099f0:	000a6740 	call	1000a674 <__umodsi3>
100099f4:	1029883a 	mov	r20,r2
100099f8:	9809883a 	mov	r4,r19
100099fc:	a80b883a 	mov	r5,r21
10009a00:	a028943a 	slli	r20,r20,16
10009a04:	000a66c0 	call	1000a66c <__udivsi3>
10009a08:	1009883a 	mov	r4,r2
10009a0c:	b00b883a 	mov	r5,r22
10009a10:	8c7fffcc 	andi	r17,r17,65535
10009a14:	1027883a 	mov	r19,r2
10009a18:	a462b03a 	or	r17,r20,r17
10009a1c:	000a67c0 	call	1000a67c <__mulsi3>
10009a20:	8880052e 	bgeu	r17,r2,10009a38 <__udivdi3+0x144>
10009a24:	8ca3883a 	add	r17,r17,r18
10009a28:	98ffffc4 	addi	r3,r19,-1
10009a2c:	8c811036 	bltu	r17,r18,10009e70 <__udivdi3+0x57c>
10009a30:	88810f2e 	bgeu	r17,r2,10009e70 <__udivdi3+0x57c>
10009a34:	9cffff84 	addi	r19,r19,-2
10009a38:	8020943a 	slli	r16,r16,16
10009a3c:	0007883a 	mov	r3,zero
10009a40:	9c04b03a 	or	r2,r19,r16
10009a44:	00006006 	br	10009bc8 <__udivdi3+0x2d4>
10009a48:	29c05d36 	bltu	r5,r7,10009bc0 <__udivdi3+0x2cc>
10009a4c:	00bfffd4 	movui	r2,65535
10009a50:	11c0692e 	bgeu	r2,r7,10009bf8 <__udivdi3+0x304>
10009a54:	00804034 	movhi	r2,256
10009a58:	10bfffc4 	addi	r2,r2,-1
10009a5c:	11c10e2e 	bgeu	r2,r7,10009e98 <__udivdi3+0x5a4>
10009a60:	01400604 	movi	r5,24
10009a64:	2811883a 	mov	r8,r5
10009a68:	394ad83a 	srl	r5,r7,r5
10009a6c:	00840074 	movhi	r2,4097
10009a70:	10bde504 	addi	r2,r2,-2156
10009a74:	114b883a 	add	r5,r2,r5
10009a78:	29400003 	ldbu	r5,0(r5)
10009a7c:	00c00804 	movi	r3,32
10009a80:	2a0b883a 	add	r5,r5,r8
10009a84:	196fc83a 	sub	r23,r3,r5
10009a88:	b8006b1e 	bne	r23,zero,10009c38 <__udivdi3+0x344>
10009a8c:	3c011436 	bltu	r7,r16,10009ee0 <__udivdi3+0x5ec>
10009a90:	9985403a 	cmpgeu	r2,r19,r6
10009a94:	0007883a 	mov	r3,zero
10009a98:	00004b06 	br	10009bc8 <__udivdi3+0x2d4>
10009a9c:	3000041e 	bne	r6,zero,10009ab0 <__udivdi3+0x1bc>
10009aa0:	01000044 	movi	r4,1
10009aa4:	000b883a 	mov	r5,zero
10009aa8:	000a66c0 	call	1000a66c <__udivsi3>
10009aac:	1025883a 	mov	r18,r2
10009ab0:	00bfffd4 	movui	r2,65535
10009ab4:	14805b2e 	bgeu	r2,r18,10009c24 <__udivdi3+0x330>
10009ab8:	00804034 	movhi	r2,256
10009abc:	10bfffc4 	addi	r2,r2,-1
10009ac0:	1480fe2e 	bgeu	r2,r18,10009ebc <__udivdi3+0x5c8>
10009ac4:	00800604 	movi	r2,24
10009ac8:	1007883a 	mov	r3,r2
10009acc:	9084d83a 	srl	r2,r18,r2
10009ad0:	01040074 	movhi	r4,4097
10009ad4:	213de504 	addi	r4,r4,-2156
10009ad8:	2085883a 	add	r2,r4,r2
10009adc:	11800003 	ldbu	r6,0(r2)
10009ae0:	01c00804 	movi	r7,32
10009ae4:	30c7883a 	add	r3,r6,r3
10009ae8:	38cfc83a 	sub	r7,r7,r3
10009aec:	3800a71e 	bne	r7,zero,10009d8c <__udivdi3+0x498>
10009af0:	9028d43a 	srli	r20,r18,16
10009af4:	84a1c83a 	sub	r16,r16,r18
10009af8:	957fffcc 	andi	r21,r18,65535
10009afc:	00c00044 	movi	r3,1
10009b00:	8009883a 	mov	r4,r16
10009b04:	a00b883a 	mov	r5,r20
10009b08:	d8c00015 	stw	r3,0(sp)
10009b0c:	000a6740 	call	1000a674 <__umodsi3>
10009b10:	8009883a 	mov	r4,r16
10009b14:	a00b883a 	mov	r5,r20
10009b18:	102d883a 	mov	r22,r2
10009b1c:	000a66c0 	call	1000a66c <__udivsi3>
10009b20:	1009883a 	mov	r4,r2
10009b24:	a80b883a 	mov	r5,r21
10009b28:	1021883a 	mov	r16,r2
10009b2c:	000a67c0 	call	1000a67c <__mulsi3>
10009b30:	b02c943a 	slli	r22,r22,16
10009b34:	880ed43a 	srli	r7,r17,16
10009b38:	d8c00017 	ldw	r3,0(sp)
10009b3c:	b1ccb03a 	or	r6,r22,r7
10009b40:	3080052e 	bgeu	r6,r2,10009b58 <__udivdi3+0x264>
10009b44:	348d883a 	add	r6,r6,r18
10009b48:	813fffc4 	addi	r4,r16,-1
10009b4c:	34800136 	bltu	r6,r18,10009b54 <__udivdi3+0x260>
10009b50:	3080f236 	bltu	r6,r2,10009f1c <__udivdi3+0x628>
10009b54:	2021883a 	mov	r16,r4
10009b58:	30a7c83a 	sub	r19,r6,r2
10009b5c:	9809883a 	mov	r4,r19
10009b60:	a00b883a 	mov	r5,r20
10009b64:	d8c00015 	stw	r3,0(sp)
10009b68:	000a6740 	call	1000a674 <__umodsi3>
10009b6c:	102d883a 	mov	r22,r2
10009b70:	9809883a 	mov	r4,r19
10009b74:	a00b883a 	mov	r5,r20
10009b78:	b02c943a 	slli	r22,r22,16
10009b7c:	000a66c0 	call	1000a66c <__udivsi3>
10009b80:	1009883a 	mov	r4,r2
10009b84:	a80b883a 	mov	r5,r21
10009b88:	8c7fffcc 	andi	r17,r17,65535
10009b8c:	1027883a 	mov	r19,r2
10009b90:	b462b03a 	or	r17,r22,r17
10009b94:	000a67c0 	call	1000a67c <__mulsi3>
10009b98:	d8c00017 	ldw	r3,0(sp)
10009b9c:	8880052e 	bgeu	r17,r2,10009bb4 <__udivdi3+0x2c0>
10009ba0:	8ca3883a 	add	r17,r17,r18
10009ba4:	993fffc4 	addi	r4,r19,-1
10009ba8:	8c80af36 	bltu	r17,r18,10009e68 <__udivdi3+0x574>
10009bac:	8880ae2e 	bgeu	r17,r2,10009e68 <__udivdi3+0x574>
10009bb0:	9cffff84 	addi	r19,r19,-2
10009bb4:	8020943a 	slli	r16,r16,16
10009bb8:	9c04b03a 	or	r2,r19,r16
10009bbc:	00000206 	br	10009bc8 <__udivdi3+0x2d4>
10009bc0:	0007883a 	mov	r3,zero
10009bc4:	0005883a 	mov	r2,zero
10009bc8:	dfc00a17 	ldw	ra,40(sp)
10009bcc:	df000917 	ldw	fp,36(sp)
10009bd0:	ddc00817 	ldw	r23,32(sp)
10009bd4:	dd800717 	ldw	r22,28(sp)
10009bd8:	dd400617 	ldw	r21,24(sp)
10009bdc:	dd000517 	ldw	r20,20(sp)
10009be0:	dcc00417 	ldw	r19,16(sp)
10009be4:	dc800317 	ldw	r18,12(sp)
10009be8:	dc400217 	ldw	r17,8(sp)
10009bec:	dc000117 	ldw	r16,4(sp)
10009bf0:	dec00b04 	addi	sp,sp,44
10009bf4:	f800283a 	ret
10009bf8:	00803fc4 	movi	r2,255
10009bfc:	11c0a92e 	bgeu	r2,r7,10009ea4 <__udivdi3+0x5b0>
10009c00:	01400204 	movi	r5,8
10009c04:	2811883a 	mov	r8,r5
10009c08:	003f9706 	br	10009a68 <__udivdi3+0x174>
10009c0c:	00804034 	movhi	r2,256
10009c10:	10bfffc4 	addi	r2,r2,-1
10009c14:	1180a62e 	bgeu	r2,r6,10009eb0 <__udivdi3+0x5bc>
10009c18:	00800604 	movi	r2,24
10009c1c:	1007883a 	mov	r3,r2
10009c20:	003f4c06 	br	10009954 <__udivdi3+0x60>
10009c24:	00803fc4 	movi	r2,255
10009c28:	1480a72e 	bgeu	r2,r18,10009ec8 <__udivdi3+0x5d4>
10009c2c:	00800204 	movi	r2,8
10009c30:	1007883a 	mov	r3,r2
10009c34:	003fa506 	br	10009acc <__udivdi3+0x1d8>
10009c38:	3178d83a 	srl	fp,r6,r5
10009c3c:	3dce983a 	sll	r7,r7,r23
10009c40:	8168d83a 	srl	r20,r16,r5
10009c44:	9950d83a 	srl	r8,r19,r5
10009c48:	3f38b03a 	or	fp,r7,fp
10009c4c:	e024d43a 	srli	r18,fp,16
10009c50:	85e0983a 	sll	r16,r16,r23
10009c54:	a009883a 	mov	r4,r20
10009c58:	900b883a 	mov	r5,r18
10009c5c:	8220b03a 	or	r16,r16,r8
10009c60:	35ea983a 	sll	r21,r6,r23
10009c64:	000a6740 	call	1000a674 <__umodsi3>
10009c68:	a009883a 	mov	r4,r20
10009c6c:	900b883a 	mov	r5,r18
10009c70:	1023883a 	mov	r17,r2
10009c74:	e5bfffcc 	andi	r22,fp,65535
10009c78:	000a66c0 	call	1000a66c <__udivsi3>
10009c7c:	1009883a 	mov	r4,r2
10009c80:	b00b883a 	mov	r5,r22
10009c84:	1029883a 	mov	r20,r2
10009c88:	000a67c0 	call	1000a67c <__mulsi3>
10009c8c:	8806943a 	slli	r3,r17,16
10009c90:	8014d43a 	srli	r10,r16,16
10009c94:	1a92b03a 	or	r9,r3,r10
10009c98:	4880042e 	bgeu	r9,r2,10009cac <__udivdi3+0x3b8>
10009c9c:	4f13883a 	add	r9,r9,fp
10009ca0:	a0ffffc4 	addi	r3,r20,-1
10009ca4:	4f00952e 	bgeu	r9,fp,10009efc <__udivdi3+0x608>
10009ca8:	1829883a 	mov	r20,r3
10009cac:	48a3c83a 	sub	r17,r9,r2
10009cb0:	8809883a 	mov	r4,r17
10009cb4:	900b883a 	mov	r5,r18
10009cb8:	000a6740 	call	1000a674 <__umodsi3>
10009cbc:	8809883a 	mov	r4,r17
10009cc0:	900b883a 	mov	r5,r18
10009cc4:	d8800015 	stw	r2,0(sp)
10009cc8:	000a66c0 	call	1000a66c <__udivsi3>
10009ccc:	1009883a 	mov	r4,r2
10009cd0:	b00b883a 	mov	r5,r22
10009cd4:	1023883a 	mov	r17,r2
10009cd8:	000a67c0 	call	1000a67c <__mulsi3>
10009cdc:	d8c00017 	ldw	r3,0(sp)
10009ce0:	823fffcc 	andi	r8,r16,65535
10009ce4:	1806943a 	slli	r3,r3,16
10009ce8:	1a20b03a 	or	r16,r3,r8
10009cec:	8080042e 	bgeu	r16,r2,10009d00 <__udivdi3+0x40c>
10009cf0:	8721883a 	add	r16,r16,fp
10009cf4:	88ffffc4 	addi	r3,r17,-1
10009cf8:	87007c2e 	bgeu	r16,fp,10009eec <__udivdi3+0x5f8>
10009cfc:	1823883a 	mov	r17,r3
10009d00:	a028943a 	slli	r20,r20,16
10009d04:	acbfffcc 	andi	r18,r21,65535
10009d08:	900b883a 	mov	r5,r18
10009d0c:	8d28b03a 	or	r20,r17,r20
10009d10:	a022d43a 	srli	r17,r20,16
10009d14:	a5bfffcc 	andi	r22,r20,65535
10009d18:	b009883a 	mov	r4,r22
10009d1c:	a82ad43a 	srli	r21,r21,16
10009d20:	80a1c83a 	sub	r16,r16,r2
10009d24:	000a67c0 	call	1000a67c <__mulsi3>
10009d28:	8809883a 	mov	r4,r17
10009d2c:	900b883a 	mov	r5,r18
10009d30:	1039883a 	mov	fp,r2
10009d34:	000a67c0 	call	1000a67c <__mulsi3>
10009d38:	8809883a 	mov	r4,r17
10009d3c:	a80b883a 	mov	r5,r21
10009d40:	1025883a 	mov	r18,r2
10009d44:	000a67c0 	call	1000a67c <__mulsi3>
10009d48:	b009883a 	mov	r4,r22
10009d4c:	a80b883a 	mov	r5,r21
10009d50:	1023883a 	mov	r17,r2
10009d54:	000a67c0 	call	1000a67c <__mulsi3>
10009d58:	e006d43a 	srli	r3,fp,16
10009d5c:	9085883a 	add	r2,r18,r2
10009d60:	10c7883a 	add	r3,r2,r3
10009d64:	1c80022e 	bgeu	r3,r18,10009d70 <__udivdi3+0x47c>
10009d68:	00800074 	movhi	r2,1
10009d6c:	88a3883a 	add	r17,r17,r2
10009d70:	1808d43a 	srli	r4,r3,16
10009d74:	8909883a 	add	r4,r17,r4
10009d78:	81004436 	bltu	r16,r4,10009e8c <__udivdi3+0x598>
10009d7c:	81003e26 	beq	r16,r4,10009e78 <__udivdi3+0x584>
10009d80:	a005883a 	mov	r2,r20
10009d84:	0007883a 	mov	r3,zero
10009d88:	003f8f06 	br	10009bc8 <__udivdi3+0x2d4>
10009d8c:	91e4983a 	sll	r18,r18,r7
10009d90:	80eed83a 	srl	r23,r16,r3
10009d94:	81cc983a 	sll	r6,r16,r7
10009d98:	9028d43a 	srli	r20,r18,16
10009d9c:	98c6d83a 	srl	r3,r19,r3
10009da0:	b809883a 	mov	r4,r23
10009da4:	a00b883a 	mov	r5,r20
10009da8:	30ecb03a 	or	r22,r6,r3
10009dac:	99e2983a 	sll	r17,r19,r7
10009db0:	000a6740 	call	1000a674 <__umodsi3>
10009db4:	b809883a 	mov	r4,r23
10009db8:	a00b883a 	mov	r5,r20
10009dbc:	1021883a 	mov	r16,r2
10009dc0:	957fffcc 	andi	r21,r18,65535
10009dc4:	000a66c0 	call	1000a66c <__udivsi3>
10009dc8:	a80b883a 	mov	r5,r21
10009dcc:	1009883a 	mov	r4,r2
10009dd0:	102f883a 	mov	r23,r2
10009dd4:	000a67c0 	call	1000a67c <__mulsi3>
10009dd8:	8020943a 	slli	r16,r16,16
10009ddc:	b00ad43a 	srli	r5,r22,16
10009de0:	814cb03a 	or	r6,r16,r5
10009de4:	3080062e 	bgeu	r6,r2,10009e00 <__udivdi3+0x50c>
10009de8:	348d883a 	add	r6,r6,r18
10009dec:	b8ffffc4 	addi	r3,r23,-1
10009df0:	34804836 	bltu	r6,r18,10009f14 <__udivdi3+0x620>
10009df4:	3080472e 	bgeu	r6,r2,10009f14 <__udivdi3+0x620>
10009df8:	bdffff84 	addi	r23,r23,-2
10009dfc:	348d883a 	add	r6,r6,r18
10009e00:	30a7c83a 	sub	r19,r6,r2
10009e04:	9809883a 	mov	r4,r19
10009e08:	a00b883a 	mov	r5,r20
10009e0c:	000a6740 	call	1000a674 <__umodsi3>
10009e10:	9809883a 	mov	r4,r19
10009e14:	a00b883a 	mov	r5,r20
10009e18:	1039883a 	mov	fp,r2
10009e1c:	000a66c0 	call	1000a66c <__udivsi3>
10009e20:	1009883a 	mov	r4,r2
10009e24:	a80b883a 	mov	r5,r21
10009e28:	e038943a 	slli	fp,fp,16
10009e2c:	1027883a 	mov	r19,r2
10009e30:	000a67c0 	call	1000a67c <__mulsi3>
10009e34:	b1bfffcc 	andi	r6,r22,65535
10009e38:	e18cb03a 	or	r6,fp,r6
10009e3c:	3080062e 	bgeu	r6,r2,10009e58 <__udivdi3+0x564>
10009e40:	348d883a 	add	r6,r6,r18
10009e44:	98ffffc4 	addi	r3,r19,-1
10009e48:	34803036 	bltu	r6,r18,10009f0c <__udivdi3+0x618>
10009e4c:	30802f2e 	bgeu	r6,r2,10009f0c <__udivdi3+0x618>
10009e50:	9cffff84 	addi	r19,r19,-2
10009e54:	348d883a 	add	r6,r6,r18
10009e58:	b82e943a 	slli	r23,r23,16
10009e5c:	30a1c83a 	sub	r16,r6,r2
10009e60:	9dc6b03a 	or	r3,r19,r23
10009e64:	003f2606 	br	10009b00 <__udivdi3+0x20c>
10009e68:	2027883a 	mov	r19,r4
10009e6c:	003f5106 	br	10009bb4 <__udivdi3+0x2c0>
10009e70:	1827883a 	mov	r19,r3
10009e74:	003ef006 	br	10009a38 <__udivdi3+0x144>
10009e78:	1808943a 	slli	r4,r3,16
10009e7c:	9dc6983a 	sll	r3,r19,r23
10009e80:	e73fffcc 	andi	fp,fp,65535
10009e84:	2709883a 	add	r4,r4,fp
10009e88:	193fbd2e 	bgeu	r3,r4,10009d80 <__udivdi3+0x48c>
10009e8c:	a0bfffc4 	addi	r2,r20,-1
10009e90:	0007883a 	mov	r3,zero
10009e94:	003f4c06 	br	10009bc8 <__udivdi3+0x2d4>
10009e98:	01400404 	movi	r5,16
10009e9c:	2811883a 	mov	r8,r5
10009ea0:	003ef106 	br	10009a68 <__udivdi3+0x174>
10009ea4:	000b883a 	mov	r5,zero
10009ea8:	0011883a 	mov	r8,zero
10009eac:	003eee06 	br	10009a68 <__udivdi3+0x174>
10009eb0:	00800404 	movi	r2,16
10009eb4:	1007883a 	mov	r3,r2
10009eb8:	003ea606 	br	10009954 <__udivdi3+0x60>
10009ebc:	00800404 	movi	r2,16
10009ec0:	1007883a 	mov	r3,r2
10009ec4:	003f0106 	br	10009acc <__udivdi3+0x1d8>
10009ec8:	0005883a 	mov	r2,zero
10009ecc:	0007883a 	mov	r3,zero
10009ed0:	003efe06 	br	10009acc <__udivdi3+0x1d8>
10009ed4:	0005883a 	mov	r2,zero
10009ed8:	0007883a 	mov	r3,zero
10009edc:	003e9d06 	br	10009954 <__udivdi3+0x60>
10009ee0:	0007883a 	mov	r3,zero
10009ee4:	00800044 	movi	r2,1
10009ee8:	003f3706 	br	10009bc8 <__udivdi3+0x2d4>
10009eec:	80bf832e 	bgeu	r16,r2,10009cfc <__udivdi3+0x408>
10009ef0:	8c7fff84 	addi	r17,r17,-2
10009ef4:	8721883a 	add	r16,r16,fp
10009ef8:	003f8106 	br	10009d00 <__udivdi3+0x40c>
10009efc:	48bf6a2e 	bgeu	r9,r2,10009ca8 <__udivdi3+0x3b4>
10009f00:	a53fff84 	addi	r20,r20,-2
10009f04:	4f13883a 	add	r9,r9,fp
10009f08:	003f6806 	br	10009cac <__udivdi3+0x3b8>
10009f0c:	1827883a 	mov	r19,r3
10009f10:	003fd106 	br	10009e58 <__udivdi3+0x564>
10009f14:	182f883a 	mov	r23,r3
10009f18:	003fb906 	br	10009e00 <__udivdi3+0x50c>
10009f1c:	843fff84 	addi	r16,r16,-2
10009f20:	348d883a 	add	r6,r6,r18
10009f24:	003f0c06 	br	10009b58 <__udivdi3+0x264>
10009f28:	843fff84 	addi	r16,r16,-2
10009f2c:	1c87883a 	add	r3,r3,r18
10009f30:	003eac06 	br	100099e4 <__udivdi3+0xf0>

10009f34 <__umoddi3>:
10009f34:	defff404 	addi	sp,sp,-48
10009f38:	dd800815 	stw	r22,32(sp)
10009f3c:	dc400315 	stw	r17,12(sp)
10009f40:	dc000215 	stw	r16,8(sp)
10009f44:	dfc00b15 	stw	ra,44(sp)
10009f48:	df000a15 	stw	fp,40(sp)
10009f4c:	ddc00915 	stw	r23,36(sp)
10009f50:	dd400715 	stw	r21,28(sp)
10009f54:	dd000615 	stw	r20,24(sp)
10009f58:	dcc00515 	stw	r19,20(sp)
10009f5c:	dc800415 	stw	r18,16(sp)
10009f60:	2021883a 	mov	r16,r4
10009f64:	2823883a 	mov	r17,r5
10009f68:	282d883a 	mov	r22,r5
10009f6c:	38003c1e 	bne	r7,zero,1000a060 <__umoddi3+0x12c>
10009f70:	3027883a 	mov	r19,r6
10009f74:	2029883a 	mov	r20,r4
10009f78:	2980522e 	bgeu	r5,r6,1000a0c4 <__umoddi3+0x190>
10009f7c:	00bfffd4 	movui	r2,65535
10009f80:	1180a436 	bltu	r2,r6,1000a214 <__umoddi3+0x2e0>
10009f84:	00803fc4 	movi	r2,255
10009f88:	11815e2e 	bgeu	r2,r6,1000a504 <__umoddi3+0x5d0>
10009f8c:	01400204 	movi	r5,8
10009f90:	2805883a 	mov	r2,r5
10009f94:	314ad83a 	srl	r5,r6,r5
10009f98:	00c40074 	movhi	r3,4097
10009f9c:	18fde504 	addi	r3,r3,-2156
10009fa0:	194b883a 	add	r5,r3,r5
10009fa4:	29000003 	ldbu	r4,0(r5)
10009fa8:	2089883a 	add	r4,r4,r2
10009fac:	00800804 	movi	r2,32
10009fb0:	1105c83a 	sub	r2,r2,r4
10009fb4:	10010c26 	beq	r2,zero,1000a3e8 <__umoddi3+0x4b4>
10009fb8:	88a2983a 	sll	r17,r17,r2
10009fbc:	8108d83a 	srl	r4,r16,r4
10009fc0:	30a6983a 	sll	r19,r6,r2
10009fc4:	80a8983a 	sll	r20,r16,r2
10009fc8:	1025883a 	mov	r18,r2
10009fcc:	892cb03a 	or	r22,r17,r4
10009fd0:	9822d43a 	srli	r17,r19,16
10009fd4:	b009883a 	mov	r4,r22
10009fd8:	9d7fffcc 	andi	r21,r19,65535
10009fdc:	880b883a 	mov	r5,r17
10009fe0:	000a6740 	call	1000a674 <__umodsi3>
10009fe4:	b009883a 	mov	r4,r22
10009fe8:	880b883a 	mov	r5,r17
10009fec:	102f883a 	mov	r23,r2
10009ff0:	000a66c0 	call	1000a66c <__udivsi3>
10009ff4:	1009883a 	mov	r4,r2
10009ff8:	a80b883a 	mov	r5,r21
10009ffc:	000a67c0 	call	1000a67c <__mulsi3>
1000a000:	b82e943a 	slli	r23,r23,16
1000a004:	a008d43a 	srli	r4,r20,16
1000a008:	b906b03a 	or	r3,r23,r4
1000a00c:	1880042e 	bgeu	r3,r2,1000a020 <__umoddi3+0xec>
1000a010:	1cc7883a 	add	r3,r3,r19
1000a014:	1cc00236 	bltu	r3,r19,1000a020 <__umoddi3+0xec>
1000a018:	1880012e 	bgeu	r3,r2,1000a020 <__umoddi3+0xec>
1000a01c:	1cc7883a 	add	r3,r3,r19
1000a020:	18a1c83a 	sub	r16,r3,r2
1000a024:	8009883a 	mov	r4,r16
1000a028:	880b883a 	mov	r5,r17
1000a02c:	000a6740 	call	1000a674 <__umodsi3>
1000a030:	8009883a 	mov	r4,r16
1000a034:	880b883a 	mov	r5,r17
1000a038:	102d883a 	mov	r22,r2
1000a03c:	000a66c0 	call	1000a66c <__udivsi3>
1000a040:	1009883a 	mov	r4,r2
1000a044:	a80b883a 	mov	r5,r21
1000a048:	b02c943a 	slli	r22,r22,16
1000a04c:	000a67c0 	call	1000a67c <__mulsi3>
1000a050:	a13fffcc 	andi	r4,r20,65535
1000a054:	b106b03a 	or	r3,r22,r4
1000a058:	1880572e 	bgeu	r3,r2,1000a1b8 <__umoddi3+0x284>
1000a05c:	00005206 	br	1000a1a8 <__umoddi3+0x274>
1000a060:	29c05936 	bltu	r5,r7,1000a1c8 <__umoddi3+0x294>
1000a064:	00bfffd4 	movui	r2,65535
1000a068:	11c0652e 	bgeu	r2,r7,1000a200 <__umoddi3+0x2cc>
1000a06c:	00804034 	movhi	r2,256
1000a070:	10bfffc4 	addi	r2,r2,-1
1000a074:	11c1172e 	bgeu	r2,r7,1000a4d4 <__umoddi3+0x5a0>
1000a078:	01400604 	movi	r5,24
1000a07c:	282b883a 	mov	r21,r5
1000a080:	394ad83a 	srl	r5,r7,r5
1000a084:	00c40074 	movhi	r3,4097
1000a088:	18fde504 	addi	r3,r3,-2156
1000a08c:	194b883a 	add	r5,r3,r5
1000a090:	28800003 	ldbu	r2,0(r5)
1000a094:	00c00804 	movi	r3,32
1000a098:	156b883a 	add	r21,r2,r21
1000a09c:	1d69c83a 	sub	r20,r3,r21
1000a0a0:	a000671e 	bne	r20,zero,1000a240 <__umoddi3+0x30c>
1000a0a4:	3c400136 	bltu	r7,r17,1000a0ac <__umoddi3+0x178>
1000a0a8:	81812336 	bltu	r16,r6,1000a538 <__umoddi3+0x604>
1000a0ac:	8185c83a 	sub	r2,r16,r6
1000a0b0:	89e3c83a 	sub	r17,r17,r7
1000a0b4:	8087803a 	cmpltu	r3,r16,r2
1000a0b8:	88edc83a 	sub	r22,r17,r3
1000a0bc:	b007883a 	mov	r3,r22
1000a0c0:	00004306 	br	1000a1d0 <__umoddi3+0x29c>
1000a0c4:	3000041e 	bne	r6,zero,1000a0d8 <__umoddi3+0x1a4>
1000a0c8:	01000044 	movi	r4,1
1000a0cc:	000b883a 	mov	r5,zero
1000a0d0:	000a66c0 	call	1000a66c <__udivsi3>
1000a0d4:	1027883a 	mov	r19,r2
1000a0d8:	00bfffd4 	movui	r2,65535
1000a0dc:	14c0532e 	bgeu	r2,r19,1000a22c <__umoddi3+0x2f8>
1000a0e0:	00804034 	movhi	r2,256
1000a0e4:	10bfffc4 	addi	r2,r2,-1
1000a0e8:	14c1032e 	bgeu	r2,r19,1000a4f8 <__umoddi3+0x5c4>
1000a0ec:	00800604 	movi	r2,24
1000a0f0:	1007883a 	mov	r3,r2
1000a0f4:	9884d83a 	srl	r2,r19,r2
1000a0f8:	01040074 	movhi	r4,4097
1000a0fc:	213de504 	addi	r4,r4,-2156
1000a100:	2085883a 	add	r2,r4,r2
1000a104:	11000003 	ldbu	r4,0(r2)
1000a108:	00800804 	movi	r2,32
1000a10c:	20c7883a 	add	r3,r4,r3
1000a110:	10c5c83a 	sub	r2,r2,r3
1000a114:	1000b61e 	bne	r2,zero,1000a3f0 <__umoddi3+0x4bc>
1000a118:	982ad43a 	srli	r21,r19,16
1000a11c:	8ce3c83a 	sub	r17,r17,r19
1000a120:	9dbfffcc 	andi	r22,r19,65535
1000a124:	0025883a 	mov	r18,zero
1000a128:	8809883a 	mov	r4,r17
1000a12c:	a80b883a 	mov	r5,r21
1000a130:	000a6740 	call	1000a674 <__umodsi3>
1000a134:	8809883a 	mov	r4,r17
1000a138:	a80b883a 	mov	r5,r21
1000a13c:	102f883a 	mov	r23,r2
1000a140:	000a66c0 	call	1000a66c <__udivsi3>
1000a144:	1009883a 	mov	r4,r2
1000a148:	b00b883a 	mov	r5,r22
1000a14c:	000a67c0 	call	1000a67c <__mulsi3>
1000a150:	b82e943a 	slli	r23,r23,16
1000a154:	a008d43a 	srli	r4,r20,16
1000a158:	b906b03a 	or	r3,r23,r4
1000a15c:	1880032e 	bgeu	r3,r2,1000a16c <__umoddi3+0x238>
1000a160:	1cc7883a 	add	r3,r3,r19
1000a164:	1cc00136 	bltu	r3,r19,1000a16c <__umoddi3+0x238>
1000a168:	1880f136 	bltu	r3,r2,1000a530 <__umoddi3+0x5fc>
1000a16c:	18a1c83a 	sub	r16,r3,r2
1000a170:	8009883a 	mov	r4,r16
1000a174:	a80b883a 	mov	r5,r21
1000a178:	000a6740 	call	1000a674 <__umodsi3>
1000a17c:	8009883a 	mov	r4,r16
1000a180:	a80b883a 	mov	r5,r21
1000a184:	1023883a 	mov	r17,r2
1000a188:	000a66c0 	call	1000a66c <__udivsi3>
1000a18c:	1009883a 	mov	r4,r2
1000a190:	b00b883a 	mov	r5,r22
1000a194:	8822943a 	slli	r17,r17,16
1000a198:	000a67c0 	call	1000a67c <__mulsi3>
1000a19c:	a13fffcc 	andi	r4,r20,65535
1000a1a0:	8906b03a 	or	r3,r17,r4
1000a1a4:	1880042e 	bgeu	r3,r2,1000a1b8 <__umoddi3+0x284>
1000a1a8:	1cc7883a 	add	r3,r3,r19
1000a1ac:	1cc00236 	bltu	r3,r19,1000a1b8 <__umoddi3+0x284>
1000a1b0:	1880012e 	bgeu	r3,r2,1000a1b8 <__umoddi3+0x284>
1000a1b4:	1cc7883a 	add	r3,r3,r19
1000a1b8:	1887c83a 	sub	r3,r3,r2
1000a1bc:	1c84d83a 	srl	r2,r3,r18
1000a1c0:	0007883a 	mov	r3,zero
1000a1c4:	00000206 	br	1000a1d0 <__umoddi3+0x29c>
1000a1c8:	2005883a 	mov	r2,r4
1000a1cc:	2807883a 	mov	r3,r5
1000a1d0:	dfc00b17 	ldw	ra,44(sp)
1000a1d4:	df000a17 	ldw	fp,40(sp)
1000a1d8:	ddc00917 	ldw	r23,36(sp)
1000a1dc:	dd800817 	ldw	r22,32(sp)
1000a1e0:	dd400717 	ldw	r21,28(sp)
1000a1e4:	dd000617 	ldw	r20,24(sp)
1000a1e8:	dcc00517 	ldw	r19,20(sp)
1000a1ec:	dc800417 	ldw	r18,16(sp)
1000a1f0:	dc400317 	ldw	r17,12(sp)
1000a1f4:	dc000217 	ldw	r16,8(sp)
1000a1f8:	dec00c04 	addi	sp,sp,48
1000a1fc:	f800283a 	ret
1000a200:	00803fc4 	movi	r2,255
1000a204:	11c0b02e 	bgeu	r2,r7,1000a4c8 <__umoddi3+0x594>
1000a208:	01400204 	movi	r5,8
1000a20c:	282b883a 	mov	r21,r5
1000a210:	003f9b06 	br	1000a080 <__umoddi3+0x14c>
1000a214:	00804034 	movhi	r2,256
1000a218:	10bfffc4 	addi	r2,r2,-1
1000a21c:	1180b02e 	bgeu	r2,r6,1000a4e0 <__umoddi3+0x5ac>
1000a220:	01400604 	movi	r5,24
1000a224:	2805883a 	mov	r2,r5
1000a228:	003f5a06 	br	10009f94 <__umoddi3+0x60>
1000a22c:	00803fc4 	movi	r2,255
1000a230:	14c0ae2e 	bgeu	r2,r19,1000a4ec <__umoddi3+0x5b8>
1000a234:	00800204 	movi	r2,8
1000a238:	1007883a 	mov	r3,r2
1000a23c:	003fad06 	br	1000a0f4 <__umoddi3+0x1c0>
1000a240:	3d0a983a 	sll	r5,r7,r20
1000a244:	356cd83a 	srl	r22,r6,r21
1000a248:	8d78d83a 	srl	fp,r17,r21
1000a24c:	8d10983a 	sll	r8,r17,r20
1000a250:	2dacb03a 	or	r22,r5,r22
1000a254:	b02ed43a 	srli	r23,r22,16
1000a258:	8564d83a 	srl	r18,r16,r21
1000a25c:	e009883a 	mov	r4,fp
1000a260:	b80b883a 	mov	r5,r23
1000a264:	44a4b03a 	or	r18,r8,r18
1000a268:	3526983a 	sll	r19,r6,r20
1000a26c:	000a6740 	call	1000a674 <__umodsi3>
1000a270:	e009883a 	mov	r4,fp
1000a274:	b80b883a 	mov	r5,r23
1000a278:	b47fffcc 	andi	r17,r22,65535
1000a27c:	d8800015 	stw	r2,0(sp)
1000a280:	000a66c0 	call	1000a66c <__udivsi3>
1000a284:	1009883a 	mov	r4,r2
1000a288:	880b883a 	mov	r5,r17
1000a28c:	1039883a 	mov	fp,r2
1000a290:	000a67c0 	call	1000a67c <__mulsi3>
1000a294:	d9800017 	ldw	r6,0(sp)
1000a298:	9008d43a 	srli	r4,r18,16
1000a29c:	8520983a 	sll	r16,r16,r20
1000a2a0:	300c943a 	slli	r6,r6,16
1000a2a4:	3106b03a 	or	r3,r6,r4
1000a2a8:	1880042e 	bgeu	r3,r2,1000a2bc <__umoddi3+0x388>
1000a2ac:	1d87883a 	add	r3,r3,r22
1000a2b0:	e13fffc4 	addi	r4,fp,-1
1000a2b4:	1d809a2e 	bgeu	r3,r22,1000a520 <__umoddi3+0x5ec>
1000a2b8:	2039883a 	mov	fp,r4
1000a2bc:	1887c83a 	sub	r3,r3,r2
1000a2c0:	1809883a 	mov	r4,r3
1000a2c4:	b80b883a 	mov	r5,r23
1000a2c8:	d8c00115 	stw	r3,4(sp)
1000a2cc:	000a6740 	call	1000a674 <__umodsi3>
1000a2d0:	d8c00117 	ldw	r3,4(sp)
1000a2d4:	b80b883a 	mov	r5,r23
1000a2d8:	d8800015 	stw	r2,0(sp)
1000a2dc:	1809883a 	mov	r4,r3
1000a2e0:	000a66c0 	call	1000a66c <__udivsi3>
1000a2e4:	880b883a 	mov	r5,r17
1000a2e8:	1009883a 	mov	r4,r2
1000a2ec:	102f883a 	mov	r23,r2
1000a2f0:	000a67c0 	call	1000a67c <__mulsi3>
1000a2f4:	d9800017 	ldw	r6,0(sp)
1000a2f8:	947fffcc 	andi	r17,r18,65535
1000a2fc:	300c943a 	slli	r6,r6,16
1000a300:	3464b03a 	or	r18,r6,r17
1000a304:	9080042e 	bgeu	r18,r2,1000a318 <__umoddi3+0x3e4>
1000a308:	95a5883a 	add	r18,r18,r22
1000a30c:	b8ffffc4 	addi	r3,r23,-1
1000a310:	95807f2e 	bgeu	r18,r22,1000a510 <__umoddi3+0x5dc>
1000a314:	182f883a 	mov	r23,r3
1000a318:	e038943a 	slli	fp,fp,16
1000a31c:	980cd43a 	srli	r6,r19,16
1000a320:	98ffffcc 	andi	r3,r19,65535
1000a324:	bf38b03a 	or	fp,r23,fp
1000a328:	e02ed43a 	srli	r23,fp,16
1000a32c:	e73fffcc 	andi	fp,fp,65535
1000a330:	180b883a 	mov	r5,r3
1000a334:	e009883a 	mov	r4,fp
1000a338:	d9800015 	stw	r6,0(sp)
1000a33c:	d8c00115 	stw	r3,4(sp)
1000a340:	90a5c83a 	sub	r18,r18,r2
1000a344:	000a67c0 	call	1000a67c <__mulsi3>
1000a348:	d8c00117 	ldw	r3,4(sp)
1000a34c:	b809883a 	mov	r4,r23
1000a350:	1023883a 	mov	r17,r2
1000a354:	180b883a 	mov	r5,r3
1000a358:	000a67c0 	call	1000a67c <__mulsi3>
1000a35c:	d9800017 	ldw	r6,0(sp)
1000a360:	b809883a 	mov	r4,r23
1000a364:	d8800115 	stw	r2,4(sp)
1000a368:	300b883a 	mov	r5,r6
1000a36c:	302f883a 	mov	r23,r6
1000a370:	000a67c0 	call	1000a67c <__mulsi3>
1000a374:	e009883a 	mov	r4,fp
1000a378:	b80b883a 	mov	r5,r23
1000a37c:	d8800015 	stw	r2,0(sp)
1000a380:	000a67c0 	call	1000a67c <__mulsi3>
1000a384:	d8c00117 	ldw	r3,4(sp)
1000a388:	880cd43a 	srli	r6,r17,16
1000a38c:	d9c00017 	ldw	r7,0(sp)
1000a390:	1885883a 	add	r2,r3,r2
1000a394:	118d883a 	add	r6,r2,r6
1000a398:	30c0022e 	bgeu	r6,r3,1000a3a4 <__umoddi3+0x470>
1000a39c:	00800074 	movhi	r2,1
1000a3a0:	388f883a 	add	r7,r7,r2
1000a3a4:	3006d43a 	srli	r3,r6,16
1000a3a8:	300c943a 	slli	r6,r6,16
1000a3ac:	8c7fffcc 	andi	r17,r17,65535
1000a3b0:	38c7883a 	add	r3,r7,r3
1000a3b4:	3463883a 	add	r17,r6,r17
1000a3b8:	90c03d36 	bltu	r18,r3,1000a4b0 <__umoddi3+0x57c>
1000a3bc:	90c06026 	beq	r18,r3,1000a540 <__umoddi3+0x60c>
1000a3c0:	90c9c83a 	sub	r4,r18,r3
1000a3c4:	880f883a 	mov	r7,r17
1000a3c8:	81cfc83a 	sub	r7,r16,r7
1000a3cc:	81c7803a 	cmpltu	r3,r16,r7
1000a3d0:	20c7c83a 	sub	r3,r4,r3
1000a3d4:	1d44983a 	sll	r2,r3,r21
1000a3d8:	3d0ed83a 	srl	r7,r7,r20
1000a3dc:	1d06d83a 	srl	r3,r3,r20
1000a3e0:	11c4b03a 	or	r2,r2,r7
1000a3e4:	003f7a06 	br	1000a1d0 <__umoddi3+0x29c>
1000a3e8:	0025883a 	mov	r18,zero
1000a3ec:	003ef806 	br	10009fd0 <__umoddi3+0x9c>
1000a3f0:	98a6983a 	sll	r19,r19,r2
1000a3f4:	88e8d83a 	srl	r20,r17,r3
1000a3f8:	80c6d83a 	srl	r3,r16,r3
1000a3fc:	982ad43a 	srli	r21,r19,16
1000a400:	88a2983a 	sll	r17,r17,r2
1000a404:	a009883a 	mov	r4,r20
1000a408:	a80b883a 	mov	r5,r21
1000a40c:	88eeb03a 	or	r23,r17,r3
1000a410:	1025883a 	mov	r18,r2
1000a414:	000a6740 	call	1000a674 <__umodsi3>
1000a418:	a009883a 	mov	r4,r20
1000a41c:	a80b883a 	mov	r5,r21
1000a420:	1023883a 	mov	r17,r2
1000a424:	9dbfffcc 	andi	r22,r19,65535
1000a428:	000a66c0 	call	1000a66c <__udivsi3>
1000a42c:	1009883a 	mov	r4,r2
1000a430:	b00b883a 	mov	r5,r22
1000a434:	000a67c0 	call	1000a67c <__mulsi3>
1000a438:	8822943a 	slli	r17,r17,16
1000a43c:	b808d43a 	srli	r4,r23,16
1000a440:	84a8983a 	sll	r20,r16,r18
1000a444:	8906b03a 	or	r3,r17,r4
1000a448:	1880042e 	bgeu	r3,r2,1000a45c <__umoddi3+0x528>
1000a44c:	1cc7883a 	add	r3,r3,r19
1000a450:	1cc00236 	bltu	r3,r19,1000a45c <__umoddi3+0x528>
1000a454:	1880012e 	bgeu	r3,r2,1000a45c <__umoddi3+0x528>
1000a458:	1cc7883a 	add	r3,r3,r19
1000a45c:	18a1c83a 	sub	r16,r3,r2
1000a460:	8009883a 	mov	r4,r16
1000a464:	a80b883a 	mov	r5,r21
1000a468:	000a6740 	call	1000a674 <__umodsi3>
1000a46c:	8009883a 	mov	r4,r16
1000a470:	a80b883a 	mov	r5,r21
1000a474:	1039883a 	mov	fp,r2
1000a478:	000a66c0 	call	1000a66c <__udivsi3>
1000a47c:	1009883a 	mov	r4,r2
1000a480:	b00b883a 	mov	r5,r22
1000a484:	000a67c0 	call	1000a67c <__mulsi3>
1000a488:	e006943a 	slli	r3,fp,16
1000a48c:	b93fffcc 	andi	r4,r23,65535
1000a490:	1906b03a 	or	r3,r3,r4
1000a494:	1880042e 	bgeu	r3,r2,1000a4a8 <__umoddi3+0x574>
1000a498:	1cc7883a 	add	r3,r3,r19
1000a49c:	1cc00236 	bltu	r3,r19,1000a4a8 <__umoddi3+0x574>
1000a4a0:	1880012e 	bgeu	r3,r2,1000a4a8 <__umoddi3+0x574>
1000a4a4:	1cc7883a 	add	r3,r3,r19
1000a4a8:	18a3c83a 	sub	r17,r3,r2
1000a4ac:	003f1e06 	br	1000a128 <__umoddi3+0x1f4>
1000a4b0:	8ccfc83a 	sub	r7,r17,r19
1000a4b4:	1d89c83a 	sub	r4,r3,r22
1000a4b8:	89e3803a 	cmpltu	r17,r17,r7
1000a4bc:	2463c83a 	sub	r17,r4,r17
1000a4c0:	9449c83a 	sub	r4,r18,r17
1000a4c4:	003fc006 	br	1000a3c8 <__umoddi3+0x494>
1000a4c8:	000b883a 	mov	r5,zero
1000a4cc:	002b883a 	mov	r21,zero
1000a4d0:	003eeb06 	br	1000a080 <__umoddi3+0x14c>
1000a4d4:	01400404 	movi	r5,16
1000a4d8:	282b883a 	mov	r21,r5
1000a4dc:	003ee806 	br	1000a080 <__umoddi3+0x14c>
1000a4e0:	01400404 	movi	r5,16
1000a4e4:	2805883a 	mov	r2,r5
1000a4e8:	003eaa06 	br	10009f94 <__umoddi3+0x60>
1000a4ec:	0005883a 	mov	r2,zero
1000a4f0:	0007883a 	mov	r3,zero
1000a4f4:	003eff06 	br	1000a0f4 <__umoddi3+0x1c0>
1000a4f8:	00800404 	movi	r2,16
1000a4fc:	1007883a 	mov	r3,r2
1000a500:	003efc06 	br	1000a0f4 <__umoddi3+0x1c0>
1000a504:	000b883a 	mov	r5,zero
1000a508:	0005883a 	mov	r2,zero
1000a50c:	003ea106 	br	10009f94 <__umoddi3+0x60>
1000a510:	90bf802e 	bgeu	r18,r2,1000a314 <__umoddi3+0x3e0>
1000a514:	bdffff84 	addi	r23,r23,-2
1000a518:	95a5883a 	add	r18,r18,r22
1000a51c:	003f7e06 	br	1000a318 <__umoddi3+0x3e4>
1000a520:	18bf652e 	bgeu	r3,r2,1000a2b8 <__umoddi3+0x384>
1000a524:	e73fff84 	addi	fp,fp,-2
1000a528:	1d87883a 	add	r3,r3,r22
1000a52c:	003f6306 	br	1000a2bc <__umoddi3+0x388>
1000a530:	1cc7883a 	add	r3,r3,r19
1000a534:	003f0d06 	br	1000a16c <__umoddi3+0x238>
1000a538:	8005883a 	mov	r2,r16
1000a53c:	003edf06 	br	1000a0bc <__umoddi3+0x188>
1000a540:	847fdb36 	bltu	r16,r17,1000a4b0 <__umoddi3+0x57c>
1000a544:	880f883a 	mov	r7,r17
1000a548:	0009883a 	mov	r4,zero
1000a54c:	003f9e06 	br	1000a3c8 <__umoddi3+0x494>

1000a550 <udivmodsi4>:
1000a550:	2900182e 	bgeu	r5,r4,1000a5b4 <udivmodsi4+0x64>
1000a554:	28001716 	blt	r5,zero,1000a5b4 <udivmodsi4+0x64>
1000a558:	00800804 	movi	r2,32
1000a55c:	00c00044 	movi	r3,1
1000a560:	00000206 	br	1000a56c <udivmodsi4+0x1c>
1000a564:	10001126 	beq	r2,zero,1000a5ac <udivmodsi4+0x5c>
1000a568:	28000516 	blt	r5,zero,1000a580 <udivmodsi4+0x30>
1000a56c:	294b883a 	add	r5,r5,r5
1000a570:	10bfffc4 	addi	r2,r2,-1
1000a574:	18c7883a 	add	r3,r3,r3
1000a578:	293ffa36 	bltu	r5,r4,1000a564 <udivmodsi4+0x14>
1000a57c:	18000b26 	beq	r3,zero,1000a5ac <udivmodsi4+0x5c>
1000a580:	0005883a 	mov	r2,zero
1000a584:	21400236 	bltu	r4,r5,1000a590 <udivmodsi4+0x40>
1000a588:	2149c83a 	sub	r4,r4,r5
1000a58c:	10c4b03a 	or	r2,r2,r3
1000a590:	1806d07a 	srli	r3,r3,1
1000a594:	280ad07a 	srli	r5,r5,1
1000a598:	183ffa1e 	bne	r3,zero,1000a584 <udivmodsi4+0x34>
1000a59c:	3000011e 	bne	r6,zero,1000a5a4 <udivmodsi4+0x54>
1000a5a0:	f800283a 	ret
1000a5a4:	2005883a 	mov	r2,r4
1000a5a8:	f800283a 	ret
1000a5ac:	0005883a 	mov	r2,zero
1000a5b0:	003ffa06 	br	1000a59c <udivmodsi4+0x4c>
1000a5b4:	00c00044 	movi	r3,1
1000a5b8:	003ff106 	br	1000a580 <udivmodsi4+0x30>

1000a5bc <__divsi3>:
1000a5bc:	defffe04 	addi	sp,sp,-8
1000a5c0:	dfc00115 	stw	ra,4(sp)
1000a5c4:	dc000015 	stw	r16,0(sp)
1000a5c8:	20000b16 	blt	r4,zero,1000a5f8 <__divsi3+0x3c>
1000a5cc:	0021883a 	mov	r16,zero
1000a5d0:	28000c16 	blt	r5,zero,1000a604 <__divsi3+0x48>
1000a5d4:	000d883a 	mov	r6,zero
1000a5d8:	000a5500 	call	1000a550 <udivmodsi4>
1000a5dc:	0407c83a 	sub	r3,zero,r16
1000a5e0:	1884f03a 	xor	r2,r3,r2
1000a5e4:	1405883a 	add	r2,r2,r16
1000a5e8:	dfc00117 	ldw	ra,4(sp)
1000a5ec:	dc000017 	ldw	r16,0(sp)
1000a5f0:	dec00204 	addi	sp,sp,8
1000a5f4:	f800283a 	ret
1000a5f8:	0109c83a 	sub	r4,zero,r4
1000a5fc:	04000044 	movi	r16,1
1000a600:	283ff40e 	bge	r5,zero,1000a5d4 <__divsi3+0x18>
1000a604:	014bc83a 	sub	r5,zero,r5
1000a608:	8400005c 	xori	r16,r16,1
1000a60c:	003ff106 	br	1000a5d4 <__divsi3+0x18>

1000a610 <__modsi3>:
1000a610:	defffd04 	addi	sp,sp,-12
1000a614:	dfc00215 	stw	ra,8(sp)
1000a618:	dc400115 	stw	r17,4(sp)
1000a61c:	dc000015 	stw	r16,0(sp)
1000a620:	20000c16 	blt	r4,zero,1000a654 <__modsi3+0x44>
1000a624:	0023883a 	mov	r17,zero
1000a628:	0021883a 	mov	r16,zero
1000a62c:	28000d16 	blt	r5,zero,1000a664 <__modsi3+0x54>
1000a630:	01800044 	movi	r6,1
1000a634:	000a5500 	call	1000a550 <udivmodsi4>
1000a638:	1404f03a 	xor	r2,r2,r16
1000a63c:	8885883a 	add	r2,r17,r2
1000a640:	dfc00217 	ldw	ra,8(sp)
1000a644:	dc400117 	ldw	r17,4(sp)
1000a648:	dc000017 	ldw	r16,0(sp)
1000a64c:	dec00304 	addi	sp,sp,12
1000a650:	f800283a 	ret
1000a654:	0109c83a 	sub	r4,zero,r4
1000a658:	04400044 	movi	r17,1
1000a65c:	043fffc4 	movi	r16,-1
1000a660:	283ff30e 	bge	r5,zero,1000a630 <__modsi3+0x20>
1000a664:	014bc83a 	sub	r5,zero,r5
1000a668:	003ff106 	br	1000a630 <__modsi3+0x20>

1000a66c <__udivsi3>:
1000a66c:	000d883a 	mov	r6,zero
1000a670:	000a5501 	jmpi	1000a550 <udivmodsi4>

1000a674 <__umodsi3>:
1000a674:	01800044 	movi	r6,1
1000a678:	000a5501 	jmpi	1000a550 <udivmodsi4>

1000a67c <__mulsi3>:
1000a67c:	0005883a 	mov	r2,zero
1000a680:	20000726 	beq	r4,zero,1000a6a0 <__mulsi3+0x24>
1000a684:	20c0004c 	andi	r3,r4,1
1000a688:	2008d07a 	srli	r4,r4,1
1000a68c:	18000126 	beq	r3,zero,1000a694 <__mulsi3+0x18>
1000a690:	1145883a 	add	r2,r2,r5
1000a694:	294b883a 	add	r5,r5,r5
1000a698:	203ffa1e 	bne	r4,zero,1000a684 <__mulsi3+0x8>
1000a69c:	f800283a 	ret
1000a6a0:	f800283a 	ret

1000a6a4 <__adddf3>:
1000a6a4:	02000434 	movhi	r8,16
1000a6a8:	423fffc4 	addi	r8,r8,-1
1000a6ac:	defffb04 	addi	sp,sp,-20
1000a6b0:	2a12703a 	and	r9,r5,r8
1000a6b4:	2806d7fa 	srli	r3,r5,31
1000a6b8:	3a10703a 	and	r8,r7,r8
1000a6bc:	3804d53a 	srli	r2,r7,20
1000a6c0:	3014d77a 	srli	r10,r6,29
1000a6c4:	dc000015 	stw	r16,0(sp)
1000a6c8:	481290fa 	slli	r9,r9,3
1000a6cc:	2820d53a 	srli	r16,r5,20
1000a6d0:	401090fa 	slli	r8,r8,3
1000a6d4:	200ad77a 	srli	r5,r4,29
1000a6d8:	380ed7fa 	srli	r7,r7,31
1000a6dc:	dc800215 	stw	r18,8(sp)
1000a6e0:	dc400115 	stw	r17,4(sp)
1000a6e4:	dfc00415 	stw	ra,16(sp)
1000a6e8:	dcc00315 	stw	r19,12(sp)
1000a6ec:	1c803fcc 	andi	r18,r3,255
1000a6f0:	8401ffcc 	andi	r16,r16,2047
1000a6f4:	494ab03a 	or	r5,r9,r5
1000a6f8:	202290fa 	slli	r17,r4,3
1000a6fc:	1081ffcc 	andi	r2,r2,2047
1000a700:	4290b03a 	or	r8,r8,r10
1000a704:	300c90fa 	slli	r6,r6,3
1000a708:	91c07026 	beq	r18,r7,1000a8cc <__adddf3+0x228>
1000a70c:	8087c83a 	sub	r3,r16,r2
1000a710:	00c0b30e 	bge	zero,r3,1000a9e0 <__adddf3+0x33c>
1000a714:	10002a1e 	bne	r2,zero,1000a7c0 <__adddf3+0x11c>
1000a718:	4184b03a 	or	r2,r8,r6
1000a71c:	1000991e 	bne	r2,zero,1000a984 <__adddf3+0x2e0>
1000a720:	888001cc 	andi	r2,r17,7
1000a724:	10005b26 	beq	r2,zero,1000a894 <__adddf3+0x1f0>
1000a728:	88c003cc 	andi	r3,r17,15
1000a72c:	00800104 	movi	r2,4
1000a730:	18805826 	beq	r3,r2,1000a894 <__adddf3+0x1f0>
1000a734:	89800104 	addi	r6,r17,4
1000a738:	3463803a 	cmpltu	r17,r6,r17
1000a73c:	2c4b883a 	add	r5,r5,r17
1000a740:	2880202c 	andhi	r2,r5,128
1000a744:	9007883a 	mov	r3,r18
1000a748:	3023883a 	mov	r17,r6
1000a74c:	10005426 	beq	r2,zero,1000a8a0 <__adddf3+0x1fc>
1000a750:	84000044 	addi	r16,r16,1
1000a754:	0081ffc4 	movi	r2,2047
1000a758:	8080c126 	beq	r16,r2,1000aa60 <__adddf3+0x3bc>
1000a75c:	013fe034 	movhi	r4,65408
1000a760:	213fffc4 	addi	r4,r4,-1
1000a764:	290a703a 	and	r5,r5,r4
1000a768:	2804977a 	slli	r2,r5,29
1000a76c:	280a927a 	slli	r5,r5,9
1000a770:	8822d0fa 	srli	r17,r17,3
1000a774:	8401ffcc 	andi	r16,r16,2047
1000a778:	2808d33a 	srli	r4,r5,12
1000a77c:	1444b03a 	or	r2,r2,r17
1000a780:	8401ffcc 	andi	r16,r16,2047
1000a784:	800a953a 	slli	r5,r16,20
1000a788:	18c03fcc 	andi	r3,r3,255
1000a78c:	04000434 	movhi	r16,16
1000a790:	180697fa 	slli	r3,r3,31
1000a794:	843fffc4 	addi	r16,r16,-1
1000a798:	2420703a 	and	r16,r4,r16
1000a79c:	8160b03a 	or	r16,r16,r5
1000a7a0:	80c6b03a 	or	r3,r16,r3
1000a7a4:	dfc00417 	ldw	ra,16(sp)
1000a7a8:	dcc00317 	ldw	r19,12(sp)
1000a7ac:	dc800217 	ldw	r18,8(sp)
1000a7b0:	dc400117 	ldw	r17,4(sp)
1000a7b4:	dc000017 	ldw	r16,0(sp)
1000a7b8:	dec00504 	addi	sp,sp,20
1000a7bc:	f800283a 	ret
1000a7c0:	0081ffc4 	movi	r2,2047
1000a7c4:	80bfd626 	beq	r16,r2,1000a720 <__adddf3+0x7c>
1000a7c8:	42002034 	orhi	r8,r8,128
1000a7cc:	00800e04 	movi	r2,56
1000a7d0:	10c0a616 	blt	r2,r3,1000aa6c <__adddf3+0x3c8>
1000a7d4:	008007c4 	movi	r2,31
1000a7d8:	10c0c916 	blt	r2,r3,1000ab00 <__adddf3+0x45c>
1000a7dc:	00800804 	movi	r2,32
1000a7e0:	10c5c83a 	sub	r2,r2,r3
1000a7e4:	408e983a 	sll	r7,r8,r2
1000a7e8:	30c8d83a 	srl	r4,r6,r3
1000a7ec:	3084983a 	sll	r2,r6,r2
1000a7f0:	40c6d83a 	srl	r3,r8,r3
1000a7f4:	390cb03a 	or	r6,r7,r4
1000a7f8:	1004c03a 	cmpne	r2,r2,zero
1000a7fc:	308cb03a 	or	r6,r6,r2
1000a800:	898dc83a 	sub	r6,r17,r6
1000a804:	89a3803a 	cmpltu	r17,r17,r6
1000a808:	28cbc83a 	sub	r5,r5,r3
1000a80c:	2c4bc83a 	sub	r5,r5,r17
1000a810:	3023883a 	mov	r17,r6
1000a814:	2880202c 	andhi	r2,r5,128
1000a818:	10006d26 	beq	r2,zero,1000a9d0 <__adddf3+0x32c>
1000a81c:	04c02034 	movhi	r19,128
1000a820:	9cffffc4 	addi	r19,r19,-1
1000a824:	2ce6703a 	and	r19,r5,r19
1000a828:	98007e26 	beq	r19,zero,1000aa24 <__adddf3+0x380>
1000a82c:	9809883a 	mov	r4,r19
1000a830:	000ce3c0 	call	1000ce3c <__clzsi2>
1000a834:	10fffe04 	addi	r3,r2,-8
1000a838:	010007c4 	movi	r4,31
1000a83c:	20c07f16 	blt	r4,r3,1000aa3c <__adddf3+0x398>
1000a840:	01400a04 	movi	r5,40
1000a844:	2885c83a 	sub	r2,r5,r2
1000a848:	888ad83a 	srl	r5,r17,r2
1000a84c:	98e6983a 	sll	r19,r19,r3
1000a850:	88e2983a 	sll	r17,r17,r3
1000a854:	2ce6b03a 	or	r19,r5,r19
1000a858:	1c007c16 	blt	r3,r16,1000aa4c <__adddf3+0x3a8>
1000a85c:	1c21c83a 	sub	r16,r3,r16
1000a860:	81400044 	addi	r5,r16,1
1000a864:	00c007c4 	movi	r3,31
1000a868:	19409816 	blt	r3,r5,1000aacc <__adddf3+0x428>
1000a86c:	1c21c83a 	sub	r16,r3,r16
1000a870:	8c08983a 	sll	r4,r17,r16
1000a874:	8946d83a 	srl	r3,r17,r5
1000a878:	9c20983a 	sll	r16,r19,r16
1000a87c:	2008c03a 	cmpne	r4,r4,zero
1000a880:	994ad83a 	srl	r5,r19,r5
1000a884:	1c06b03a 	or	r3,r3,r16
1000a888:	1922b03a 	or	r17,r3,r4
1000a88c:	0021883a 	mov	r16,zero
1000a890:	003fa306 	br	1000a720 <__adddf3+0x7c>
1000a894:	2880202c 	andhi	r2,r5,128
1000a898:	9007883a 	mov	r3,r18
1000a89c:	103fac1e 	bne	r2,zero,1000a750 <__adddf3+0xac>
1000a8a0:	2804977a 	slli	r2,r5,29
1000a8a4:	8822d0fa 	srli	r17,r17,3
1000a8a8:	0101ffc4 	movi	r4,2047
1000a8ac:	280ad0fa 	srli	r5,r5,3
1000a8b0:	1444b03a 	or	r2,r2,r17
1000a8b4:	81002c26 	beq	r16,r4,1000a968 <__adddf3+0x2c4>
1000a8b8:	8120703a 	and	r16,r16,r4
1000a8bc:	01000434 	movhi	r4,16
1000a8c0:	213fffc4 	addi	r4,r4,-1
1000a8c4:	2908703a 	and	r4,r5,r4
1000a8c8:	003fad06 	br	1000a780 <__adddf3+0xdc>
1000a8cc:	8089c83a 	sub	r4,r16,r2
1000a8d0:	01006a0e 	bge	zero,r4,1000aa7c <__adddf3+0x3d8>
1000a8d4:	10003326 	beq	r2,zero,1000a9a4 <__adddf3+0x300>
1000a8d8:	0081ffc4 	movi	r2,2047
1000a8dc:	80bf9026 	beq	r16,r2,1000a720 <__adddf3+0x7c>
1000a8e0:	42002034 	orhi	r8,r8,128
1000a8e4:	00800e04 	movi	r2,56
1000a8e8:	1100b116 	blt	r2,r4,1000abb0 <__adddf3+0x50c>
1000a8ec:	008007c4 	movi	r2,31
1000a8f0:	1100e216 	blt	r2,r4,1000ac7c <__adddf3+0x5d8>
1000a8f4:	00800804 	movi	r2,32
1000a8f8:	1105c83a 	sub	r2,r2,r4
1000a8fc:	4092983a 	sll	r9,r8,r2
1000a900:	310ed83a 	srl	r7,r6,r4
1000a904:	3084983a 	sll	r2,r6,r2
1000a908:	4110d83a 	srl	r8,r8,r4
1000a90c:	49ccb03a 	or	r6,r9,r7
1000a910:	1004c03a 	cmpne	r2,r2,zero
1000a914:	308cb03a 	or	r6,r6,r2
1000a918:	344d883a 	add	r6,r6,r17
1000a91c:	3463803a 	cmpltu	r17,r6,r17
1000a920:	414b883a 	add	r5,r8,r5
1000a924:	2c4b883a 	add	r5,r5,r17
1000a928:	3023883a 	mov	r17,r6
1000a92c:	2880202c 	andhi	r2,r5,128
1000a930:	10002726 	beq	r2,zero,1000a9d0 <__adddf3+0x32c>
1000a934:	84000044 	addi	r16,r16,1
1000a938:	0081ffc4 	movi	r2,2047
1000a93c:	8080ae26 	beq	r16,r2,1000abf8 <__adddf3+0x554>
1000a940:	00bfe034 	movhi	r2,65408
1000a944:	10bfffc4 	addi	r2,r2,-1
1000a948:	288a703a 	and	r5,r5,r2
1000a94c:	880cd07a 	srli	r6,r17,1
1000a950:	280897fa 	slli	r4,r5,31
1000a954:	88c0004c 	andi	r3,r17,1
1000a958:	30e2b03a 	or	r17,r6,r3
1000a95c:	280ad07a 	srli	r5,r5,1
1000a960:	8922b03a 	or	r17,r17,r4
1000a964:	003f6e06 	br	1000a720 <__adddf3+0x7c>
1000a968:	1148b03a 	or	r4,r2,r5
1000a96c:	20003c26 	beq	r4,zero,1000aa60 <__adddf3+0x3bc>
1000a970:	29000234 	orhi	r4,r5,8
1000a974:	01400434 	movhi	r5,16
1000a978:	297fffc4 	addi	r5,r5,-1
1000a97c:	2148703a 	and	r4,r4,r5
1000a980:	003f7f06 	br	1000a780 <__adddf3+0xdc>
1000a984:	18ffffc4 	addi	r3,r3,-1
1000a988:	18004d1e 	bne	r3,zero,1000aac0 <__adddf3+0x41c>
1000a98c:	898dc83a 	sub	r6,r17,r6
1000a990:	89a3803a 	cmpltu	r17,r17,r6
1000a994:	2a0bc83a 	sub	r5,r5,r8
1000a998:	2c4bc83a 	sub	r5,r5,r17
1000a99c:	3023883a 	mov	r17,r6
1000a9a0:	003f9c06 	br	1000a814 <__adddf3+0x170>
1000a9a4:	4184b03a 	or	r2,r8,r6
1000a9a8:	103f5d26 	beq	r2,zero,1000a720 <__adddf3+0x7c>
1000a9ac:	213fffc4 	addi	r4,r4,-1
1000a9b0:	203fd926 	beq	r4,zero,1000a918 <__adddf3+0x274>
1000a9b4:	0081ffc4 	movi	r2,2047
1000a9b8:	80bfca1e 	bne	r16,r2,1000a8e4 <__adddf3+0x240>
1000a9bc:	003f5806 	br	1000a720 <__adddf3+0x7c>
1000a9c0:	10c8b03a 	or	r4,r2,r3
1000a9c4:	20008b26 	beq	r4,zero,1000abf4 <__adddf3+0x550>
1000a9c8:	100b883a 	mov	r5,r2
1000a9cc:	1823883a 	mov	r17,r3
1000a9d0:	888001cc 	andi	r2,r17,7
1000a9d4:	103f541e 	bne	r2,zero,1000a728 <__adddf3+0x84>
1000a9d8:	9007883a 	mov	r3,r18
1000a9dc:	003fb006 	br	1000a8a0 <__adddf3+0x1fc>
1000a9e0:	1800531e 	bne	r3,zero,1000ab30 <__adddf3+0x48c>
1000a9e4:	80800044 	addi	r2,r16,1
1000a9e8:	1081ffcc 	andi	r2,r2,2047
1000a9ec:	00c00044 	movi	r3,1
1000a9f0:	1880990e 	bge	r3,r2,1000ac58 <__adddf3+0x5b4>
1000a9f4:	8985c83a 	sub	r2,r17,r6
1000a9f8:	8887803a 	cmpltu	r3,r17,r2
1000a9fc:	2a27c83a 	sub	r19,r5,r8
1000aa00:	98e7c83a 	sub	r19,r19,r3
1000aa04:	98c0202c 	andhi	r3,r19,128
1000aa08:	18006226 	beq	r3,zero,1000ab94 <__adddf3+0x4f0>
1000aa0c:	3463c83a 	sub	r17,r6,r17
1000aa10:	4151c83a 	sub	r8,r8,r5
1000aa14:	344d803a 	cmpltu	r6,r6,r17
1000aa18:	41a7c83a 	sub	r19,r8,r6
1000aa1c:	3825883a 	mov	r18,r7
1000aa20:	983f821e 	bne	r19,zero,1000a82c <__adddf3+0x188>
1000aa24:	8809883a 	mov	r4,r17
1000aa28:	000ce3c0 	call	1000ce3c <__clzsi2>
1000aa2c:	10800804 	addi	r2,r2,32
1000aa30:	10fffe04 	addi	r3,r2,-8
1000aa34:	010007c4 	movi	r4,31
1000aa38:	20ff810e 	bge	r4,r3,1000a840 <__adddf3+0x19c>
1000aa3c:	14fff604 	addi	r19,r2,-40
1000aa40:	8ce6983a 	sll	r19,r17,r19
1000aa44:	0023883a 	mov	r17,zero
1000aa48:	1c3f840e 	bge	r3,r16,1000a85c <__adddf3+0x1b8>
1000aa4c:	017fe034 	movhi	r5,65408
1000aa50:	297fffc4 	addi	r5,r5,-1
1000aa54:	80e1c83a 	sub	r16,r16,r3
1000aa58:	994a703a 	and	r5,r19,r5
1000aa5c:	003f3006 	br	1000a720 <__adddf3+0x7c>
1000aa60:	0009883a 	mov	r4,zero
1000aa64:	0005883a 	mov	r2,zero
1000aa68:	003f4506 	br	1000a780 <__adddf3+0xdc>
1000aa6c:	418cb03a 	or	r6,r8,r6
1000aa70:	300cc03a 	cmpne	r6,r6,zero
1000aa74:	0007883a 	mov	r3,zero
1000aa78:	003f6106 	br	1000a800 <__adddf3+0x15c>
1000aa7c:	2000921e 	bne	r4,zero,1000acc8 <__adddf3+0x624>
1000aa80:	80800044 	addi	r2,r16,1
1000aa84:	11c1ffcc 	andi	r7,r2,2047
1000aa88:	01000044 	movi	r4,1
1000aa8c:	21c0610e 	bge	r4,r7,1000ac14 <__adddf3+0x570>
1000aa90:	0101ffc4 	movi	r4,2047
1000aa94:	1100a326 	beq	r2,r4,1000ad24 <__adddf3+0x680>
1000aa98:	344d883a 	add	r6,r6,r17
1000aa9c:	3463803a 	cmpltu	r17,r6,r17
1000aaa0:	414b883a 	add	r5,r8,r5
1000aaa4:	2c4b883a 	add	r5,r5,r17
1000aaa8:	282297fa 	slli	r17,r5,31
1000aaac:	300cd07a 	srli	r6,r6,1
1000aab0:	280ad07a 	srli	r5,r5,1
1000aab4:	1021883a 	mov	r16,r2
1000aab8:	89a2b03a 	or	r17,r17,r6
1000aabc:	003f1806 	br	1000a720 <__adddf3+0x7c>
1000aac0:	0081ffc4 	movi	r2,2047
1000aac4:	80bf411e 	bne	r16,r2,1000a7cc <__adddf3+0x128>
1000aac8:	003f1506 	br	1000a720 <__adddf3+0x7c>
1000aacc:	80bff844 	addi	r2,r16,-31
1000aad0:	00c00804 	movi	r3,32
1000aad4:	9884d83a 	srl	r2,r19,r2
1000aad8:	28c04a26 	beq	r5,r3,1000ac04 <__adddf3+0x560>
1000aadc:	00c00fc4 	movi	r3,63
1000aae0:	1c21c83a 	sub	r16,r3,r16
1000aae4:	9c26983a 	sll	r19,r19,r16
1000aae8:	9c62b03a 	or	r17,r19,r17
1000aaec:	8822c03a 	cmpne	r17,r17,zero
1000aaf0:	88a2b03a 	or	r17,r17,r2
1000aaf4:	000b883a 	mov	r5,zero
1000aaf8:	0021883a 	mov	r16,zero
1000aafc:	003fb406 	br	1000a9d0 <__adddf3+0x32c>
1000ab00:	18bff804 	addi	r2,r3,-32
1000ab04:	01000804 	movi	r4,32
1000ab08:	4084d83a 	srl	r2,r8,r2
1000ab0c:	19003f26 	beq	r3,r4,1000ac0c <__adddf3+0x568>
1000ab10:	01001004 	movi	r4,64
1000ab14:	20c7c83a 	sub	r3,r4,r3
1000ab18:	40d0983a 	sll	r8,r8,r3
1000ab1c:	418cb03a 	or	r6,r8,r6
1000ab20:	300cc03a 	cmpne	r6,r6,zero
1000ab24:	308cb03a 	or	r6,r6,r2
1000ab28:	0007883a 	mov	r3,zero
1000ab2c:	003f3406 	br	1000a800 <__adddf3+0x15c>
1000ab30:	80002326 	beq	r16,zero,1000abc0 <__adddf3+0x51c>
1000ab34:	0101ffc4 	movi	r4,2047
1000ab38:	11005e26 	beq	r2,r4,1000acb4 <__adddf3+0x610>
1000ab3c:	00c7c83a 	sub	r3,zero,r3
1000ab40:	29402034 	orhi	r5,r5,128
1000ab44:	01000e04 	movi	r4,56
1000ab48:	20c07216 	blt	r4,r3,1000ad14 <__adddf3+0x670>
1000ab4c:	010007c4 	movi	r4,31
1000ab50:	20c0ce16 	blt	r4,r3,1000ae8c <__adddf3+0x7e8>
1000ab54:	01000804 	movi	r4,32
1000ab58:	20c9c83a 	sub	r4,r4,r3
1000ab5c:	2914983a 	sll	r10,r5,r4
1000ab60:	88d2d83a 	srl	r9,r17,r3
1000ab64:	8908983a 	sll	r4,r17,r4
1000ab68:	28c6d83a 	srl	r3,r5,r3
1000ab6c:	5262b03a 	or	r17,r10,r9
1000ab70:	2008c03a 	cmpne	r4,r4,zero
1000ab74:	8922b03a 	or	r17,r17,r4
1000ab78:	3463c83a 	sub	r17,r6,r17
1000ab7c:	40c7c83a 	sub	r3,r8,r3
1000ab80:	344d803a 	cmpltu	r6,r6,r17
1000ab84:	198bc83a 	sub	r5,r3,r6
1000ab88:	1021883a 	mov	r16,r2
1000ab8c:	3825883a 	mov	r18,r7
1000ab90:	003f2006 	br	1000a814 <__adddf3+0x170>
1000ab94:	9886b03a 	or	r3,r19,r2
1000ab98:	1800141e 	bne	r3,zero,1000abec <__adddf3+0x548>
1000ab9c:	0007883a 	mov	r3,zero
1000aba0:	000b883a 	mov	r5,zero
1000aba4:	0023883a 	mov	r17,zero
1000aba8:	0021883a 	mov	r16,zero
1000abac:	003f3c06 	br	1000a8a0 <__adddf3+0x1fc>
1000abb0:	418cb03a 	or	r6,r8,r6
1000abb4:	300cc03a 	cmpne	r6,r6,zero
1000abb8:	0011883a 	mov	r8,zero
1000abbc:	003f5606 	br	1000a918 <__adddf3+0x274>
1000abc0:	2c48b03a 	or	r4,r5,r17
1000abc4:	20003b26 	beq	r4,zero,1000acb4 <__adddf3+0x610>
1000abc8:	00c6303a 	nor	r3,zero,r3
1000abcc:	1800371e 	bne	r3,zero,1000acac <__adddf3+0x608>
1000abd0:	3463c83a 	sub	r17,r6,r17
1000abd4:	414bc83a 	sub	r5,r8,r5
1000abd8:	344d803a 	cmpltu	r6,r6,r17
1000abdc:	298bc83a 	sub	r5,r5,r6
1000abe0:	1021883a 	mov	r16,r2
1000abe4:	3825883a 	mov	r18,r7
1000abe8:	003f0a06 	br	1000a814 <__adddf3+0x170>
1000abec:	1023883a 	mov	r17,r2
1000abf0:	003f0d06 	br	1000a828 <__adddf3+0x184>
1000abf4:	0007883a 	mov	r3,zero
1000abf8:	000b883a 	mov	r5,zero
1000abfc:	0023883a 	mov	r17,zero
1000ac00:	003f2706 	br	1000a8a0 <__adddf3+0x1fc>
1000ac04:	0027883a 	mov	r19,zero
1000ac08:	003fb706 	br	1000aae8 <__adddf3+0x444>
1000ac0c:	0011883a 	mov	r8,zero
1000ac10:	003fc206 	br	1000ab1c <__adddf3+0x478>
1000ac14:	2c44b03a 	or	r2,r5,r17
1000ac18:	8000871e 	bne	r16,zero,1000ae38 <__adddf3+0x794>
1000ac1c:	1000b126 	beq	r2,zero,1000aee4 <__adddf3+0x840>
1000ac20:	4184b03a 	or	r2,r8,r6
1000ac24:	103ebe26 	beq	r2,zero,1000a720 <__adddf3+0x7c>
1000ac28:	3445883a 	add	r2,r6,r17
1000ac2c:	1463803a 	cmpltu	r17,r2,r17
1000ac30:	414b883a 	add	r5,r8,r5
1000ac34:	2c4b883a 	add	r5,r5,r17
1000ac38:	28c0202c 	andhi	r3,r5,128
1000ac3c:	1023883a 	mov	r17,r2
1000ac40:	183f6326 	beq	r3,zero,1000a9d0 <__adddf3+0x32c>
1000ac44:	00bfe034 	movhi	r2,65408
1000ac48:	10bfffc4 	addi	r2,r2,-1
1000ac4c:	2021883a 	mov	r16,r4
1000ac50:	288a703a 	and	r5,r5,r2
1000ac54:	003eb206 	br	1000a720 <__adddf3+0x7c>
1000ac58:	2c44b03a 	or	r2,r5,r17
1000ac5c:	8000251e 	bne	r16,zero,1000acf4 <__adddf3+0x650>
1000ac60:	10004b1e 	bne	r2,zero,1000ad90 <__adddf3+0x6ec>
1000ac64:	4184b03a 	or	r2,r8,r6
1000ac68:	103fe226 	beq	r2,zero,1000abf4 <__adddf3+0x550>
1000ac6c:	400b883a 	mov	r5,r8
1000ac70:	3023883a 	mov	r17,r6
1000ac74:	3825883a 	mov	r18,r7
1000ac78:	003ea906 	br	1000a720 <__adddf3+0x7c>
1000ac7c:	20bff804 	addi	r2,r4,-32
1000ac80:	01c00804 	movi	r7,32
1000ac84:	4084d83a 	srl	r2,r8,r2
1000ac88:	21c07e26 	beq	r4,r7,1000ae84 <__adddf3+0x7e0>
1000ac8c:	01c01004 	movi	r7,64
1000ac90:	3909c83a 	sub	r4,r7,r4
1000ac94:	4110983a 	sll	r8,r8,r4
1000ac98:	418cb03a 	or	r6,r8,r6
1000ac9c:	300cc03a 	cmpne	r6,r6,zero
1000aca0:	308cb03a 	or	r6,r6,r2
1000aca4:	0011883a 	mov	r8,zero
1000aca8:	003f1b06 	br	1000a918 <__adddf3+0x274>
1000acac:	0101ffc4 	movi	r4,2047
1000acb0:	113fa41e 	bne	r2,r4,1000ab44 <__adddf3+0x4a0>
1000acb4:	400b883a 	mov	r5,r8
1000acb8:	3023883a 	mov	r17,r6
1000acbc:	1021883a 	mov	r16,r2
1000acc0:	3825883a 	mov	r18,r7
1000acc4:	003e9606 	br	1000a720 <__adddf3+0x7c>
1000acc8:	80001a1e 	bne	r16,zero,1000ad34 <__adddf3+0x690>
1000accc:	2c4eb03a 	or	r7,r5,r17
1000acd0:	38005526 	beq	r7,zero,1000ae28 <__adddf3+0x784>
1000acd4:	0108303a 	nor	r4,zero,r4
1000acd8:	2000511e 	bne	r4,zero,1000ae20 <__adddf3+0x77c>
1000acdc:	89a3883a 	add	r17,r17,r6
1000ace0:	414b883a 	add	r5,r8,r5
1000ace4:	898d803a 	cmpltu	r6,r17,r6
1000ace8:	298b883a 	add	r5,r5,r6
1000acec:	1021883a 	mov	r16,r2
1000acf0:	003f0e06 	br	1000a92c <__adddf3+0x288>
1000acf4:	1000341e 	bne	r2,zero,1000adc8 <__adddf3+0x724>
1000acf8:	4184b03a 	or	r2,r8,r6
1000acfc:	10006f26 	beq	r2,zero,1000aebc <__adddf3+0x818>
1000ad00:	400b883a 	mov	r5,r8
1000ad04:	3023883a 	mov	r17,r6
1000ad08:	3825883a 	mov	r18,r7
1000ad0c:	0401ffc4 	movi	r16,2047
1000ad10:	003e8306 	br	1000a720 <__adddf3+0x7c>
1000ad14:	2c62b03a 	or	r17,r5,r17
1000ad18:	8822c03a 	cmpne	r17,r17,zero
1000ad1c:	0007883a 	mov	r3,zero
1000ad20:	003f9506 	br	1000ab78 <__adddf3+0x4d4>
1000ad24:	1021883a 	mov	r16,r2
1000ad28:	000b883a 	mov	r5,zero
1000ad2c:	0023883a 	mov	r17,zero
1000ad30:	003edb06 	br	1000a8a0 <__adddf3+0x1fc>
1000ad34:	01c1ffc4 	movi	r7,2047
1000ad38:	11c03b26 	beq	r2,r7,1000ae28 <__adddf3+0x784>
1000ad3c:	0109c83a 	sub	r4,zero,r4
1000ad40:	29402034 	orhi	r5,r5,128
1000ad44:	01c00e04 	movi	r7,56
1000ad48:	39006216 	blt	r7,r4,1000aed4 <__adddf3+0x830>
1000ad4c:	01c007c4 	movi	r7,31
1000ad50:	39006b16 	blt	r7,r4,1000af00 <__adddf3+0x85c>
1000ad54:	01c00804 	movi	r7,32
1000ad58:	390fc83a 	sub	r7,r7,r4
1000ad5c:	29d4983a 	sll	r10,r5,r7
1000ad60:	8912d83a 	srl	r9,r17,r4
1000ad64:	89ce983a 	sll	r7,r17,r7
1000ad68:	2908d83a 	srl	r4,r5,r4
1000ad6c:	5262b03a 	or	r17,r10,r9
1000ad70:	380ac03a 	cmpne	r5,r7,zero
1000ad74:	8962b03a 	or	r17,r17,r5
1000ad78:	89a3883a 	add	r17,r17,r6
1000ad7c:	2211883a 	add	r8,r4,r8
1000ad80:	898d803a 	cmpltu	r6,r17,r6
1000ad84:	418b883a 	add	r5,r8,r6
1000ad88:	1021883a 	mov	r16,r2
1000ad8c:	003ee706 	br	1000a92c <__adddf3+0x288>
1000ad90:	4184b03a 	or	r2,r8,r6
1000ad94:	103e6226 	beq	r2,zero,1000a720 <__adddf3+0x7c>
1000ad98:	8987c83a 	sub	r3,r17,r6
1000ad9c:	88c9803a 	cmpltu	r4,r17,r3
1000ada0:	2a05c83a 	sub	r2,r5,r8
1000ada4:	1105c83a 	sub	r2,r2,r4
1000ada8:	1100202c 	andhi	r4,r2,128
1000adac:	203f0426 	beq	r4,zero,1000a9c0 <__adddf3+0x31c>
1000adb0:	3463c83a 	sub	r17,r6,r17
1000adb4:	414bc83a 	sub	r5,r8,r5
1000adb8:	344d803a 	cmpltu	r6,r6,r17
1000adbc:	298bc83a 	sub	r5,r5,r6
1000adc0:	3825883a 	mov	r18,r7
1000adc4:	003e5606 	br	1000a720 <__adddf3+0x7c>
1000adc8:	4184b03a 	or	r2,r8,r6
1000adcc:	10002b26 	beq	r2,zero,1000ae7c <__adddf3+0x7d8>
1000add0:	2804d0fa 	srli	r2,r5,3
1000add4:	8822d0fa 	srli	r17,r17,3
1000add8:	280a977a 	slli	r5,r5,29
1000addc:	10c0022c 	andhi	r3,r2,8
1000ade0:	2c62b03a 	or	r17,r5,r17
1000ade4:	18000826 	beq	r3,zero,1000ae08 <__adddf3+0x764>
1000ade8:	4008d0fa 	srli	r4,r8,3
1000adec:	20c0022c 	andhi	r3,r4,8
1000adf0:	1800051e 	bne	r3,zero,1000ae08 <__adddf3+0x764>
1000adf4:	300cd0fa 	srli	r6,r6,3
1000adf8:	4010977a 	slli	r8,r8,29
1000adfc:	2005883a 	mov	r2,r4
1000ae00:	3825883a 	mov	r18,r7
1000ae04:	41a2b03a 	or	r17,r8,r6
1000ae08:	880ad77a 	srli	r5,r17,29
1000ae0c:	100490fa 	slli	r2,r2,3
1000ae10:	882290fa 	slli	r17,r17,3
1000ae14:	0401ffc4 	movi	r16,2047
1000ae18:	288ab03a 	or	r5,r5,r2
1000ae1c:	003e4006 	br	1000a720 <__adddf3+0x7c>
1000ae20:	01c1ffc4 	movi	r7,2047
1000ae24:	11ffc71e 	bne	r2,r7,1000ad44 <__adddf3+0x6a0>
1000ae28:	400b883a 	mov	r5,r8
1000ae2c:	3023883a 	mov	r17,r6
1000ae30:	1021883a 	mov	r16,r2
1000ae34:	003e3a06 	br	1000a720 <__adddf3+0x7c>
1000ae38:	10002d26 	beq	r2,zero,1000aef0 <__adddf3+0x84c>
1000ae3c:	4184b03a 	or	r2,r8,r6
1000ae40:	10000e26 	beq	r2,zero,1000ae7c <__adddf3+0x7d8>
1000ae44:	2804d0fa 	srli	r2,r5,3
1000ae48:	8822d0fa 	srli	r17,r17,3
1000ae4c:	280a977a 	slli	r5,r5,29
1000ae50:	10c0022c 	andhi	r3,r2,8
1000ae54:	2c62b03a 	or	r17,r5,r17
1000ae58:	183feb26 	beq	r3,zero,1000ae08 <__adddf3+0x764>
1000ae5c:	4008d0fa 	srli	r4,r8,3
1000ae60:	20c0022c 	andhi	r3,r4,8
1000ae64:	183fe81e 	bne	r3,zero,1000ae08 <__adddf3+0x764>
1000ae68:	300cd0fa 	srli	r6,r6,3
1000ae6c:	4010977a 	slli	r8,r8,29
1000ae70:	2005883a 	mov	r2,r4
1000ae74:	41a2b03a 	or	r17,r8,r6
1000ae78:	003fe306 	br	1000ae08 <__adddf3+0x764>
1000ae7c:	0401ffc4 	movi	r16,2047
1000ae80:	003e2706 	br	1000a720 <__adddf3+0x7c>
1000ae84:	0011883a 	mov	r8,zero
1000ae88:	003f8306 	br	1000ac98 <__adddf3+0x5f4>
1000ae8c:	193ff804 	addi	r4,r3,-32
1000ae90:	02400804 	movi	r9,32
1000ae94:	2908d83a 	srl	r4,r5,r4
1000ae98:	1a402526 	beq	r3,r9,1000af30 <__adddf3+0x88c>
1000ae9c:	02401004 	movi	r9,64
1000aea0:	48c7c83a 	sub	r3,r9,r3
1000aea4:	28ca983a 	sll	r5,r5,r3
1000aea8:	2c62b03a 	or	r17,r5,r17
1000aeac:	8822c03a 	cmpne	r17,r17,zero
1000aeb0:	8922b03a 	or	r17,r17,r4
1000aeb4:	0007883a 	mov	r3,zero
1000aeb8:	003f2f06 	br	1000ab78 <__adddf3+0x4d4>
1000aebc:	01402034 	movhi	r5,128
1000aec0:	0007883a 	mov	r3,zero
1000aec4:	297fffc4 	addi	r5,r5,-1
1000aec8:	047ffe04 	movi	r17,-8
1000aecc:	0401ffc4 	movi	r16,2047
1000aed0:	003e7306 	br	1000a8a0 <__adddf3+0x1fc>
1000aed4:	2c62b03a 	or	r17,r5,r17
1000aed8:	8822c03a 	cmpne	r17,r17,zero
1000aedc:	0009883a 	mov	r4,zero
1000aee0:	003fa506 	br	1000ad78 <__adddf3+0x6d4>
1000aee4:	400b883a 	mov	r5,r8
1000aee8:	3023883a 	mov	r17,r6
1000aeec:	003e0c06 	br	1000a720 <__adddf3+0x7c>
1000aef0:	400b883a 	mov	r5,r8
1000aef4:	3023883a 	mov	r17,r6
1000aef8:	0401ffc4 	movi	r16,2047
1000aefc:	003e0806 	br	1000a720 <__adddf3+0x7c>
1000af00:	21fff804 	addi	r7,r4,-32
1000af04:	02400804 	movi	r9,32
1000af08:	29ced83a 	srl	r7,r5,r7
1000af0c:	22400a26 	beq	r4,r9,1000af38 <__adddf3+0x894>
1000af10:	02401004 	movi	r9,64
1000af14:	4909c83a 	sub	r4,r9,r4
1000af18:	290a983a 	sll	r5,r5,r4
1000af1c:	2c62b03a 	or	r17,r5,r17
1000af20:	8822c03a 	cmpne	r17,r17,zero
1000af24:	89e2b03a 	or	r17,r17,r7
1000af28:	0009883a 	mov	r4,zero
1000af2c:	003f9206 	br	1000ad78 <__adddf3+0x6d4>
1000af30:	000b883a 	mov	r5,zero
1000af34:	003fdc06 	br	1000aea8 <__adddf3+0x804>
1000af38:	000b883a 	mov	r5,zero
1000af3c:	003ff706 	br	1000af1c <__adddf3+0x878>

1000af40 <__divdf3>:
1000af40:	defff004 	addi	sp,sp,-64
1000af44:	dc800815 	stw	r18,32(sp)
1000af48:	2824d53a 	srli	r18,r5,20
1000af4c:	dd800c15 	stw	r22,48(sp)
1000af50:	282cd7fa 	srli	r22,r5,31
1000af54:	dc000615 	stw	r16,24(sp)
1000af58:	04000434 	movhi	r16,16
1000af5c:	df000e15 	stw	fp,56(sp)
1000af60:	dd000a15 	stw	r20,40(sp)
1000af64:	dcc00915 	stw	r19,36(sp)
1000af68:	dc400715 	stw	r17,28(sp)
1000af6c:	843fffc4 	addi	r16,r16,-1
1000af70:	dfc00f15 	stw	ra,60(sp)
1000af74:	ddc00d15 	stw	r23,52(sp)
1000af78:	dd400b15 	stw	r21,44(sp)
1000af7c:	9481ffcc 	andi	r18,r18,2047
1000af80:	2029883a 	mov	r20,r4
1000af84:	2027883a 	mov	r19,r4
1000af88:	2c22703a 	and	r17,r5,r16
1000af8c:	b7003fcc 	andi	fp,r22,255
1000af90:	90005e26 	beq	r18,zero,1000b10c <__divdf3+0x1cc>
1000af94:	0081ffc4 	movi	r2,2047
1000af98:	90803526 	beq	r18,r2,1000b070 <__divdf3+0x130>
1000af9c:	8c000434 	orhi	r16,r17,16
1000afa0:	2004d77a 	srli	r2,r4,29
1000afa4:	802090fa 	slli	r16,r16,3
1000afa8:	202690fa 	slli	r19,r4,3
1000afac:	94bf0044 	addi	r18,r18,-1023
1000afb0:	80a2b03a 	or	r17,r16,r2
1000afb4:	0029883a 	mov	r20,zero
1000afb8:	0011883a 	mov	r8,zero
1000afbc:	380ad53a 	srli	r5,r7,20
1000afc0:	382ed7fa 	srli	r23,r7,31
1000afc4:	04000434 	movhi	r16,16
1000afc8:	843fffc4 	addi	r16,r16,-1
1000afcc:	2941ffcc 	andi	r5,r5,2047
1000afd0:	302b883a 	mov	r21,r6
1000afd4:	3c20703a 	and	r16,r7,r16
1000afd8:	ba403fcc 	andi	r9,r23,255
1000afdc:	28006726 	beq	r5,zero,1000b17c <__divdf3+0x23c>
1000afe0:	0081ffc4 	movi	r2,2047
1000afe4:	28805f26 	beq	r5,r2,1000b164 <__divdf3+0x224>
1000afe8:	84000434 	orhi	r16,r16,16
1000afec:	3004d77a 	srli	r2,r6,29
1000aff0:	802090fa 	slli	r16,r16,3
1000aff4:	302a90fa 	slli	r21,r6,3
1000aff8:	297f0044 	addi	r5,r5,-1023
1000affc:	80a0b03a 	or	r16,r16,r2
1000b000:	000f883a 	mov	r7,zero
1000b004:	3d06b03a 	or	r3,r7,r20
1000b008:	180690ba 	slli	r3,r3,2
1000b00c:	00840074 	movhi	r2,4097
1000b010:	10ac0c04 	addi	r2,r2,-20432
1000b014:	1885883a 	add	r2,r3,r2
1000b018:	10800017 	ldw	r2,0(r2)
1000b01c:	b5c8f03a 	xor	r4,r22,r23
1000b020:	200d883a 	mov	r6,r4
1000b024:	25003fcc 	andi	r20,r4,255
1000b028:	9165c83a 	sub	r18,r18,r5
1000b02c:	1000683a 	jmp	r2
1000b030:	1000b278 	rdprs	zero,r2,713
1000b034:	1000b0a8 	cmpgeui	zero,r2,706
1000b038:	1000b23c 	xorhi	zero,r2,712
1000b03c:	1000b08c 	andi	zero,r2,706
1000b040:	1000b23c 	xorhi	zero,r2,712
1000b044:	1000b210 	cmplti	zero,r2,712
1000b048:	1000b23c 	xorhi	zero,r2,712
1000b04c:	1000b08c 	andi	zero,r2,706
1000b050:	1000b0a8 	cmpgeui	zero,r2,706
1000b054:	1000b0a8 	cmpgeui	zero,r2,706
1000b058:	1000b210 	cmplti	zero,r2,712
1000b05c:	1000b08c 	andi	zero,r2,706
1000b060:	1000b09c 	xori	zero,r2,706
1000b064:	1000b09c 	xori	zero,r2,706
1000b068:	1000b09c 	xori	zero,r2,706
1000b06c:	1000b24c 	andi	zero,r2,713
1000b070:	8904b03a 	or	r2,r17,r4
1000b074:	1000631e 	bne	r2,zero,1000b204 <__divdf3+0x2c4>
1000b078:	05000204 	movi	r20,8
1000b07c:	0023883a 	mov	r17,zero
1000b080:	0027883a 	mov	r19,zero
1000b084:	02000084 	movi	r8,2
1000b088:	003fcc06 	br	1000afbc <__divdf3+0x7c>
1000b08c:	8023883a 	mov	r17,r16
1000b090:	a827883a 	mov	r19,r21
1000b094:	4839883a 	mov	fp,r9
1000b098:	3811883a 	mov	r8,r7
1000b09c:	00800084 	movi	r2,2
1000b0a0:	4081531e 	bne	r8,r2,1000b5f0 <__divdf3+0x6b0>
1000b0a4:	e029883a 	mov	r20,fp
1000b0a8:	a180004c 	andi	r6,r20,1
1000b0ac:	0201ffc4 	movi	r8,2047
1000b0b0:	000b883a 	mov	r5,zero
1000b0b4:	0027883a 	mov	r19,zero
1000b0b8:	4010953a 	slli	r8,r8,20
1000b0bc:	30c03fcc 	andi	r3,r6,255
1000b0c0:	04000434 	movhi	r16,16
1000b0c4:	180697fa 	slli	r3,r3,31
1000b0c8:	843fffc4 	addi	r16,r16,-1
1000b0cc:	2c20703a 	and	r16,r5,r16
1000b0d0:	8220b03a 	or	r16,r16,r8
1000b0d4:	80c6b03a 	or	r3,r16,r3
1000b0d8:	9805883a 	mov	r2,r19
1000b0dc:	dfc00f17 	ldw	ra,60(sp)
1000b0e0:	df000e17 	ldw	fp,56(sp)
1000b0e4:	ddc00d17 	ldw	r23,52(sp)
1000b0e8:	dd800c17 	ldw	r22,48(sp)
1000b0ec:	dd400b17 	ldw	r21,44(sp)
1000b0f0:	dd000a17 	ldw	r20,40(sp)
1000b0f4:	dcc00917 	ldw	r19,36(sp)
1000b0f8:	dc800817 	ldw	r18,32(sp)
1000b0fc:	dc400717 	ldw	r17,28(sp)
1000b100:	dc000617 	ldw	r16,24(sp)
1000b104:	dec01004 	addi	sp,sp,64
1000b108:	f800283a 	ret
1000b10c:	8904b03a 	or	r2,r17,r4
1000b110:	10003726 	beq	r2,zero,1000b1f0 <__divdf3+0x2b0>
1000b114:	88014d26 	beq	r17,zero,1000b64c <__divdf3+0x70c>
1000b118:	8809883a 	mov	r4,r17
1000b11c:	d9800215 	stw	r6,8(sp)
1000b120:	d9c00515 	stw	r7,20(sp)
1000b124:	000ce3c0 	call	1000ce3c <__clzsi2>
1000b128:	d9800217 	ldw	r6,8(sp)
1000b12c:	d9c00517 	ldw	r7,20(sp)
1000b130:	1007883a 	mov	r3,r2
1000b134:	01000a04 	movi	r4,40
1000b138:	1cfffe04 	addi	r19,r3,-8
1000b13c:	20c9c83a 	sub	r4,r4,r3
1000b140:	8cca983a 	sll	r5,r17,r19
1000b144:	a108d83a 	srl	r4,r20,r4
1000b148:	a4e6983a 	sll	r19,r20,r19
1000b14c:	2162b03a 	or	r17,r4,r5
1000b150:	04bf0344 	movi	r18,-1011
1000b154:	90e5c83a 	sub	r18,r18,r3
1000b158:	0029883a 	mov	r20,zero
1000b15c:	0011883a 	mov	r8,zero
1000b160:	003f9606 	br	1000afbc <__divdf3+0x7c>
1000b164:	8184b03a 	or	r2,r16,r6
1000b168:	10001f1e 	bne	r2,zero,1000b1e8 <__divdf3+0x2a8>
1000b16c:	0021883a 	mov	r16,zero
1000b170:	002b883a 	mov	r21,zero
1000b174:	01c00084 	movi	r7,2
1000b178:	003fa206 	br	1000b004 <__divdf3+0xc4>
1000b17c:	8184b03a 	or	r2,r16,r6
1000b180:	10001526 	beq	r2,zero,1000b1d8 <__divdf3+0x298>
1000b184:	80013d26 	beq	r16,zero,1000b67c <__divdf3+0x73c>
1000b188:	8009883a 	mov	r4,r16
1000b18c:	d9800215 	stw	r6,8(sp)
1000b190:	da000315 	stw	r8,12(sp)
1000b194:	da400415 	stw	r9,16(sp)
1000b198:	000ce3c0 	call	1000ce3c <__clzsi2>
1000b19c:	d9800217 	ldw	r6,8(sp)
1000b1a0:	da000317 	ldw	r8,12(sp)
1000b1a4:	da400417 	ldw	r9,16(sp)
1000b1a8:	1007883a 	mov	r3,r2
1000b1ac:	01000a04 	movi	r4,40
1000b1b0:	1d7ffe04 	addi	r21,r3,-8
1000b1b4:	20c9c83a 	sub	r4,r4,r3
1000b1b8:	8560983a 	sll	r16,r16,r21
1000b1bc:	3108d83a 	srl	r4,r6,r4
1000b1c0:	356a983a 	sll	r21,r6,r21
1000b1c4:	2420b03a 	or	r16,r4,r16
1000b1c8:	017f0344 	movi	r5,-1011
1000b1cc:	28cbc83a 	sub	r5,r5,r3
1000b1d0:	000f883a 	mov	r7,zero
1000b1d4:	003f8b06 	br	1000b004 <__divdf3+0xc4>
1000b1d8:	0021883a 	mov	r16,zero
1000b1dc:	002b883a 	mov	r21,zero
1000b1e0:	01c00044 	movi	r7,1
1000b1e4:	003f8706 	br	1000b004 <__divdf3+0xc4>
1000b1e8:	01c000c4 	movi	r7,3
1000b1ec:	003f8506 	br	1000b004 <__divdf3+0xc4>
1000b1f0:	05000104 	movi	r20,4
1000b1f4:	0023883a 	mov	r17,zero
1000b1f8:	0027883a 	mov	r19,zero
1000b1fc:	02000044 	movi	r8,1
1000b200:	003f6e06 	br	1000afbc <__divdf3+0x7c>
1000b204:	05000304 	movi	r20,12
1000b208:	020000c4 	movi	r8,3
1000b20c:	003f6b06 	br	1000afbc <__divdf3+0x7c>
1000b210:	01400434 	movhi	r5,16
1000b214:	000d883a 	mov	r6,zero
1000b218:	297fffc4 	addi	r5,r5,-1
1000b21c:	04ffffc4 	movi	r19,-1
1000b220:	0201ffc4 	movi	r8,2047
1000b224:	003fa406 	br	1000b0b8 <__divdf3+0x178>
1000b228:	043f0084 	movi	r16,-1022
1000b22c:	84a1c83a 	sub	r16,r16,r18
1000b230:	00800e04 	movi	r2,56
1000b234:	14014d0e 	bge	r2,r16,1000b76c <__divdf3+0x82c>
1000b238:	a180004c 	andi	r6,r20,1
1000b23c:	0011883a 	mov	r8,zero
1000b240:	000b883a 	mov	r5,zero
1000b244:	0027883a 	mov	r19,zero
1000b248:	003f9b06 	br	1000b0b8 <__divdf3+0x178>
1000b24c:	8880022c 	andhi	r2,r17,8
1000b250:	1000f026 	beq	r2,zero,1000b614 <__divdf3+0x6d4>
1000b254:	8080022c 	andhi	r2,r16,8
1000b258:	1000ee1e 	bne	r2,zero,1000b614 <__divdf3+0x6d4>
1000b25c:	00800434 	movhi	r2,16
1000b260:	81400234 	orhi	r5,r16,8
1000b264:	10bfffc4 	addi	r2,r2,-1
1000b268:	b80d883a 	mov	r6,r23
1000b26c:	288a703a 	and	r5,r5,r2
1000b270:	a827883a 	mov	r19,r21
1000b274:	003fea06 	br	1000b220 <__divdf3+0x2e0>
1000b278:	84411c36 	bltu	r16,r17,1000b6ec <__divdf3+0x7ac>
1000b27c:	8c011a26 	beq	r17,r16,1000b6e8 <__divdf3+0x7a8>
1000b280:	94bfffc4 	addi	r18,r18,-1
1000b284:	dcc00015 	stw	r19,0(sp)
1000b288:	8811883a 	mov	r8,r17
1000b28c:	002d883a 	mov	r22,zero
1000b290:	a80cd63a 	srli	r6,r21,24
1000b294:	8020923a 	slli	r16,r16,8
1000b298:	a82a923a 	slli	r21,r21,8
1000b29c:	4009883a 	mov	r4,r8
1000b2a0:	342eb03a 	or	r23,r6,r16
1000b2a4:	dd400115 	stw	r21,4(sp)
1000b2a8:	b82ad43a 	srli	r21,r23,16
1000b2ac:	da000315 	stw	r8,12(sp)
1000b2b0:	bcffffcc 	andi	r19,r23,65535
1000b2b4:	a80b883a 	mov	r5,r21
1000b2b8:	000a66c0 	call	1000a66c <__udivsi3>
1000b2bc:	1009883a 	mov	r4,r2
1000b2c0:	980b883a 	mov	r5,r19
1000b2c4:	1023883a 	mov	r17,r2
1000b2c8:	000a67c0 	call	1000a67c <__mulsi3>
1000b2cc:	da000317 	ldw	r8,12(sp)
1000b2d0:	a80b883a 	mov	r5,r21
1000b2d4:	1039883a 	mov	fp,r2
1000b2d8:	4009883a 	mov	r4,r8
1000b2dc:	000a6740 	call	1000a674 <__umodsi3>
1000b2e0:	d8c00017 	ldw	r3,0(sp)
1000b2e4:	1004943a 	slli	r2,r2,16
1000b2e8:	1810d43a 	srli	r8,r3,16
1000b2ec:	120eb03a 	or	r7,r2,r8
1000b2f0:	3f00062e 	bgeu	r7,fp,1000b30c <__divdf3+0x3cc>
1000b2f4:	3dcf883a 	add	r7,r7,r23
1000b2f8:	88bfffc4 	addi	r2,r17,-1
1000b2fc:	3dc10a36 	bltu	r7,r23,1000b728 <__divdf3+0x7e8>
1000b300:	3f01092e 	bgeu	r7,fp,1000b728 <__divdf3+0x7e8>
1000b304:	8c7fff84 	addi	r17,r17,-2
1000b308:	3dcf883a 	add	r7,r7,r23
1000b30c:	3f39c83a 	sub	fp,r7,fp
1000b310:	e009883a 	mov	r4,fp
1000b314:	a80b883a 	mov	r5,r21
1000b318:	000a66c0 	call	1000a66c <__udivsi3>
1000b31c:	1009883a 	mov	r4,r2
1000b320:	980b883a 	mov	r5,r19
1000b324:	1021883a 	mov	r16,r2
1000b328:	000a67c0 	call	1000a67c <__mulsi3>
1000b32c:	e009883a 	mov	r4,fp
1000b330:	a80b883a 	mov	r5,r21
1000b334:	d8800315 	stw	r2,12(sp)
1000b338:	000a6740 	call	1000a674 <__umodsi3>
1000b33c:	d9000017 	ldw	r4,0(sp)
1000b340:	1004943a 	slli	r2,r2,16
1000b344:	da000317 	ldw	r8,12(sp)
1000b348:	20ffffcc 	andi	r3,r4,65535
1000b34c:	10ceb03a 	or	r7,r2,r3
1000b350:	3a00062e 	bgeu	r7,r8,1000b36c <__divdf3+0x42c>
1000b354:	3dcf883a 	add	r7,r7,r23
1000b358:	80bfffc4 	addi	r2,r16,-1
1000b35c:	3dc0f036 	bltu	r7,r23,1000b720 <__divdf3+0x7e0>
1000b360:	3a00ef2e 	bgeu	r7,r8,1000b720 <__divdf3+0x7e0>
1000b364:	843fff84 	addi	r16,r16,-2
1000b368:	3dcf883a 	add	r7,r7,r23
1000b36c:	d8c00117 	ldw	r3,4(sp)
1000b370:	8822943a 	slli	r17,r17,16
1000b374:	3a0fc83a 	sub	r7,r7,r8
1000b378:	1806d43a 	srli	r3,r3,16
1000b37c:	8462b03a 	or	r17,r16,r17
1000b380:	8affffcc 	andi	r11,r17,65535
1000b384:	d8c00015 	stw	r3,0(sp)
1000b388:	d8c00117 	ldw	r3,4(sp)
1000b38c:	8820d43a 	srli	r16,r17,16
1000b390:	5809883a 	mov	r4,r11
1000b394:	1f3fffcc 	andi	fp,r3,65535
1000b398:	e00b883a 	mov	r5,fp
1000b39c:	d9c00515 	stw	r7,20(sp)
1000b3a0:	dac00215 	stw	r11,8(sp)
1000b3a4:	000a67c0 	call	1000a67c <__mulsi3>
1000b3a8:	8009883a 	mov	r4,r16
1000b3ac:	e00b883a 	mov	r5,fp
1000b3b0:	d8800415 	stw	r2,16(sp)
1000b3b4:	000a67c0 	call	1000a67c <__mulsi3>
1000b3b8:	d9400017 	ldw	r5,0(sp)
1000b3bc:	8009883a 	mov	r4,r16
1000b3c0:	d8800315 	stw	r2,12(sp)
1000b3c4:	000a67c0 	call	1000a67c <__mulsi3>
1000b3c8:	dac00217 	ldw	r11,8(sp)
1000b3cc:	d9400017 	ldw	r5,0(sp)
1000b3d0:	d8800215 	stw	r2,8(sp)
1000b3d4:	5809883a 	mov	r4,r11
1000b3d8:	000a67c0 	call	1000a67c <__mulsi3>
1000b3dc:	da400417 	ldw	r9,16(sp)
1000b3e0:	da800317 	ldw	r10,12(sp)
1000b3e4:	d9c00517 	ldw	r7,20(sp)
1000b3e8:	480ad43a 	srli	r5,r9,16
1000b3ec:	5085883a 	add	r2,r10,r2
1000b3f0:	db000217 	ldw	r12,8(sp)
1000b3f4:	1151883a 	add	r8,r2,r5
1000b3f8:	4280022e 	bgeu	r8,r10,1000b404 <__divdf3+0x4c4>
1000b3fc:	00800074 	movhi	r2,1
1000b400:	6099883a 	add	r12,r12,r2
1000b404:	400ad43a 	srli	r5,r8,16
1000b408:	4010943a 	slli	r8,r8,16
1000b40c:	4c3fffcc 	andi	r16,r9,65535
1000b410:	6149883a 	add	r4,r12,r5
1000b414:	4411883a 	add	r8,r8,r16
1000b418:	3900a736 	bltu	r7,r4,1000b6b8 <__divdf3+0x778>
1000b41c:	3900c426 	beq	r7,r4,1000b730 <__divdf3+0x7f0>
1000b420:	3909c83a 	sub	r4,r7,r4
1000b424:	b221c83a 	sub	r16,r22,r8
1000b428:	b42d803a 	cmpltu	r22,r22,r16
1000b42c:	25adc83a 	sub	r22,r4,r22
1000b430:	b5c0c626 	beq	r22,r23,1000b74c <__divdf3+0x80c>
1000b434:	b009883a 	mov	r4,r22
1000b438:	a80b883a 	mov	r5,r21
1000b43c:	000a66c0 	call	1000a66c <__udivsi3>
1000b440:	1009883a 	mov	r4,r2
1000b444:	980b883a 	mov	r5,r19
1000b448:	d8800315 	stw	r2,12(sp)
1000b44c:	000a67c0 	call	1000a67c <__mulsi3>
1000b450:	a80b883a 	mov	r5,r21
1000b454:	b009883a 	mov	r4,r22
1000b458:	d8800415 	stw	r2,16(sp)
1000b45c:	000a6740 	call	1000a674 <__umodsi3>
1000b460:	1004943a 	slli	r2,r2,16
1000b464:	800ed43a 	srli	r7,r16,16
1000b468:	da400417 	ldw	r9,16(sp)
1000b46c:	da000317 	ldw	r8,12(sp)
1000b470:	11cab03a 	or	r5,r2,r7
1000b474:	2a40062e 	bgeu	r5,r9,1000b490 <__divdf3+0x550>
1000b478:	2dcb883a 	add	r5,r5,r23
1000b47c:	40bfffc4 	addi	r2,r8,-1
1000b480:	2dc0b436 	bltu	r5,r23,1000b754 <__divdf3+0x814>
1000b484:	2a40b32e 	bgeu	r5,r9,1000b754 <__divdf3+0x814>
1000b488:	423fff84 	addi	r8,r8,-2
1000b48c:	2dcb883a 	add	r5,r5,r23
1000b490:	2a6dc83a 	sub	r22,r5,r9
1000b494:	b009883a 	mov	r4,r22
1000b498:	a80b883a 	mov	r5,r21
1000b49c:	da000315 	stw	r8,12(sp)
1000b4a0:	000a66c0 	call	1000a66c <__udivsi3>
1000b4a4:	980b883a 	mov	r5,r19
1000b4a8:	1009883a 	mov	r4,r2
1000b4ac:	d8800415 	stw	r2,16(sp)
1000b4b0:	000a67c0 	call	1000a67c <__mulsi3>
1000b4b4:	b009883a 	mov	r4,r22
1000b4b8:	a80b883a 	mov	r5,r21
1000b4bc:	1027883a 	mov	r19,r2
1000b4c0:	000a6740 	call	1000a674 <__umodsi3>
1000b4c4:	1004943a 	slli	r2,r2,16
1000b4c8:	843fffcc 	andi	r16,r16,65535
1000b4cc:	da000317 	ldw	r8,12(sp)
1000b4d0:	140eb03a 	or	r7,r2,r16
1000b4d4:	da400417 	ldw	r9,16(sp)
1000b4d8:	3cc0062e 	bgeu	r7,r19,1000b4f4 <__divdf3+0x5b4>
1000b4dc:	3dcf883a 	add	r7,r7,r23
1000b4e0:	48bfffc4 	addi	r2,r9,-1
1000b4e4:	3dc09d36 	bltu	r7,r23,1000b75c <__divdf3+0x81c>
1000b4e8:	3cc09c2e 	bgeu	r7,r19,1000b75c <__divdf3+0x81c>
1000b4ec:	4a7fff84 	addi	r9,r9,-2
1000b4f0:	3dcf883a 	add	r7,r7,r23
1000b4f4:	4010943a 	slli	r8,r8,16
1000b4f8:	3cebc83a 	sub	r21,r7,r19
1000b4fc:	e00b883a 	mov	r5,fp
1000b500:	4a26b03a 	or	r19,r9,r8
1000b504:	99ffffcc 	andi	r7,r19,65535
1000b508:	9820d43a 	srli	r16,r19,16
1000b50c:	3809883a 	mov	r4,r7
1000b510:	d9c00515 	stw	r7,20(sp)
1000b514:	000a67c0 	call	1000a67c <__mulsi3>
1000b518:	8009883a 	mov	r4,r16
1000b51c:	e00b883a 	mov	r5,fp
1000b520:	102d883a 	mov	r22,r2
1000b524:	000a67c0 	call	1000a67c <__mulsi3>
1000b528:	d9400017 	ldw	r5,0(sp)
1000b52c:	8009883a 	mov	r4,r16
1000b530:	1039883a 	mov	fp,r2
1000b534:	000a67c0 	call	1000a67c <__mulsi3>
1000b538:	d9c00517 	ldw	r7,20(sp)
1000b53c:	d9400017 	ldw	r5,0(sp)
1000b540:	1021883a 	mov	r16,r2
1000b544:	3809883a 	mov	r4,r7
1000b548:	000a67c0 	call	1000a67c <__mulsi3>
1000b54c:	b008d43a 	srli	r4,r22,16
1000b550:	e085883a 	add	r2,fp,r2
1000b554:	1109883a 	add	r4,r2,r4
1000b558:	2700022e 	bgeu	r4,fp,1000b564 <__divdf3+0x624>
1000b55c:	00800074 	movhi	r2,1
1000b560:	80a1883a 	add	r16,r16,r2
1000b564:	200ad43a 	srli	r5,r4,16
1000b568:	2008943a 	slli	r4,r4,16
1000b56c:	b5bfffcc 	andi	r22,r22,65535
1000b570:	8145883a 	add	r2,r16,r5
1000b574:	2589883a 	add	r4,r4,r22
1000b578:	a8802c36 	bltu	r21,r2,1000b62c <__divdf3+0x6ec>
1000b57c:	a880a426 	beq	r21,r2,1000b810 <__divdf3+0x8d0>
1000b580:	9cc00054 	ori	r19,r19,1
1000b584:	9200ffc4 	addi	r8,r18,1023
1000b588:	023f270e 	bge	zero,r8,1000b228 <__divdf3+0x2e8>
1000b58c:	988001cc 	andi	r2,r19,7
1000b590:	10000726 	beq	r2,zero,1000b5b0 <__divdf3+0x670>
1000b594:	990003cc 	andi	r4,r19,15
1000b598:	00800104 	movi	r2,4
1000b59c:	20800426 	beq	r4,r2,1000b5b0 <__divdf3+0x670>
1000b5a0:	9885883a 	add	r2,r19,r2
1000b5a4:	14e7803a 	cmpltu	r19,r2,r19
1000b5a8:	8ce3883a 	add	r17,r17,r19
1000b5ac:	1027883a 	mov	r19,r2
1000b5b0:	8880402c 	andhi	r2,r17,256
1000b5b4:	10000426 	beq	r2,zero,1000b5c8 <__divdf3+0x688>
1000b5b8:	00bfc034 	movhi	r2,65280
1000b5bc:	10bfffc4 	addi	r2,r2,-1
1000b5c0:	92010004 	addi	r8,r18,1024
1000b5c4:	88a2703a 	and	r17,r17,r2
1000b5c8:	0081ff84 	movi	r2,2046
1000b5cc:	123eb616 	blt	r2,r8,1000b0a8 <__divdf3+0x168>
1000b5d0:	9826d0fa 	srli	r19,r19,3
1000b5d4:	8804977a 	slli	r2,r17,29
1000b5d8:	8820927a 	slli	r16,r17,9
1000b5dc:	4201ffcc 	andi	r8,r8,2047
1000b5e0:	14e6b03a 	or	r19,r2,r19
1000b5e4:	800ad33a 	srli	r5,r16,12
1000b5e8:	a180004c 	andi	r6,r20,1
1000b5ec:	003eb206 	br	1000b0b8 <__divdf3+0x178>
1000b5f0:	008000c4 	movi	r2,3
1000b5f4:	4080ac26 	beq	r8,r2,1000b8a8 <__divdf3+0x968>
1000b5f8:	00800044 	movi	r2,1
1000b5fc:	4080591e 	bne	r8,r2,1000b764 <__divdf3+0x824>
1000b600:	e00d883a 	mov	r6,fp
1000b604:	0011883a 	mov	r8,zero
1000b608:	000b883a 	mov	r5,zero
1000b60c:	0027883a 	mov	r19,zero
1000b610:	003ea906 	br	1000b0b8 <__divdf3+0x178>
1000b614:	00800434 	movhi	r2,16
1000b618:	89400234 	orhi	r5,r17,8
1000b61c:	10bfffc4 	addi	r2,r2,-1
1000b620:	b00d883a 	mov	r6,r22
1000b624:	288a703a 	and	r5,r5,r2
1000b628:	003efd06 	br	1000b220 <__divdf3+0x2e0>
1000b62c:	adcf883a 	add	r7,r21,r23
1000b630:	997fffc4 	addi	r5,r19,-1
1000b634:	3dc0412e 	bgeu	r7,r23,1000b73c <__divdf3+0x7fc>
1000b638:	2827883a 	mov	r19,r5
1000b63c:	38bfd01e 	bne	r7,r2,1000b580 <__divdf3+0x640>
1000b640:	d8c00117 	ldw	r3,4(sp)
1000b644:	193fce1e 	bne	r3,r4,1000b580 <__divdf3+0x640>
1000b648:	003fce06 	br	1000b584 <__divdf3+0x644>
1000b64c:	d9800215 	stw	r6,8(sp)
1000b650:	d9c00515 	stw	r7,20(sp)
1000b654:	000ce3c0 	call	1000ce3c <__clzsi2>
1000b658:	10c00804 	addi	r3,r2,32
1000b65c:	010009c4 	movi	r4,39
1000b660:	d9800217 	ldw	r6,8(sp)
1000b664:	d9c00517 	ldw	r7,20(sp)
1000b668:	20feb20e 	bge	r4,r3,1000b134 <__divdf3+0x1f4>
1000b66c:	117ffe04 	addi	r5,r2,-8
1000b670:	a162983a 	sll	r17,r20,r5
1000b674:	0027883a 	mov	r19,zero
1000b678:	003eb506 	br	1000b150 <__divdf3+0x210>
1000b67c:	3009883a 	mov	r4,r6
1000b680:	d9800215 	stw	r6,8(sp)
1000b684:	da000315 	stw	r8,12(sp)
1000b688:	da400415 	stw	r9,16(sp)
1000b68c:	000ce3c0 	call	1000ce3c <__clzsi2>
1000b690:	10c00804 	addi	r3,r2,32
1000b694:	010009c4 	movi	r4,39
1000b698:	d9800217 	ldw	r6,8(sp)
1000b69c:	da000317 	ldw	r8,12(sp)
1000b6a0:	da400417 	ldw	r9,16(sp)
1000b6a4:	20fec10e 	bge	r4,r3,1000b1ac <__divdf3+0x26c>
1000b6a8:	10bffe04 	addi	r2,r2,-8
1000b6ac:	a8a0983a 	sll	r16,r21,r2
1000b6b0:	002b883a 	mov	r21,zero
1000b6b4:	003ec406 	br	1000b1c8 <__divdf3+0x288>
1000b6b8:	d8c00117 	ldw	r3,4(sp)
1000b6bc:	b0ed883a 	add	r22,r22,r3
1000b6c0:	b0c5803a 	cmpltu	r2,r22,r3
1000b6c4:	15c5883a 	add	r2,r2,r23
1000b6c8:	11cf883a 	add	r7,r2,r7
1000b6cc:	88bfffc4 	addi	r2,r17,-1
1000b6d0:	b9c00d2e 	bgeu	r23,r7,1000b708 <__divdf3+0x7c8>
1000b6d4:	39003f36 	bltu	r7,r4,1000b7d4 <__divdf3+0x894>
1000b6d8:	21c06a26 	beq	r4,r7,1000b884 <__divdf3+0x944>
1000b6dc:	3909c83a 	sub	r4,r7,r4
1000b6e0:	1023883a 	mov	r17,r2
1000b6e4:	003f4f06 	br	1000b424 <__divdf3+0x4e4>
1000b6e8:	9d7ee536 	bltu	r19,r21,1000b280 <__divdf3+0x340>
1000b6ec:	982ed07a 	srli	r23,r19,1
1000b6f0:	880497fa 	slli	r2,r17,31
1000b6f4:	8810d07a 	srli	r8,r17,1
1000b6f8:	982c97fa 	slli	r22,r19,31
1000b6fc:	b884b03a 	or	r2,r23,r2
1000b700:	d8800015 	stw	r2,0(sp)
1000b704:	003ee206 	br	1000b290 <__divdf3+0x350>
1000b708:	3dfff41e 	bne	r7,r23,1000b6dc <__divdf3+0x79c>
1000b70c:	d8c00117 	ldw	r3,4(sp)
1000b710:	b0fff02e 	bgeu	r22,r3,1000b6d4 <__divdf3+0x794>
1000b714:	b909c83a 	sub	r4,r23,r4
1000b718:	1023883a 	mov	r17,r2
1000b71c:	003f4106 	br	1000b424 <__divdf3+0x4e4>
1000b720:	1021883a 	mov	r16,r2
1000b724:	003f1106 	br	1000b36c <__divdf3+0x42c>
1000b728:	1023883a 	mov	r17,r2
1000b72c:	003ef706 	br	1000b30c <__divdf3+0x3cc>
1000b730:	b23fe136 	bltu	r22,r8,1000b6b8 <__divdf3+0x778>
1000b734:	0009883a 	mov	r4,zero
1000b738:	003f3a06 	br	1000b424 <__divdf3+0x4e4>
1000b73c:	38802c36 	bltu	r7,r2,1000b7f0 <__divdf3+0x8b0>
1000b740:	11c05326 	beq	r2,r7,1000b890 <__divdf3+0x950>
1000b744:	2827883a 	mov	r19,r5
1000b748:	003f8d06 	br	1000b580 <__divdf3+0x640>
1000b74c:	04ffffc4 	movi	r19,-1
1000b750:	003f8c06 	br	1000b584 <__divdf3+0x644>
1000b754:	1011883a 	mov	r8,r2
1000b758:	003f4d06 	br	1000b490 <__divdf3+0x550>
1000b75c:	1013883a 	mov	r9,r2
1000b760:	003f6406 	br	1000b4f4 <__divdf3+0x5b4>
1000b764:	e029883a 	mov	r20,fp
1000b768:	003f8606 	br	1000b584 <__divdf3+0x644>
1000b76c:	008007c4 	movi	r2,31
1000b770:	14002a16 	blt	r2,r16,1000b81c <__divdf3+0x8dc>
1000b774:	91410784 	addi	r5,r18,1054
1000b778:	9c0cd83a 	srl	r6,r19,r16
1000b77c:	8948983a 	sll	r4,r17,r5
1000b780:	9944983a 	sll	r2,r19,r5
1000b784:	8c20d83a 	srl	r16,r17,r16
1000b788:	3108b03a 	or	r4,r6,r4
1000b78c:	1004c03a 	cmpne	r2,r2,zero
1000b790:	2084b03a 	or	r2,r4,r2
1000b794:	110001cc 	andi	r4,r2,7
1000b798:	20000726 	beq	r4,zero,1000b7b8 <__divdf3+0x878>
1000b79c:	114003cc 	andi	r5,r2,15
1000b7a0:	01000104 	movi	r4,4
1000b7a4:	29000426 	beq	r5,r4,1000b7b8 <__divdf3+0x878>
1000b7a8:	11000104 	addi	r4,r2,4
1000b7ac:	2085803a 	cmpltu	r2,r4,r2
1000b7b0:	80a1883a 	add	r16,r16,r2
1000b7b4:	2005883a 	mov	r2,r4
1000b7b8:	8100202c 	andhi	r4,r16,128
1000b7bc:	20002d26 	beq	r4,zero,1000b874 <__divdf3+0x934>
1000b7c0:	a180004c 	andi	r6,r20,1
1000b7c4:	02000044 	movi	r8,1
1000b7c8:	000b883a 	mov	r5,zero
1000b7cc:	0027883a 	mov	r19,zero
1000b7d0:	003e3906 	br	1000b0b8 <__divdf3+0x178>
1000b7d4:	d8c00117 	ldw	r3,4(sp)
1000b7d8:	8c7fff84 	addi	r17,r17,-2
1000b7dc:	b0ed883a 	add	r22,r22,r3
1000b7e0:	b0c5803a 	cmpltu	r2,r22,r3
1000b7e4:	15c5883a 	add	r2,r2,r23
1000b7e8:	11cf883a 	add	r7,r2,r7
1000b7ec:	003f0c06 	br	1000b420 <__divdf3+0x4e0>
1000b7f0:	d8c00117 	ldw	r3,4(sp)
1000b7f4:	997fff84 	addi	r5,r19,-2
1000b7f8:	18d1883a 	add	r8,r3,r3
1000b7fc:	40c7803a 	cmpltu	r3,r8,r3
1000b800:	1dcd883a 	add	r6,r3,r23
1000b804:	398f883a 	add	r7,r7,r6
1000b808:	da000115 	stw	r8,4(sp)
1000b80c:	003f8a06 	br	1000b638 <__divdf3+0x6f8>
1000b810:	203f861e 	bne	r4,zero,1000b62c <__divdf3+0x6ec>
1000b814:	d8000115 	stw	zero,4(sp)
1000b818:	003f8906 	br	1000b640 <__divdf3+0x700>
1000b81c:	00bef884 	movi	r2,-1054
1000b820:	1485c83a 	sub	r2,r2,r18
1000b824:	01000804 	movi	r4,32
1000b828:	8884d83a 	srl	r2,r17,r2
1000b82c:	81001c26 	beq	r16,r4,1000b8a0 <__divdf3+0x960>
1000b830:	91010f84 	addi	r4,r18,1086
1000b834:	8908983a 	sll	r4,r17,r4
1000b838:	24c8b03a 	or	r4,r4,r19
1000b83c:	2008c03a 	cmpne	r4,r4,zero
1000b840:	2084b03a 	or	r2,r4,r2
1000b844:	140001cc 	andi	r16,r2,7
1000b848:	8000061e 	bne	r16,zero,1000b864 <__divdf3+0x924>
1000b84c:	000b883a 	mov	r5,zero
1000b850:	1004d0fa 	srli	r2,r2,3
1000b854:	a180004c 	andi	r6,r20,1
1000b858:	0011883a 	mov	r8,zero
1000b85c:	1426b03a 	or	r19,r2,r16
1000b860:	003e1506 	br	1000b0b8 <__divdf3+0x178>
1000b864:	114003cc 	andi	r5,r2,15
1000b868:	01000104 	movi	r4,4
1000b86c:	0021883a 	mov	r16,zero
1000b870:	293fcd1e 	bne	r5,r4,1000b7a8 <__divdf3+0x868>
1000b874:	800a927a 	slli	r5,r16,9
1000b878:	8020977a 	slli	r16,r16,29
1000b87c:	280ad33a 	srli	r5,r5,12
1000b880:	003ff306 	br	1000b850 <__divdf3+0x910>
1000b884:	b23fd336 	bltu	r22,r8,1000b7d4 <__divdf3+0x894>
1000b888:	1023883a 	mov	r17,r2
1000b88c:	003fa906 	br	1000b734 <__divdf3+0x7f4>
1000b890:	d8c00117 	ldw	r3,4(sp)
1000b894:	193fd636 	bltu	r3,r4,1000b7f0 <__divdf3+0x8b0>
1000b898:	2827883a 	mov	r19,r5
1000b89c:	003f6806 	br	1000b640 <__divdf3+0x700>
1000b8a0:	0009883a 	mov	r4,zero
1000b8a4:	003fe406 	br	1000b838 <__divdf3+0x8f8>
1000b8a8:	00800434 	movhi	r2,16
1000b8ac:	89400234 	orhi	r5,r17,8
1000b8b0:	10bfffc4 	addi	r2,r2,-1
1000b8b4:	e00d883a 	mov	r6,fp
1000b8b8:	288a703a 	and	r5,r5,r2
1000b8bc:	003e5806 	br	1000b220 <__divdf3+0x2e0>

1000b8c0 <__eqdf2>:
1000b8c0:	2804d53a 	srli	r2,r5,20
1000b8c4:	3806d53a 	srli	r3,r7,20
1000b8c8:	02000434 	movhi	r8,16
1000b8cc:	423fffc4 	addi	r8,r8,-1
1000b8d0:	1081ffcc 	andi	r2,r2,2047
1000b8d4:	0241ffc4 	movi	r9,2047
1000b8d8:	2a14703a 	and	r10,r5,r8
1000b8dc:	18c1ffcc 	andi	r3,r3,2047
1000b8e0:	3a10703a 	and	r8,r7,r8
1000b8e4:	280ad7fa 	srli	r5,r5,31
1000b8e8:	380ed7fa 	srli	r7,r7,31
1000b8ec:	12400f26 	beq	r2,r9,1000b92c <__eqdf2+0x6c>
1000b8f0:	0241ffc4 	movi	r9,2047
1000b8f4:	1a400326 	beq	r3,r9,1000b904 <__eqdf2+0x44>
1000b8f8:	10c00526 	beq	r2,r3,1000b910 <__eqdf2+0x50>
1000b8fc:	00800044 	movi	r2,1
1000b900:	f800283a 	ret
1000b904:	4192b03a 	or	r9,r8,r6
1000b908:	483ffc1e 	bne	r9,zero,1000b8fc <__eqdf2+0x3c>
1000b90c:	10fffb1e 	bne	r2,r3,1000b8fc <__eqdf2+0x3c>
1000b910:	523ffa1e 	bne	r10,r8,1000b8fc <__eqdf2+0x3c>
1000b914:	21bff91e 	bne	r4,r6,1000b8fc <__eqdf2+0x3c>
1000b918:	29c00826 	beq	r5,r7,1000b93c <__eqdf2+0x7c>
1000b91c:	103ff71e 	bne	r2,zero,1000b8fc <__eqdf2+0x3c>
1000b920:	5104b03a 	or	r2,r10,r4
1000b924:	1004c03a 	cmpne	r2,r2,zero
1000b928:	f800283a 	ret
1000b92c:	5112b03a 	or	r9,r10,r4
1000b930:	483fef26 	beq	r9,zero,1000b8f0 <__eqdf2+0x30>
1000b934:	00800044 	movi	r2,1
1000b938:	f800283a 	ret
1000b93c:	0005883a 	mov	r2,zero
1000b940:	f800283a 	ret

1000b944 <__gedf2>:
1000b944:	2804d53a 	srli	r2,r5,20
1000b948:	3806d53a 	srli	r3,r7,20
1000b94c:	02000434 	movhi	r8,16
1000b950:	423fffc4 	addi	r8,r8,-1
1000b954:	0241ffc4 	movi	r9,2047
1000b958:	1081ffcc 	andi	r2,r2,2047
1000b95c:	2a14703a 	and	r10,r5,r8
1000b960:	1a46703a 	and	r3,r3,r9
1000b964:	3a10703a 	and	r8,r7,r8
1000b968:	280ad7fa 	srli	r5,r5,31
1000b96c:	380ed7fa 	srli	r7,r7,31
1000b970:	12400b26 	beq	r2,r9,1000b9a0 <__gedf2+0x5c>
1000b974:	1a401626 	beq	r3,r9,1000b9d0 <__gedf2+0x8c>
1000b978:	10000c1e 	bne	r2,zero,1000b9ac <__gedf2+0x68>
1000b97c:	5112b03a 	or	r9,r10,r4
1000b980:	4813003a 	cmpeq	r9,r9,zero
1000b984:	4817883a 	mov	r11,r9
1000b988:	18000c1e 	bne	r3,zero,1000b9bc <__gedf2+0x78>
1000b98c:	4198b03a 	or	r12,r8,r6
1000b990:	60000a1e 	bne	r12,zero,1000b9bc <__gedf2+0x78>
1000b994:	48001326 	beq	r9,zero,1000b9e4 <__gedf2+0xa0>
1000b998:	0005883a 	mov	r2,zero
1000b99c:	f800283a 	ret
1000b9a0:	5112b03a 	or	r9,r10,r4
1000b9a4:	4800191e 	bne	r9,zero,1000ba0c <__gedf2+0xc8>
1000b9a8:	18800926 	beq	r3,r2,1000b9d0 <__gedf2+0x8c>
1000b9ac:	18000b1e 	bne	r3,zero,1000b9dc <__gedf2+0x98>
1000b9b0:	4192b03a 	or	r9,r8,r6
1000b9b4:	0017883a 	mov	r11,zero
1000b9b8:	48000a26 	beq	r9,zero,1000b9e4 <__gedf2+0xa0>
1000b9bc:	39c03fcc 	andi	r7,r7,255
1000b9c0:	58000726 	beq	r11,zero,1000b9e0 <__gedf2+0x9c>
1000b9c4:	3800081e 	bne	r7,zero,1000b9e8 <__gedf2+0xa4>
1000b9c8:	00bfffc4 	movi	r2,-1
1000b9cc:	f800283a 	ret
1000b9d0:	4192b03a 	or	r9,r8,r6
1000b9d4:	48000d1e 	bne	r9,zero,1000ba0c <__gedf2+0xc8>
1000b9d8:	103fe826 	beq	r2,zero,1000b97c <__gedf2+0x38>
1000b9dc:	39c03fcc 	andi	r7,r7,255
1000b9e0:	29c00326 	beq	r5,r7,1000b9f0 <__gedf2+0xac>
1000b9e4:	283ff81e 	bne	r5,zero,1000b9c8 <__gedf2+0x84>
1000b9e8:	00800044 	movi	r2,1
1000b9ec:	f800283a 	ret
1000b9f0:	18bffc16 	blt	r3,r2,1000b9e4 <__gedf2+0xa0>
1000b9f4:	10c00316 	blt	r2,r3,1000ba04 <__gedf2+0xc0>
1000b9f8:	42bffa36 	bltu	r8,r10,1000b9e4 <__gedf2+0xa0>
1000b9fc:	52000526 	beq	r10,r8,1000ba14 <__gedf2+0xd0>
1000ba00:	523fe52e 	bgeu	r10,r8,1000b998 <__gedf2+0x54>
1000ba04:	283ff026 	beq	r5,zero,1000b9c8 <__gedf2+0x84>
1000ba08:	003ff706 	br	1000b9e8 <__gedf2+0xa4>
1000ba0c:	00bfff84 	movi	r2,-2
1000ba10:	f800283a 	ret
1000ba14:	313ff336 	bltu	r6,r4,1000b9e4 <__gedf2+0xa0>
1000ba18:	21bfdf2e 	bgeu	r4,r6,1000b998 <__gedf2+0x54>
1000ba1c:	283fea26 	beq	r5,zero,1000b9c8 <__gedf2+0x84>
1000ba20:	003ff106 	br	1000b9e8 <__gedf2+0xa4>

1000ba24 <__ledf2>:
1000ba24:	2804d53a 	srli	r2,r5,20
1000ba28:	3810d53a 	srli	r8,r7,20
1000ba2c:	00c00434 	movhi	r3,16
1000ba30:	18ffffc4 	addi	r3,r3,-1
1000ba34:	0241ffc4 	movi	r9,2047
1000ba38:	1081ffcc 	andi	r2,r2,2047
1000ba3c:	28d4703a 	and	r10,r5,r3
1000ba40:	4250703a 	and	r8,r8,r9
1000ba44:	38c6703a 	and	r3,r7,r3
1000ba48:	280ad7fa 	srli	r5,r5,31
1000ba4c:	380ed7fa 	srli	r7,r7,31
1000ba50:	12400b26 	beq	r2,r9,1000ba80 <__ledf2+0x5c>
1000ba54:	42401926 	beq	r8,r9,1000babc <__ledf2+0x98>
1000ba58:	10000c1e 	bne	r2,zero,1000ba8c <__ledf2+0x68>
1000ba5c:	5112b03a 	or	r9,r10,r4
1000ba60:	4813003a 	cmpeq	r9,r9,zero
1000ba64:	4817883a 	mov	r11,r9
1000ba68:	40000f26 	beq	r8,zero,1000baa8 <__ledf2+0x84>
1000ba6c:	39c03fcc 	andi	r7,r7,255
1000ba70:	58001826 	beq	r11,zero,1000bad4 <__ledf2+0xb0>
1000ba74:	38000a1e 	bne	r7,zero,1000baa0 <__ledf2+0x7c>
1000ba78:	00bfffc4 	movi	r2,-1
1000ba7c:	f800283a 	ret
1000ba80:	5112b03a 	or	r9,r10,r4
1000ba84:	48000f1e 	bne	r9,zero,1000bac4 <__ledf2+0xa0>
1000ba88:	40800c26 	beq	r8,r2,1000babc <__ledf2+0x98>
1000ba8c:	4000101e 	bne	r8,zero,1000bad0 <__ledf2+0xac>
1000ba90:	1992b03a 	or	r9,r3,r6
1000ba94:	0017883a 	mov	r11,zero
1000ba98:	483ff41e 	bne	r9,zero,1000ba6c <__ledf2+0x48>
1000ba9c:	283ff61e 	bne	r5,zero,1000ba78 <__ledf2+0x54>
1000baa0:	00800044 	movi	r2,1
1000baa4:	f800283a 	ret
1000baa8:	1998b03a 	or	r12,r3,r6
1000baac:	603fef1e 	bne	r12,zero,1000ba6c <__ledf2+0x48>
1000bab0:	483ffa26 	beq	r9,zero,1000ba9c <__ledf2+0x78>
1000bab4:	0005883a 	mov	r2,zero
1000bab8:	f800283a 	ret
1000babc:	1992b03a 	or	r9,r3,r6
1000bac0:	48000226 	beq	r9,zero,1000bacc <__ledf2+0xa8>
1000bac4:	00800084 	movi	r2,2
1000bac8:	f800283a 	ret
1000bacc:	103fe326 	beq	r2,zero,1000ba5c <__ledf2+0x38>
1000bad0:	39c03fcc 	andi	r7,r7,255
1000bad4:	29fff11e 	bne	r5,r7,1000ba9c <__ledf2+0x78>
1000bad8:	40bff016 	blt	r8,r2,1000ba9c <__ledf2+0x78>
1000badc:	12000316 	blt	r2,r8,1000baec <__ledf2+0xc8>
1000bae0:	1abfee36 	bltu	r3,r10,1000ba9c <__ledf2+0x78>
1000bae4:	50c00326 	beq	r10,r3,1000baf4 <__ledf2+0xd0>
1000bae8:	50fff22e 	bgeu	r10,r3,1000bab4 <__ledf2+0x90>
1000baec:	283fe226 	beq	r5,zero,1000ba78 <__ledf2+0x54>
1000baf0:	003feb06 	br	1000baa0 <__ledf2+0x7c>
1000baf4:	313fe936 	bltu	r6,r4,1000ba9c <__ledf2+0x78>
1000baf8:	21bfee2e 	bgeu	r4,r6,1000bab4 <__ledf2+0x90>
1000bafc:	283fde26 	beq	r5,zero,1000ba78 <__ledf2+0x54>
1000bb00:	003fe706 	br	1000baa0 <__ledf2+0x7c>

1000bb04 <__muldf3>:
1000bb04:	deffee04 	addi	sp,sp,-72
1000bb08:	dd000c15 	stw	r20,48(sp)
1000bb0c:	2828d53a 	srli	r20,r5,20
1000bb10:	dd400d15 	stw	r21,52(sp)
1000bb14:	282ad7fa 	srli	r21,r5,31
1000bb18:	dc000815 	stw	r16,32(sp)
1000bb1c:	04000434 	movhi	r16,16
1000bb20:	ddc00f15 	stw	r23,60(sp)
1000bb24:	dcc00b15 	stw	r19,44(sp)
1000bb28:	dc800a15 	stw	r18,40(sp)
1000bb2c:	843fffc4 	addi	r16,r16,-1
1000bb30:	dfc01115 	stw	ra,68(sp)
1000bb34:	df001015 	stw	fp,64(sp)
1000bb38:	dd800e15 	stw	r22,56(sp)
1000bb3c:	dc400915 	stw	r17,36(sp)
1000bb40:	a501ffcc 	andi	r20,r20,2047
1000bb44:	2025883a 	mov	r18,r4
1000bb48:	202f883a 	mov	r23,r4
1000bb4c:	2c20703a 	and	r16,r5,r16
1000bb50:	a827883a 	mov	r19,r21
1000bb54:	aa403fcc 	andi	r9,r21,255
1000bb58:	a0005926 	beq	r20,zero,1000bcc0 <__muldf3+0x1bc>
1000bb5c:	0081ffc4 	movi	r2,2047
1000bb60:	a0803426 	beq	r20,r2,1000bc34 <__muldf3+0x130>
1000bb64:	84000434 	orhi	r16,r16,16
1000bb68:	2004d77a 	srli	r2,r4,29
1000bb6c:	802090fa 	slli	r16,r16,3
1000bb70:	202e90fa 	slli	r23,r4,3
1000bb74:	a53f0044 	addi	r20,r20,-1023
1000bb78:	80a0b03a 	or	r16,r16,r2
1000bb7c:	000b883a 	mov	r5,zero
1000bb80:	0039883a 	mov	fp,zero
1000bb84:	3806d53a 	srli	r3,r7,20
1000bb88:	382cd7fa 	srli	r22,r7,31
1000bb8c:	00800434 	movhi	r2,16
1000bb90:	10bfffc4 	addi	r2,r2,-1
1000bb94:	18c1ffcc 	andi	r3,r3,2047
1000bb98:	3025883a 	mov	r18,r6
1000bb9c:	38a2703a 	and	r17,r7,r2
1000bba0:	b2803fcc 	andi	r10,r22,255
1000bba4:	18006426 	beq	r3,zero,1000bd38 <__muldf3+0x234>
1000bba8:	0081ffc4 	movi	r2,2047
1000bbac:	18805c26 	beq	r3,r2,1000bd20 <__muldf3+0x21c>
1000bbb0:	8c400434 	orhi	r17,r17,16
1000bbb4:	3004d77a 	srli	r2,r6,29
1000bbb8:	882290fa 	slli	r17,r17,3
1000bbbc:	302490fa 	slli	r18,r6,3
1000bbc0:	18ff0044 	addi	r3,r3,-1023
1000bbc4:	88a2b03a 	or	r17,r17,r2
1000bbc8:	000f883a 	mov	r7,zero
1000bbcc:	394ab03a 	or	r5,r7,r5
1000bbd0:	280a90ba 	slli	r5,r5,2
1000bbd4:	00840074 	movhi	r2,4097
1000bbd8:	10aefd04 	addi	r2,r2,-17420
1000bbdc:	288b883a 	add	r5,r5,r2
1000bbe0:	28800017 	ldw	r2,0(r5)
1000bbe4:	a0c7883a 	add	r3,r20,r3
1000bbe8:	b54cf03a 	xor	r6,r22,r21
1000bbec:	1a000044 	addi	r8,r3,1
1000bbf0:	1000683a 	jmp	r2
1000bbf4:	1000be38 	rdprs	zero,r2,760
1000bbf8:	1000be24 	muli	zero,r2,760
1000bbfc:	1000be24 	muli	zero,r2,760
1000bc00:	1000be10 	cmplti	zero,r2,760
1000bc04:	1000bc50 	cmplti	zero,r2,753
1000bc08:	1000bc50 	cmplti	zero,r2,753
1000bc0c:	1000bdf8 	rdprs	zero,r2,759
1000bc10:	1000be10 	cmplti	zero,r2,760
1000bc14:	1000bc50 	cmplti	zero,r2,753
1000bc18:	1000bdf8 	rdprs	zero,r2,759
1000bc1c:	1000bc50 	cmplti	zero,r2,753
1000bc20:	1000be10 	cmplti	zero,r2,760
1000bc24:	1000bc54 	ori	zero,r2,753
1000bc28:	1000bc54 	ori	zero,r2,753
1000bc2c:	1000bc54 	ori	zero,r2,753
1000bc30:	1000c174 	orhi	zero,r2,773
1000bc34:	8104b03a 	or	r2,r16,r4
1000bc38:	10006c1e 	bne	r2,zero,1000bdec <__muldf3+0x2e8>
1000bc3c:	01400204 	movi	r5,8
1000bc40:	0021883a 	mov	r16,zero
1000bc44:	002f883a 	mov	r23,zero
1000bc48:	07000084 	movi	fp,2
1000bc4c:	003fcd06 	br	1000bb84 <__muldf3+0x80>
1000bc50:	3013883a 	mov	r9,r6
1000bc54:	00800084 	movi	r2,2
1000bc58:	e080501e 	bne	fp,r2,1000bd9c <__muldf3+0x298>
1000bc5c:	4cc0004c 	andi	r19,r9,1
1000bc60:	0101ffc4 	movi	r4,2047
1000bc64:	0021883a 	mov	r16,zero
1000bc68:	002f883a 	mov	r23,zero
1000bc6c:	2008953a 	slli	r4,r4,20
1000bc70:	98c03fcc 	andi	r3,r19,255
1000bc74:	04400434 	movhi	r17,16
1000bc78:	8c7fffc4 	addi	r17,r17,-1
1000bc7c:	180697fa 	slli	r3,r3,31
1000bc80:	8460703a 	and	r16,r16,r17
1000bc84:	8120b03a 	or	r16,r16,r4
1000bc88:	80c6b03a 	or	r3,r16,r3
1000bc8c:	b805883a 	mov	r2,r23
1000bc90:	dfc01117 	ldw	ra,68(sp)
1000bc94:	df001017 	ldw	fp,64(sp)
1000bc98:	ddc00f17 	ldw	r23,60(sp)
1000bc9c:	dd800e17 	ldw	r22,56(sp)
1000bca0:	dd400d17 	ldw	r21,52(sp)
1000bca4:	dd000c17 	ldw	r20,48(sp)
1000bca8:	dcc00b17 	ldw	r19,44(sp)
1000bcac:	dc800a17 	ldw	r18,40(sp)
1000bcb0:	dc400917 	ldw	r17,36(sp)
1000bcb4:	dc000817 	ldw	r16,32(sp)
1000bcb8:	dec01204 	addi	sp,sp,72
1000bcbc:	f800283a 	ret
1000bcc0:	8104b03a 	or	r2,r16,r4
1000bcc4:	10004426 	beq	r2,zero,1000bdd8 <__muldf3+0x2d4>
1000bcc8:	80014b26 	beq	r16,zero,1000c1f8 <__muldf3+0x6f4>
1000bccc:	8009883a 	mov	r4,r16
1000bcd0:	d9800715 	stw	r6,28(sp)
1000bcd4:	d9c00215 	stw	r7,8(sp)
1000bcd8:	da400415 	stw	r9,16(sp)
1000bcdc:	000ce3c0 	call	1000ce3c <__clzsi2>
1000bce0:	d9800717 	ldw	r6,28(sp)
1000bce4:	d9c00217 	ldw	r7,8(sp)
1000bce8:	da400417 	ldw	r9,16(sp)
1000bcec:	1007883a 	mov	r3,r2
1000bcf0:	01000a04 	movi	r4,40
1000bcf4:	1dfffe04 	addi	r23,r3,-8
1000bcf8:	20c9c83a 	sub	r4,r4,r3
1000bcfc:	85e0983a 	sll	r16,r16,r23
1000bd00:	9108d83a 	srl	r4,r18,r4
1000bd04:	95ee983a 	sll	r23,r18,r23
1000bd08:	2420b03a 	or	r16,r4,r16
1000bd0c:	053f0344 	movi	r20,-1011
1000bd10:	a0e9c83a 	sub	r20,r20,r3
1000bd14:	000b883a 	mov	r5,zero
1000bd18:	0039883a 	mov	fp,zero
1000bd1c:	003f9906 	br	1000bb84 <__muldf3+0x80>
1000bd20:	8984b03a 	or	r2,r17,r6
1000bd24:	10002a1e 	bne	r2,zero,1000bdd0 <__muldf3+0x2cc>
1000bd28:	0023883a 	mov	r17,zero
1000bd2c:	0025883a 	mov	r18,zero
1000bd30:	01c00084 	movi	r7,2
1000bd34:	003fa506 	br	1000bbcc <__muldf3+0xc8>
1000bd38:	8984b03a 	or	r2,r17,r6
1000bd3c:	10002026 	beq	r2,zero,1000bdc0 <__muldf3+0x2bc>
1000bd40:	88011c26 	beq	r17,zero,1000c1b4 <__muldf3+0x6b0>
1000bd44:	8809883a 	mov	r4,r17
1000bd48:	d9400215 	stw	r5,8(sp)
1000bd4c:	d9800715 	stw	r6,28(sp)
1000bd50:	da400415 	stw	r9,16(sp)
1000bd54:	da800315 	stw	r10,12(sp)
1000bd58:	000ce3c0 	call	1000ce3c <__clzsi2>
1000bd5c:	d9400217 	ldw	r5,8(sp)
1000bd60:	d9800717 	ldw	r6,28(sp)
1000bd64:	da400417 	ldw	r9,16(sp)
1000bd68:	da800317 	ldw	r10,12(sp)
1000bd6c:	1007883a 	mov	r3,r2
1000bd70:	01000a04 	movi	r4,40
1000bd74:	1cbffe04 	addi	r18,r3,-8
1000bd78:	20c9c83a 	sub	r4,r4,r3
1000bd7c:	8ca2983a 	sll	r17,r17,r18
1000bd80:	3108d83a 	srl	r4,r6,r4
1000bd84:	34a4983a 	sll	r18,r6,r18
1000bd88:	2462b03a 	or	r17,r4,r17
1000bd8c:	00bf0344 	movi	r2,-1011
1000bd90:	10c7c83a 	sub	r3,r2,r3
1000bd94:	000f883a 	mov	r7,zero
1000bd98:	003f8c06 	br	1000bbcc <__muldf3+0xc8>
1000bd9c:	008000c4 	movi	r2,3
1000bda0:	e0816d26 	beq	fp,r2,1000c358 <__muldf3+0x854>
1000bda4:	00800044 	movi	r2,1
1000bda8:	e081321e 	bne	fp,r2,1000c274 <__muldf3+0x770>
1000bdac:	48a6703a 	and	r19,r9,r2
1000bdb0:	0009883a 	mov	r4,zero
1000bdb4:	0021883a 	mov	r16,zero
1000bdb8:	002f883a 	mov	r23,zero
1000bdbc:	003fab06 	br	1000bc6c <__muldf3+0x168>
1000bdc0:	0023883a 	mov	r17,zero
1000bdc4:	0025883a 	mov	r18,zero
1000bdc8:	01c00044 	movi	r7,1
1000bdcc:	003f7f06 	br	1000bbcc <__muldf3+0xc8>
1000bdd0:	01c000c4 	movi	r7,3
1000bdd4:	003f7d06 	br	1000bbcc <__muldf3+0xc8>
1000bdd8:	01400104 	movi	r5,4
1000bddc:	0021883a 	mov	r16,zero
1000bde0:	002f883a 	mov	r23,zero
1000bde4:	07000044 	movi	fp,1
1000bde8:	003f6606 	br	1000bb84 <__muldf3+0x80>
1000bdec:	01400304 	movi	r5,12
1000bdf0:	070000c4 	movi	fp,3
1000bdf4:	003f6306 	br	1000bb84 <__muldf3+0x80>
1000bdf8:	04000434 	movhi	r16,16
1000bdfc:	0027883a 	mov	r19,zero
1000be00:	843fffc4 	addi	r16,r16,-1
1000be04:	05ffffc4 	movi	r23,-1
1000be08:	0101ffc4 	movi	r4,2047
1000be0c:	003f9706 	br	1000bc6c <__muldf3+0x168>
1000be10:	8821883a 	mov	r16,r17
1000be14:	902f883a 	mov	r23,r18
1000be18:	5013883a 	mov	r9,r10
1000be1c:	3839883a 	mov	fp,r7
1000be20:	003f8c06 	br	1000bc54 <__muldf3+0x150>
1000be24:	8821883a 	mov	r16,r17
1000be28:	902f883a 	mov	r23,r18
1000be2c:	3013883a 	mov	r9,r6
1000be30:	3839883a 	mov	fp,r7
1000be34:	003f8706 	br	1000bc54 <__muldf3+0x150>
1000be38:	b82ad43a 	srli	r21,r23,16
1000be3c:	9038d43a 	srli	fp,r18,16
1000be40:	bdffffcc 	andi	r23,r23,65535
1000be44:	94bfffcc 	andi	r18,r18,65535
1000be48:	9009883a 	mov	r4,r18
1000be4c:	b80b883a 	mov	r5,r23
1000be50:	d8c00515 	stw	r3,20(sp)
1000be54:	d9800715 	stw	r6,28(sp)
1000be58:	da000615 	stw	r8,24(sp)
1000be5c:	000a67c0 	call	1000a67c <__mulsi3>
1000be60:	9009883a 	mov	r4,r18
1000be64:	a80b883a 	mov	r5,r21
1000be68:	1029883a 	mov	r20,r2
1000be6c:	000a67c0 	call	1000a67c <__mulsi3>
1000be70:	e009883a 	mov	r4,fp
1000be74:	a80b883a 	mov	r5,r21
1000be78:	102d883a 	mov	r22,r2
1000be7c:	000a67c0 	call	1000a67c <__mulsi3>
1000be80:	e009883a 	mov	r4,fp
1000be84:	b80b883a 	mov	r5,r23
1000be88:	1027883a 	mov	r19,r2
1000be8c:	000a67c0 	call	1000a67c <__mulsi3>
1000be90:	a008d43a 	srli	r4,r20,16
1000be94:	b085883a 	add	r2,r22,r2
1000be98:	d8c00517 	ldw	r3,20(sp)
1000be9c:	110f883a 	add	r7,r2,r4
1000bea0:	d9800717 	ldw	r6,28(sp)
1000bea4:	da000617 	ldw	r8,24(sp)
1000bea8:	3d80022e 	bgeu	r7,r22,1000beb4 <__muldf3+0x3b0>
1000beac:	00800074 	movhi	r2,1
1000beb0:	98a7883a 	add	r19,r19,r2
1000beb4:	3804943a 	slli	r2,r7,16
1000beb8:	380ed43a 	srli	r7,r7,16
1000bebc:	882cd43a 	srli	r22,r17,16
1000bec0:	a53fffcc 	andi	r20,r20,65535
1000bec4:	8c7fffcc 	andi	r17,r17,65535
1000bec8:	1529883a 	add	r20,r2,r20
1000becc:	8809883a 	mov	r4,r17
1000bed0:	b80b883a 	mov	r5,r23
1000bed4:	d8c00515 	stw	r3,20(sp)
1000bed8:	d9800715 	stw	r6,28(sp)
1000bedc:	da000615 	stw	r8,24(sp)
1000bee0:	d9c00015 	stw	r7,0(sp)
1000bee4:	dd000115 	stw	r20,4(sp)
1000bee8:	000a67c0 	call	1000a67c <__mulsi3>
1000beec:	a80b883a 	mov	r5,r21
1000bef0:	8809883a 	mov	r4,r17
1000bef4:	d8800415 	stw	r2,16(sp)
1000bef8:	000a67c0 	call	1000a67c <__mulsi3>
1000befc:	a80b883a 	mov	r5,r21
1000bf00:	b009883a 	mov	r4,r22
1000bf04:	1029883a 	mov	r20,r2
1000bf08:	000a67c0 	call	1000a67c <__mulsi3>
1000bf0c:	b009883a 	mov	r4,r22
1000bf10:	b80b883a 	mov	r5,r23
1000bf14:	102b883a 	mov	r21,r2
1000bf18:	000a67c0 	call	1000a67c <__mulsi3>
1000bf1c:	da400417 	ldw	r9,16(sp)
1000bf20:	a085883a 	add	r2,r20,r2
1000bf24:	d8c00517 	ldw	r3,20(sp)
1000bf28:	4808d43a 	srli	r4,r9,16
1000bf2c:	d9800717 	ldw	r6,28(sp)
1000bf30:	da000617 	ldw	r8,24(sp)
1000bf34:	1109883a 	add	r4,r2,r4
1000bf38:	2500022e 	bgeu	r4,r20,1000bf44 <__muldf3+0x440>
1000bf3c:	00800074 	movhi	r2,1
1000bf40:	a8ab883a 	add	r21,r21,r2
1000bf44:	200e943a 	slli	r7,r4,16
1000bf48:	2004d43a 	srli	r2,r4,16
1000bf4c:	802ed43a 	srli	r23,r16,16
1000bf50:	843fffcc 	andi	r16,r16,65535
1000bf54:	4d3fffcc 	andi	r20,r9,65535
1000bf58:	9009883a 	mov	r4,r18
1000bf5c:	800b883a 	mov	r5,r16
1000bf60:	3d29883a 	add	r20,r7,r20
1000bf64:	d8c00515 	stw	r3,20(sp)
1000bf68:	d9800715 	stw	r6,28(sp)
1000bf6c:	da000615 	stw	r8,24(sp)
1000bf70:	a8ab883a 	add	r21,r21,r2
1000bf74:	000a67c0 	call	1000a67c <__mulsi3>
1000bf78:	9009883a 	mov	r4,r18
1000bf7c:	b80b883a 	mov	r5,r23
1000bf80:	d8800315 	stw	r2,12(sp)
1000bf84:	000a67c0 	call	1000a67c <__mulsi3>
1000bf88:	e009883a 	mov	r4,fp
1000bf8c:	b80b883a 	mov	r5,r23
1000bf90:	1025883a 	mov	r18,r2
1000bf94:	000a67c0 	call	1000a67c <__mulsi3>
1000bf98:	e009883a 	mov	r4,fp
1000bf9c:	800b883a 	mov	r5,r16
1000bfa0:	d8800215 	stw	r2,8(sp)
1000bfa4:	000a67c0 	call	1000a67c <__mulsi3>
1000bfa8:	da800317 	ldw	r10,12(sp)
1000bfac:	d9400017 	ldw	r5,0(sp)
1000bfb0:	9085883a 	add	r2,r18,r2
1000bfb4:	5008d43a 	srli	r4,r10,16
1000bfb8:	a153883a 	add	r9,r20,r5
1000bfbc:	d8c00517 	ldw	r3,20(sp)
1000bfc0:	1109883a 	add	r4,r2,r4
1000bfc4:	d9800717 	ldw	r6,28(sp)
1000bfc8:	da000617 	ldw	r8,24(sp)
1000bfcc:	dac00217 	ldw	r11,8(sp)
1000bfd0:	2480022e 	bgeu	r4,r18,1000bfdc <__muldf3+0x4d8>
1000bfd4:	00800074 	movhi	r2,1
1000bfd8:	5897883a 	add	r11,r11,r2
1000bfdc:	200e943a 	slli	r7,r4,16
1000bfe0:	2038d43a 	srli	fp,r4,16
1000bfe4:	52bfffcc 	andi	r10,r10,65535
1000bfe8:	3a8f883a 	add	r7,r7,r10
1000bfec:	8809883a 	mov	r4,r17
1000bff0:	800b883a 	mov	r5,r16
1000bff4:	d8c00515 	stw	r3,20(sp)
1000bff8:	d9800715 	stw	r6,28(sp)
1000bffc:	d9c00215 	stw	r7,8(sp)
1000c000:	da000615 	stw	r8,24(sp)
1000c004:	da400415 	stw	r9,16(sp)
1000c008:	5f39883a 	add	fp,r11,fp
1000c00c:	000a67c0 	call	1000a67c <__mulsi3>
1000c010:	8809883a 	mov	r4,r17
1000c014:	b80b883a 	mov	r5,r23
1000c018:	1025883a 	mov	r18,r2
1000c01c:	000a67c0 	call	1000a67c <__mulsi3>
1000c020:	b009883a 	mov	r4,r22
1000c024:	b80b883a 	mov	r5,r23
1000c028:	d8800315 	stw	r2,12(sp)
1000c02c:	000a67c0 	call	1000a67c <__mulsi3>
1000c030:	b009883a 	mov	r4,r22
1000c034:	800b883a 	mov	r5,r16
1000c038:	1023883a 	mov	r17,r2
1000c03c:	000a67c0 	call	1000a67c <__mulsi3>
1000c040:	da800317 	ldw	r10,12(sp)
1000c044:	9008d43a 	srli	r4,r18,16
1000c048:	d8c00517 	ldw	r3,20(sp)
1000c04c:	5085883a 	add	r2,r10,r2
1000c050:	1109883a 	add	r4,r2,r4
1000c054:	d9800717 	ldw	r6,28(sp)
1000c058:	d9c00217 	ldw	r7,8(sp)
1000c05c:	da000617 	ldw	r8,24(sp)
1000c060:	da400417 	ldw	r9,16(sp)
1000c064:	2280022e 	bgeu	r4,r10,1000c070 <__muldf3+0x56c>
1000c068:	00800074 	movhi	r2,1
1000c06c:	88a3883a 	add	r17,r17,r2
1000c070:	2004943a 	slli	r2,r4,16
1000c074:	94bfffcc 	andi	r18,r18,65535
1000c078:	4ce7883a 	add	r19,r9,r19
1000c07c:	14a5883a 	add	r18,r2,r18
1000c080:	9d29803a 	cmpltu	r20,r19,r20
1000c084:	9565883a 	add	r18,r18,r21
1000c088:	9505883a 	add	r2,r18,r20
1000c08c:	99e7883a 	add	r19,r19,r7
1000c090:	99cf803a 	cmpltu	r7,r19,r7
1000c094:	e08b883a 	add	r5,fp,r2
1000c098:	2008d43a 	srli	r4,r4,16
1000c09c:	29ef883a 	add	r23,r5,r7
1000c0a0:	1529803a 	cmpltu	r20,r2,r20
1000c0a4:	956b803a 	cmpltu	r21,r18,r21
1000c0a8:	b9cf803a 	cmpltu	r7,r23,r7
1000c0ac:	a564b03a 	or	r18,r20,r21
1000c0b0:	2f39803a 	cmpltu	fp,r5,fp
1000c0b4:	9125883a 	add	r18,r18,r4
1000c0b8:	3f38b03a 	or	fp,r7,fp
1000c0bc:	9725883a 	add	r18,r18,fp
1000c0c0:	9804927a 	slli	r2,r19,9
1000c0c4:	9463883a 	add	r17,r18,r17
1000c0c8:	d9000117 	ldw	r4,4(sp)
1000c0cc:	b820d5fa 	srli	r16,r23,23
1000c0d0:	8822927a 	slli	r17,r17,9
1000c0d4:	9826d5fa 	srli	r19,r19,23
1000c0d8:	1104b03a 	or	r2,r2,r4
1000c0dc:	b82e927a 	slli	r23,r23,9
1000c0e0:	1004c03a 	cmpne	r2,r2,zero
1000c0e4:	8c20b03a 	or	r16,r17,r16
1000c0e8:	14e6b03a 	or	r19,r2,r19
1000c0ec:	8080402c 	andhi	r2,r16,256
1000c0f0:	9deeb03a 	or	r23,r19,r23
1000c0f4:	10000726 	beq	r2,zero,1000c114 <__muldf3+0x610>
1000c0f8:	b804d07a 	srli	r2,r23,1
1000c0fc:	800697fa 	slli	r3,r16,31
1000c100:	bdc0004c 	andi	r23,r23,1
1000c104:	8020d07a 	srli	r16,r16,1
1000c108:	b8aeb03a 	or	r23,r23,r2
1000c10c:	b8eeb03a 	or	r23,r23,r3
1000c110:	4007883a 	mov	r3,r8
1000c114:	1900ffc4 	addi	r4,r3,1023
1000c118:	01004d0e 	bge	zero,r4,1000c250 <__muldf3+0x74c>
1000c11c:	b88001cc 	andi	r2,r23,7
1000c120:	10000726 	beq	r2,zero,1000c140 <__muldf3+0x63c>
1000c124:	b94003cc 	andi	r5,r23,15
1000c128:	00800104 	movi	r2,4
1000c12c:	28800426 	beq	r5,r2,1000c140 <__muldf3+0x63c>
1000c130:	b885883a 	add	r2,r23,r2
1000c134:	15ef803a 	cmpltu	r23,r2,r23
1000c138:	85e1883a 	add	r16,r16,r23
1000c13c:	102f883a 	mov	r23,r2
1000c140:	8080402c 	andhi	r2,r16,256
1000c144:	10000426 	beq	r2,zero,1000c158 <__muldf3+0x654>
1000c148:	00bfc034 	movhi	r2,65280
1000c14c:	10bfffc4 	addi	r2,r2,-1
1000c150:	19010004 	addi	r4,r3,1024
1000c154:	80a0703a 	and	r16,r16,r2
1000c158:	0081ff84 	movi	r2,2046
1000c15c:	1100340e 	bge	r2,r4,1000c230 <__muldf3+0x72c>
1000c160:	34c0004c 	andi	r19,r6,1
1000c164:	0101ffc4 	movi	r4,2047
1000c168:	0021883a 	mov	r16,zero
1000c16c:	002f883a 	mov	r23,zero
1000c170:	003ebe06 	br	1000bc6c <__muldf3+0x168>
1000c174:	8080022c 	andhi	r2,r16,8
1000c178:	10000926 	beq	r2,zero,1000c1a0 <__muldf3+0x69c>
1000c17c:	8880022c 	andhi	r2,r17,8
1000c180:	1000071e 	bne	r2,zero,1000c1a0 <__muldf3+0x69c>
1000c184:	00800434 	movhi	r2,16
1000c188:	8c000234 	orhi	r16,r17,8
1000c18c:	10bfffc4 	addi	r2,r2,-1
1000c190:	b027883a 	mov	r19,r22
1000c194:	80a0703a 	and	r16,r16,r2
1000c198:	902f883a 	mov	r23,r18
1000c19c:	003f1a06 	br	1000be08 <__muldf3+0x304>
1000c1a0:	00800434 	movhi	r2,16
1000c1a4:	84000234 	orhi	r16,r16,8
1000c1a8:	10bfffc4 	addi	r2,r2,-1
1000c1ac:	80a0703a 	and	r16,r16,r2
1000c1b0:	003f1506 	br	1000be08 <__muldf3+0x304>
1000c1b4:	3009883a 	mov	r4,r6
1000c1b8:	d9400215 	stw	r5,8(sp)
1000c1bc:	d9800715 	stw	r6,28(sp)
1000c1c0:	da400415 	stw	r9,16(sp)
1000c1c4:	da800315 	stw	r10,12(sp)
1000c1c8:	000ce3c0 	call	1000ce3c <__clzsi2>
1000c1cc:	10c00804 	addi	r3,r2,32
1000c1d0:	010009c4 	movi	r4,39
1000c1d4:	d9400217 	ldw	r5,8(sp)
1000c1d8:	d9800717 	ldw	r6,28(sp)
1000c1dc:	da400417 	ldw	r9,16(sp)
1000c1e0:	da800317 	ldw	r10,12(sp)
1000c1e4:	20fee20e 	bge	r4,r3,1000bd70 <__muldf3+0x26c>
1000c1e8:	147ffe04 	addi	r17,r2,-8
1000c1ec:	9462983a 	sll	r17,r18,r17
1000c1f0:	0025883a 	mov	r18,zero
1000c1f4:	003ee506 	br	1000bd8c <__muldf3+0x288>
1000c1f8:	d9800715 	stw	r6,28(sp)
1000c1fc:	d9c00215 	stw	r7,8(sp)
1000c200:	da400415 	stw	r9,16(sp)
1000c204:	000ce3c0 	call	1000ce3c <__clzsi2>
1000c208:	10c00804 	addi	r3,r2,32
1000c20c:	010009c4 	movi	r4,39
1000c210:	d9800717 	ldw	r6,28(sp)
1000c214:	d9c00217 	ldw	r7,8(sp)
1000c218:	da400417 	ldw	r9,16(sp)
1000c21c:	20feb40e 	bge	r4,r3,1000bcf0 <__muldf3+0x1ec>
1000c220:	143ffe04 	addi	r16,r2,-8
1000c224:	9420983a 	sll	r16,r18,r16
1000c228:	002f883a 	mov	r23,zero
1000c22c:	003eb706 	br	1000bd0c <__muldf3+0x208>
1000c230:	8004977a 	slli	r2,r16,29
1000c234:	b82ed0fa 	srli	r23,r23,3
1000c238:	8020927a 	slli	r16,r16,9
1000c23c:	2101ffcc 	andi	r4,r4,2047
1000c240:	15eeb03a 	or	r23,r2,r23
1000c244:	8020d33a 	srli	r16,r16,12
1000c248:	34c0004c 	andi	r19,r6,1
1000c24c:	003e8706 	br	1000bc6c <__muldf3+0x168>
1000c250:	00bf0084 	movi	r2,-1022
1000c254:	10c5c83a 	sub	r2,r2,r3
1000c258:	01000e04 	movi	r4,56
1000c25c:	2080080e 	bge	r4,r2,1000c280 <__muldf3+0x77c>
1000c260:	34c0004c 	andi	r19,r6,1
1000c264:	0009883a 	mov	r4,zero
1000c268:	0021883a 	mov	r16,zero
1000c26c:	002f883a 	mov	r23,zero
1000c270:	003e7e06 	br	1000bc6c <__muldf3+0x168>
1000c274:	4007883a 	mov	r3,r8
1000c278:	480d883a 	mov	r6,r9
1000c27c:	003fa506 	br	1000c114 <__muldf3+0x610>
1000c280:	010007c4 	movi	r4,31
1000c284:	20801816 	blt	r4,r2,1000c2e8 <__muldf3+0x7e4>
1000c288:	18c10784 	addi	r3,r3,1054
1000c28c:	80c8983a 	sll	r4,r16,r3
1000c290:	b88ad83a 	srl	r5,r23,r2
1000c294:	b8c6983a 	sll	r3,r23,r3
1000c298:	80a0d83a 	srl	r16,r16,r2
1000c29c:	2908b03a 	or	r4,r5,r4
1000c2a0:	1804c03a 	cmpne	r2,r3,zero
1000c2a4:	2088b03a 	or	r4,r4,r2
1000c2a8:	208001cc 	andi	r2,r4,7
1000c2ac:	10000726 	beq	r2,zero,1000c2cc <__muldf3+0x7c8>
1000c2b0:	20c003cc 	andi	r3,r4,15
1000c2b4:	00800104 	movi	r2,4
1000c2b8:	18800426 	beq	r3,r2,1000c2cc <__muldf3+0x7c8>
1000c2bc:	20c00104 	addi	r3,r4,4
1000c2c0:	1905803a 	cmpltu	r2,r3,r4
1000c2c4:	80a1883a 	add	r16,r16,r2
1000c2c8:	1809883a 	mov	r4,r3
1000c2cc:	8080202c 	andhi	r2,r16,128
1000c2d0:	10001b26 	beq	r2,zero,1000c340 <__muldf3+0x83c>
1000c2d4:	34c0004c 	andi	r19,r6,1
1000c2d8:	01000044 	movi	r4,1
1000c2dc:	0021883a 	mov	r16,zero
1000c2e0:	002f883a 	mov	r23,zero
1000c2e4:	003e6106 	br	1000bc6c <__muldf3+0x168>
1000c2e8:	013ef884 	movi	r4,-1054
1000c2ec:	20c9c83a 	sub	r4,r4,r3
1000c2f0:	01400804 	movi	r5,32
1000c2f4:	8108d83a 	srl	r4,r16,r4
1000c2f8:	11401526 	beq	r2,r5,1000c350 <__muldf3+0x84c>
1000c2fc:	18c10f84 	addi	r3,r3,1086
1000c300:	80e0983a 	sll	r16,r16,r3
1000c304:	85eeb03a 	or	r23,r16,r23
1000c308:	b804c03a 	cmpne	r2,r23,zero
1000c30c:	1108b03a 	or	r4,r2,r4
1000c310:	20c001cc 	andi	r3,r4,7
1000c314:	1800061e 	bne	r3,zero,1000c330 <__muldf3+0x82c>
1000c318:	0021883a 	mov	r16,zero
1000c31c:	202ed0fa 	srli	r23,r4,3
1000c320:	34c0004c 	andi	r19,r6,1
1000c324:	0009883a 	mov	r4,zero
1000c328:	b8eeb03a 	or	r23,r23,r3
1000c32c:	003e4f06 	br	1000bc6c <__muldf3+0x168>
1000c330:	20c003cc 	andi	r3,r4,15
1000c334:	00800104 	movi	r2,4
1000c338:	0021883a 	mov	r16,zero
1000c33c:	18bfdf1e 	bne	r3,r2,1000c2bc <__muldf3+0x7b8>
1000c340:	8004927a 	slli	r2,r16,9
1000c344:	8006977a 	slli	r3,r16,29
1000c348:	1020d33a 	srli	r16,r2,12
1000c34c:	003ff306 	br	1000c31c <__muldf3+0x818>
1000c350:	0021883a 	mov	r16,zero
1000c354:	003feb06 	br	1000c304 <__muldf3+0x800>
1000c358:	00800434 	movhi	r2,16
1000c35c:	84000234 	orhi	r16,r16,8
1000c360:	10bfffc4 	addi	r2,r2,-1
1000c364:	4cc0004c 	andi	r19,r9,1
1000c368:	80a0703a 	and	r16,r16,r2
1000c36c:	003ea606 	br	1000be08 <__muldf3+0x304>

1000c370 <__subdf3>:
1000c370:	00c00434 	movhi	r3,16
1000c374:	18ffffc4 	addi	r3,r3,-1
1000c378:	defffb04 	addi	sp,sp,-20
1000c37c:	28d2703a 	and	r9,r5,r3
1000c380:	3814d53a 	srli	r10,r7,20
1000c384:	38c6703a 	and	r3,r7,r3
1000c388:	3004d77a 	srli	r2,r6,29
1000c38c:	dc800215 	stw	r18,8(sp)
1000c390:	dc000015 	stw	r16,0(sp)
1000c394:	2824d7fa 	srli	r18,r5,31
1000c398:	2820d53a 	srli	r16,r5,20
1000c39c:	481290fa 	slli	r9,r9,3
1000c3a0:	200ad77a 	srli	r5,r4,29
1000c3a4:	180690fa 	slli	r3,r3,3
1000c3a8:	dc400115 	stw	r17,4(sp)
1000c3ac:	dfc00415 	stw	ra,16(sp)
1000c3b0:	202290fa 	slli	r17,r4,3
1000c3b4:	dcc00315 	stw	r19,12(sp)
1000c3b8:	5281ffcc 	andi	r10,r10,2047
1000c3bc:	0101ffc4 	movi	r4,2047
1000c3c0:	9011883a 	mov	r8,r18
1000c3c4:	8401ffcc 	andi	r16,r16,2047
1000c3c8:	94803fcc 	andi	r18,r18,255
1000c3cc:	494ab03a 	or	r5,r9,r5
1000c3d0:	380ed7fa 	srli	r7,r7,31
1000c3d4:	1886b03a 	or	r3,r3,r2
1000c3d8:	300c90fa 	slli	r6,r6,3
1000c3dc:	51009026 	beq	r10,r4,1000c620 <__subdf3+0x2b0>
1000c3e0:	39c0005c 	xori	r7,r7,1
1000c3e4:	8285c83a 	sub	r2,r16,r10
1000c3e8:	91c06f26 	beq	r18,r7,1000c5a8 <__subdf3+0x238>
1000c3ec:	0080b10e 	bge	zero,r2,1000c6b4 <__subdf3+0x344>
1000c3f0:	50002a1e 	bne	r10,zero,1000c49c <__subdf3+0x12c>
1000c3f4:	1988b03a 	or	r4,r3,r6
1000c3f8:	2000941e 	bne	r4,zero,1000c64c <__subdf3+0x2dc>
1000c3fc:	888001cc 	andi	r2,r17,7
1000c400:	10005b26 	beq	r2,zero,1000c570 <__subdf3+0x200>
1000c404:	88c003cc 	andi	r3,r17,15
1000c408:	00800104 	movi	r2,4
1000c40c:	18805826 	beq	r3,r2,1000c570 <__subdf3+0x200>
1000c410:	88c00104 	addi	r3,r17,4
1000c414:	1c63803a 	cmpltu	r17,r3,r17
1000c418:	2c4b883a 	add	r5,r5,r17
1000c41c:	2880202c 	andhi	r2,r5,128
1000c420:	9200004c 	andi	r8,r18,1
1000c424:	1823883a 	mov	r17,r3
1000c428:	10005426 	beq	r2,zero,1000c57c <__subdf3+0x20c>
1000c42c:	84000044 	addi	r16,r16,1
1000c430:	0081ffc4 	movi	r2,2047
1000c434:	8080bf26 	beq	r16,r2,1000c734 <__subdf3+0x3c4>
1000c438:	013fe034 	movhi	r4,65408
1000c43c:	213fffc4 	addi	r4,r4,-1
1000c440:	290a703a 	and	r5,r5,r4
1000c444:	2804977a 	slli	r2,r5,29
1000c448:	280a927a 	slli	r5,r5,9
1000c44c:	8822d0fa 	srli	r17,r17,3
1000c450:	8401ffcc 	andi	r16,r16,2047
1000c454:	2808d33a 	srli	r4,r5,12
1000c458:	1444b03a 	or	r2,r2,r17
1000c45c:	8401ffcc 	andi	r16,r16,2047
1000c460:	800a953a 	slli	r5,r16,20
1000c464:	40c03fcc 	andi	r3,r8,255
1000c468:	04000434 	movhi	r16,16
1000c46c:	180697fa 	slli	r3,r3,31
1000c470:	843fffc4 	addi	r16,r16,-1
1000c474:	2420703a 	and	r16,r4,r16
1000c478:	8160b03a 	or	r16,r16,r5
1000c47c:	80c6b03a 	or	r3,r16,r3
1000c480:	dfc00417 	ldw	ra,16(sp)
1000c484:	dcc00317 	ldw	r19,12(sp)
1000c488:	dc800217 	ldw	r18,8(sp)
1000c48c:	dc400117 	ldw	r17,4(sp)
1000c490:	dc000017 	ldw	r16,0(sp)
1000c494:	dec00504 	addi	sp,sp,20
1000c498:	f800283a 	ret
1000c49c:	0101ffc4 	movi	r4,2047
1000c4a0:	813fd626 	beq	r16,r4,1000c3fc <__subdf3+0x8c>
1000c4a4:	18c02034 	orhi	r3,r3,128
1000c4a8:	01000e04 	movi	r4,56
1000c4ac:	2080a416 	blt	r4,r2,1000c740 <__subdf3+0x3d0>
1000c4b0:	010007c4 	movi	r4,31
1000c4b4:	2080c716 	blt	r4,r2,1000c7d4 <__subdf3+0x464>
1000c4b8:	01000804 	movi	r4,32
1000c4bc:	2089c83a 	sub	r4,r4,r2
1000c4c0:	1910983a 	sll	r8,r3,r4
1000c4c4:	308ed83a 	srl	r7,r6,r2
1000c4c8:	3108983a 	sll	r4,r6,r4
1000c4cc:	1884d83a 	srl	r2,r3,r2
1000c4d0:	41ccb03a 	or	r6,r8,r7
1000c4d4:	2008c03a 	cmpne	r4,r4,zero
1000c4d8:	310cb03a 	or	r6,r6,r4
1000c4dc:	898dc83a 	sub	r6,r17,r6
1000c4e0:	89a3803a 	cmpltu	r17,r17,r6
1000c4e4:	288bc83a 	sub	r5,r5,r2
1000c4e8:	2c4bc83a 	sub	r5,r5,r17
1000c4ec:	3023883a 	mov	r17,r6
1000c4f0:	2880202c 	andhi	r2,r5,128
1000c4f4:	10006b26 	beq	r2,zero,1000c6a4 <__subdf3+0x334>
1000c4f8:	04c02034 	movhi	r19,128
1000c4fc:	9cffffc4 	addi	r19,r19,-1
1000c500:	2ce6703a 	and	r19,r5,r19
1000c504:	98007c26 	beq	r19,zero,1000c6f8 <__subdf3+0x388>
1000c508:	9809883a 	mov	r4,r19
1000c50c:	000ce3c0 	call	1000ce3c <__clzsi2>
1000c510:	10fffe04 	addi	r3,r2,-8
1000c514:	010007c4 	movi	r4,31
1000c518:	20c07d16 	blt	r4,r3,1000c710 <__subdf3+0x3a0>
1000c51c:	01400a04 	movi	r5,40
1000c520:	2885c83a 	sub	r2,r5,r2
1000c524:	888ad83a 	srl	r5,r17,r2
1000c528:	98e6983a 	sll	r19,r19,r3
1000c52c:	88e2983a 	sll	r17,r17,r3
1000c530:	2ce6b03a 	or	r19,r5,r19
1000c534:	1c007a16 	blt	r3,r16,1000c720 <__subdf3+0x3b0>
1000c538:	1c21c83a 	sub	r16,r3,r16
1000c53c:	81400044 	addi	r5,r16,1
1000c540:	00c007c4 	movi	r3,31
1000c544:	19409616 	blt	r3,r5,1000c7a0 <__subdf3+0x430>
1000c548:	1c21c83a 	sub	r16,r3,r16
1000c54c:	8c08983a 	sll	r4,r17,r16
1000c550:	8946d83a 	srl	r3,r17,r5
1000c554:	9c20983a 	sll	r16,r19,r16
1000c558:	2008c03a 	cmpne	r4,r4,zero
1000c55c:	994ad83a 	srl	r5,r19,r5
1000c560:	1c06b03a 	or	r3,r3,r16
1000c564:	1922b03a 	or	r17,r3,r4
1000c568:	0021883a 	mov	r16,zero
1000c56c:	003fa306 	br	1000c3fc <__subdf3+0x8c>
1000c570:	2880202c 	andhi	r2,r5,128
1000c574:	9200004c 	andi	r8,r18,1
1000c578:	103fac1e 	bne	r2,zero,1000c42c <__subdf3+0xbc>
1000c57c:	2804977a 	slli	r2,r5,29
1000c580:	8822d0fa 	srli	r17,r17,3
1000c584:	00c1ffc4 	movi	r3,2047
1000c588:	280ad0fa 	srli	r5,r5,3
1000c58c:	1444b03a 	or	r2,r2,r17
1000c590:	80c02726 	beq	r16,r3,1000c630 <__subdf3+0x2c0>
1000c594:	01000434 	movhi	r4,16
1000c598:	213fffc4 	addi	r4,r4,-1
1000c59c:	80e0703a 	and	r16,r16,r3
1000c5a0:	2908703a 	and	r4,r5,r4
1000c5a4:	003fad06 	br	1000c45c <__subdf3+0xec>
1000c5a8:	0080690e 	bge	zero,r2,1000c750 <__subdf3+0x3e0>
1000c5ac:	50002f26 	beq	r10,zero,1000c66c <__subdf3+0x2fc>
1000c5b0:	0101ffc4 	movi	r4,2047
1000c5b4:	813f9126 	beq	r16,r4,1000c3fc <__subdf3+0x8c>
1000c5b8:	18c02034 	orhi	r3,r3,128
1000c5bc:	01000e04 	movi	r4,56
1000c5c0:	2080b00e 	bge	r4,r2,1000c884 <__subdf3+0x514>
1000c5c4:	198cb03a 	or	r6,r3,r6
1000c5c8:	300ec03a 	cmpne	r7,r6,zero
1000c5cc:	0005883a 	mov	r2,zero
1000c5d0:	3c4f883a 	add	r7,r7,r17
1000c5d4:	3c63803a 	cmpltu	r17,r7,r17
1000c5d8:	114b883a 	add	r5,r2,r5
1000c5dc:	2c4b883a 	add	r5,r5,r17
1000c5e0:	3823883a 	mov	r17,r7
1000c5e4:	2880202c 	andhi	r2,r5,128
1000c5e8:	10002e26 	beq	r2,zero,1000c6a4 <__subdf3+0x334>
1000c5ec:	84000044 	addi	r16,r16,1
1000c5f0:	0081ffc4 	movi	r2,2047
1000c5f4:	8080de26 	beq	r16,r2,1000c970 <__subdf3+0x600>
1000c5f8:	00bfe034 	movhi	r2,65408
1000c5fc:	10bfffc4 	addi	r2,r2,-1
1000c600:	288a703a 	and	r5,r5,r2
1000c604:	880cd07a 	srli	r6,r17,1
1000c608:	280897fa 	slli	r4,r5,31
1000c60c:	88c0004c 	andi	r3,r17,1
1000c610:	30e2b03a 	or	r17,r6,r3
1000c614:	280ad07a 	srli	r5,r5,1
1000c618:	8922b03a 	or	r17,r17,r4
1000c61c:	003f7706 	br	1000c3fc <__subdf3+0x8c>
1000c620:	1984b03a 	or	r2,r3,r6
1000c624:	103f6e26 	beq	r2,zero,1000c3e0 <__subdf3+0x70>
1000c628:	39c03fcc 	andi	r7,r7,255
1000c62c:	003f6d06 	br	1000c3e4 <__subdf3+0x74>
1000c630:	1146b03a 	or	r3,r2,r5
1000c634:	18003f26 	beq	r3,zero,1000c734 <__subdf3+0x3c4>
1000c638:	00c00434 	movhi	r3,16
1000c63c:	29000234 	orhi	r4,r5,8
1000c640:	18ffffc4 	addi	r3,r3,-1
1000c644:	20c8703a 	and	r4,r4,r3
1000c648:	003f8406 	br	1000c45c <__subdf3+0xec>
1000c64c:	10bfffc4 	addi	r2,r2,-1
1000c650:	1000501e 	bne	r2,zero,1000c794 <__subdf3+0x424>
1000c654:	898fc83a 	sub	r7,r17,r6
1000c658:	89e3803a 	cmpltu	r17,r17,r7
1000c65c:	28cbc83a 	sub	r5,r5,r3
1000c660:	2c4bc83a 	sub	r5,r5,r17
1000c664:	3823883a 	mov	r17,r7
1000c668:	003fa106 	br	1000c4f0 <__subdf3+0x180>
1000c66c:	1988b03a 	or	r4,r3,r6
1000c670:	203f6226 	beq	r4,zero,1000c3fc <__subdf3+0x8c>
1000c674:	10bfffc4 	addi	r2,r2,-1
1000c678:	10009b1e 	bne	r2,zero,1000c8e8 <__subdf3+0x578>
1000c67c:	344d883a 	add	r6,r6,r17
1000c680:	3463803a 	cmpltu	r17,r6,r17
1000c684:	194b883a 	add	r5,r3,r5
1000c688:	2c4b883a 	add	r5,r5,r17
1000c68c:	3023883a 	mov	r17,r6
1000c690:	003fd406 	br	1000c5e4 <__subdf3+0x274>
1000c694:	1106b03a 	or	r3,r2,r4
1000c698:	1800b426 	beq	r3,zero,1000c96c <__subdf3+0x5fc>
1000c69c:	100b883a 	mov	r5,r2
1000c6a0:	2023883a 	mov	r17,r4
1000c6a4:	888001cc 	andi	r2,r17,7
1000c6a8:	103f561e 	bne	r2,zero,1000c404 <__subdf3+0x94>
1000c6ac:	9200004c 	andi	r8,r18,1
1000c6b0:	003fb206 	br	1000c57c <__subdf3+0x20c>
1000c6b4:	1000531e 	bne	r2,zero,1000c804 <__subdf3+0x494>
1000c6b8:	80800044 	addi	r2,r16,1
1000c6bc:	1081ffcc 	andi	r2,r2,2047
1000c6c0:	01000044 	movi	r4,1
1000c6c4:	2080a00e 	bge	r4,r2,1000c948 <__subdf3+0x5d8>
1000c6c8:	8985c83a 	sub	r2,r17,r6
1000c6cc:	8889803a 	cmpltu	r4,r17,r2
1000c6d0:	28e7c83a 	sub	r19,r5,r3
1000c6d4:	9927c83a 	sub	r19,r19,r4
1000c6d8:	9900202c 	andhi	r4,r19,128
1000c6dc:	20006226 	beq	r4,zero,1000c868 <__subdf3+0x4f8>
1000c6e0:	3463c83a 	sub	r17,r6,r17
1000c6e4:	194bc83a 	sub	r5,r3,r5
1000c6e8:	344d803a 	cmpltu	r6,r6,r17
1000c6ec:	29a7c83a 	sub	r19,r5,r6
1000c6f0:	3825883a 	mov	r18,r7
1000c6f4:	983f841e 	bne	r19,zero,1000c508 <__subdf3+0x198>
1000c6f8:	8809883a 	mov	r4,r17
1000c6fc:	000ce3c0 	call	1000ce3c <__clzsi2>
1000c700:	10800804 	addi	r2,r2,32
1000c704:	10fffe04 	addi	r3,r2,-8
1000c708:	010007c4 	movi	r4,31
1000c70c:	20ff830e 	bge	r4,r3,1000c51c <__subdf3+0x1ac>
1000c710:	14fff604 	addi	r19,r2,-40
1000c714:	8ce6983a 	sll	r19,r17,r19
1000c718:	0023883a 	mov	r17,zero
1000c71c:	1c3f860e 	bge	r3,r16,1000c538 <__subdf3+0x1c8>
1000c720:	017fe034 	movhi	r5,65408
1000c724:	297fffc4 	addi	r5,r5,-1
1000c728:	80e1c83a 	sub	r16,r16,r3
1000c72c:	994a703a 	and	r5,r19,r5
1000c730:	003f3206 	br	1000c3fc <__subdf3+0x8c>
1000c734:	0009883a 	mov	r4,zero
1000c738:	0005883a 	mov	r2,zero
1000c73c:	003f4706 	br	1000c45c <__subdf3+0xec>
1000c740:	198cb03a 	or	r6,r3,r6
1000c744:	300cc03a 	cmpne	r6,r6,zero
1000c748:	0005883a 	mov	r2,zero
1000c74c:	003f6306 	br	1000c4dc <__subdf3+0x16c>
1000c750:	10009d1e 	bne	r2,zero,1000c9c8 <__subdf3+0x658>
1000c754:	81c00044 	addi	r7,r16,1
1000c758:	3881ffcc 	andi	r2,r7,2047
1000c75c:	02400044 	movi	r9,1
1000c760:	4880680e 	bge	r9,r2,1000c904 <__subdf3+0x594>
1000c764:	0081ffc4 	movi	r2,2047
1000c768:	3880ae26 	beq	r7,r2,1000ca24 <__subdf3+0x6b4>
1000c76c:	344d883a 	add	r6,r6,r17
1000c770:	3463803a 	cmpltu	r17,r6,r17
1000c774:	194b883a 	add	r5,r3,r5
1000c778:	2c4b883a 	add	r5,r5,r17
1000c77c:	282297fa 	slli	r17,r5,31
1000c780:	300cd07a 	srli	r6,r6,1
1000c784:	280ad07a 	srli	r5,r5,1
1000c788:	3821883a 	mov	r16,r7
1000c78c:	89a2b03a 	or	r17,r17,r6
1000c790:	003f1a06 	br	1000c3fc <__subdf3+0x8c>
1000c794:	0101ffc4 	movi	r4,2047
1000c798:	813f431e 	bne	r16,r4,1000c4a8 <__subdf3+0x138>
1000c79c:	003f1706 	br	1000c3fc <__subdf3+0x8c>
1000c7a0:	80bff844 	addi	r2,r16,-31
1000c7a4:	00c00804 	movi	r3,32
1000c7a8:	9884d83a 	srl	r2,r19,r2
1000c7ac:	28c05126 	beq	r5,r3,1000c8f4 <__subdf3+0x584>
1000c7b0:	00c00fc4 	movi	r3,63
1000c7b4:	1c21c83a 	sub	r16,r3,r16
1000c7b8:	9c26983a 	sll	r19,r19,r16
1000c7bc:	9c62b03a 	or	r17,r19,r17
1000c7c0:	8822c03a 	cmpne	r17,r17,zero
1000c7c4:	88a2b03a 	or	r17,r17,r2
1000c7c8:	000b883a 	mov	r5,zero
1000c7cc:	0021883a 	mov	r16,zero
1000c7d0:	003fb406 	br	1000c6a4 <__subdf3+0x334>
1000c7d4:	113ff804 	addi	r4,r2,-32
1000c7d8:	01c00804 	movi	r7,32
1000c7dc:	1908d83a 	srl	r4,r3,r4
1000c7e0:	11c04626 	beq	r2,r7,1000c8fc <__subdf3+0x58c>
1000c7e4:	01c01004 	movi	r7,64
1000c7e8:	3885c83a 	sub	r2,r7,r2
1000c7ec:	1884983a 	sll	r2,r3,r2
1000c7f0:	118cb03a 	or	r6,r2,r6
1000c7f4:	300cc03a 	cmpne	r6,r6,zero
1000c7f8:	310cb03a 	or	r6,r6,r4
1000c7fc:	0005883a 	mov	r2,zero
1000c800:	003f3606 	br	1000c4dc <__subdf3+0x16c>
1000c804:	80002b26 	beq	r16,zero,1000c8b4 <__subdf3+0x544>
1000c808:	0101ffc4 	movi	r4,2047
1000c80c:	51006926 	beq	r10,r4,1000c9b4 <__subdf3+0x644>
1000c810:	0085c83a 	sub	r2,zero,r2
1000c814:	29402034 	orhi	r5,r5,128
1000c818:	01000e04 	movi	r4,56
1000c81c:	20807d16 	blt	r4,r2,1000ca14 <__subdf3+0x6a4>
1000c820:	010007c4 	movi	r4,31
1000c824:	2080d916 	blt	r4,r2,1000cb8c <__subdf3+0x81c>
1000c828:	01000804 	movi	r4,32
1000c82c:	2089c83a 	sub	r4,r4,r2
1000c830:	2912983a 	sll	r9,r5,r4
1000c834:	8890d83a 	srl	r8,r17,r2
1000c838:	8908983a 	sll	r4,r17,r4
1000c83c:	2884d83a 	srl	r2,r5,r2
1000c840:	4a22b03a 	or	r17,r9,r8
1000c844:	2008c03a 	cmpne	r4,r4,zero
1000c848:	8922b03a 	or	r17,r17,r4
1000c84c:	3463c83a 	sub	r17,r6,r17
1000c850:	1885c83a 	sub	r2,r3,r2
1000c854:	344d803a 	cmpltu	r6,r6,r17
1000c858:	118bc83a 	sub	r5,r2,r6
1000c85c:	5021883a 	mov	r16,r10
1000c860:	3825883a 	mov	r18,r7
1000c864:	003f2206 	br	1000c4f0 <__subdf3+0x180>
1000c868:	9886b03a 	or	r3,r19,r2
1000c86c:	18001c1e 	bne	r3,zero,1000c8e0 <__subdf3+0x570>
1000c870:	0011883a 	mov	r8,zero
1000c874:	000b883a 	mov	r5,zero
1000c878:	0023883a 	mov	r17,zero
1000c87c:	0021883a 	mov	r16,zero
1000c880:	003f3e06 	br	1000c57c <__subdf3+0x20c>
1000c884:	010007c4 	movi	r4,31
1000c888:	20803c16 	blt	r4,r2,1000c97c <__subdf3+0x60c>
1000c88c:	01000804 	movi	r4,32
1000c890:	2089c83a 	sub	r4,r4,r2
1000c894:	1912983a 	sll	r9,r3,r4
1000c898:	308ed83a 	srl	r7,r6,r2
1000c89c:	3108983a 	sll	r4,r6,r4
1000c8a0:	1884d83a 	srl	r2,r3,r2
1000c8a4:	49ceb03a 	or	r7,r9,r7
1000c8a8:	2008c03a 	cmpne	r4,r4,zero
1000c8ac:	390eb03a 	or	r7,r7,r4
1000c8b0:	003f4706 	br	1000c5d0 <__subdf3+0x260>
1000c8b4:	2c48b03a 	or	r4,r5,r17
1000c8b8:	20003e26 	beq	r4,zero,1000c9b4 <__subdf3+0x644>
1000c8bc:	0084303a 	nor	r2,zero,r2
1000c8c0:	10003a1e 	bne	r2,zero,1000c9ac <__subdf3+0x63c>
1000c8c4:	3463c83a 	sub	r17,r6,r17
1000c8c8:	194bc83a 	sub	r5,r3,r5
1000c8cc:	344d803a 	cmpltu	r6,r6,r17
1000c8d0:	298bc83a 	sub	r5,r5,r6
1000c8d4:	5021883a 	mov	r16,r10
1000c8d8:	3825883a 	mov	r18,r7
1000c8dc:	003f0406 	br	1000c4f0 <__subdf3+0x180>
1000c8e0:	1023883a 	mov	r17,r2
1000c8e4:	003f0706 	br	1000c504 <__subdf3+0x194>
1000c8e8:	0101ffc4 	movi	r4,2047
1000c8ec:	813f331e 	bne	r16,r4,1000c5bc <__subdf3+0x24c>
1000c8f0:	003ec206 	br	1000c3fc <__subdf3+0x8c>
1000c8f4:	0027883a 	mov	r19,zero
1000c8f8:	003fb006 	br	1000c7bc <__subdf3+0x44c>
1000c8fc:	0005883a 	mov	r2,zero
1000c900:	003fbb06 	br	1000c7f0 <__subdf3+0x480>
1000c904:	2c44b03a 	or	r2,r5,r17
1000c908:	80008b1e 	bne	r16,zero,1000cb38 <__subdf3+0x7c8>
1000c90c:	1000b526 	beq	r2,zero,1000cbe4 <__subdf3+0x874>
1000c910:	1984b03a 	or	r2,r3,r6
1000c914:	103eb926 	beq	r2,zero,1000c3fc <__subdf3+0x8c>
1000c918:	3449883a 	add	r4,r6,r17
1000c91c:	2463803a 	cmpltu	r17,r4,r17
1000c920:	194b883a 	add	r5,r3,r5
1000c924:	2c4b883a 	add	r5,r5,r17
1000c928:	2880202c 	andhi	r2,r5,128
1000c92c:	2023883a 	mov	r17,r4
1000c930:	103f5c26 	beq	r2,zero,1000c6a4 <__subdf3+0x334>
1000c934:	00bfe034 	movhi	r2,65408
1000c938:	10bfffc4 	addi	r2,r2,-1
1000c93c:	4821883a 	mov	r16,r9
1000c940:	288a703a 	and	r5,r5,r2
1000c944:	003ead06 	br	1000c3fc <__subdf3+0x8c>
1000c948:	2c44b03a 	or	r2,r5,r17
1000c94c:	8000291e 	bne	r16,zero,1000c9f4 <__subdf3+0x684>
1000c950:	10004f1e 	bne	r2,zero,1000ca90 <__subdf3+0x720>
1000c954:	1984b03a 	or	r2,r3,r6
1000c958:	10000426 	beq	r2,zero,1000c96c <__subdf3+0x5fc>
1000c95c:	180b883a 	mov	r5,r3
1000c960:	3023883a 	mov	r17,r6
1000c964:	3825883a 	mov	r18,r7
1000c968:	003ea406 	br	1000c3fc <__subdf3+0x8c>
1000c96c:	0011883a 	mov	r8,zero
1000c970:	000b883a 	mov	r5,zero
1000c974:	0023883a 	mov	r17,zero
1000c978:	003f0006 	br	1000c57c <__subdf3+0x20c>
1000c97c:	11fff804 	addi	r7,r2,-32
1000c980:	19c8d83a 	srl	r4,r3,r7
1000c984:	01c00804 	movi	r7,32
1000c988:	11c07e26 	beq	r2,r7,1000cb84 <__subdf3+0x814>
1000c98c:	01c01004 	movi	r7,64
1000c990:	3885c83a 	sub	r2,r7,r2
1000c994:	1884983a 	sll	r2,r3,r2
1000c998:	118cb03a 	or	r6,r2,r6
1000c99c:	300ec03a 	cmpne	r7,r6,zero
1000c9a0:	390eb03a 	or	r7,r7,r4
1000c9a4:	0005883a 	mov	r2,zero
1000c9a8:	003f0906 	br	1000c5d0 <__subdf3+0x260>
1000c9ac:	0101ffc4 	movi	r4,2047
1000c9b0:	513f991e 	bne	r10,r4,1000c818 <__subdf3+0x4a8>
1000c9b4:	180b883a 	mov	r5,r3
1000c9b8:	3023883a 	mov	r17,r6
1000c9bc:	5021883a 	mov	r16,r10
1000c9c0:	3825883a 	mov	r18,r7
1000c9c4:	003e8d06 	br	1000c3fc <__subdf3+0x8c>
1000c9c8:	80001a1e 	bne	r16,zero,1000ca34 <__subdf3+0x6c4>
1000c9cc:	2c48b03a 	or	r4,r5,r17
1000c9d0:	20005526 	beq	r4,zero,1000cb28 <__subdf3+0x7b8>
1000c9d4:	0084303a 	nor	r2,zero,r2
1000c9d8:	1000511e 	bne	r2,zero,1000cb20 <__subdf3+0x7b0>
1000c9dc:	89a3883a 	add	r17,r17,r6
1000c9e0:	194b883a 	add	r5,r3,r5
1000c9e4:	898d803a 	cmpltu	r6,r17,r6
1000c9e8:	298b883a 	add	r5,r5,r6
1000c9ec:	5021883a 	mov	r16,r10
1000c9f0:	003efc06 	br	1000c5e4 <__subdf3+0x274>
1000c9f4:	1000341e 	bne	r2,zero,1000cac8 <__subdf3+0x758>
1000c9f8:	1984b03a 	or	r2,r3,r6
1000c9fc:	10006f26 	beq	r2,zero,1000cbbc <__subdf3+0x84c>
1000ca00:	180b883a 	mov	r5,r3
1000ca04:	3023883a 	mov	r17,r6
1000ca08:	3825883a 	mov	r18,r7
1000ca0c:	0401ffc4 	movi	r16,2047
1000ca10:	003e7a06 	br	1000c3fc <__subdf3+0x8c>
1000ca14:	2c62b03a 	or	r17,r5,r17
1000ca18:	8822c03a 	cmpne	r17,r17,zero
1000ca1c:	0005883a 	mov	r2,zero
1000ca20:	003f8a06 	br	1000c84c <__subdf3+0x4dc>
1000ca24:	3821883a 	mov	r16,r7
1000ca28:	000b883a 	mov	r5,zero
1000ca2c:	0023883a 	mov	r17,zero
1000ca30:	003ed206 	br	1000c57c <__subdf3+0x20c>
1000ca34:	0101ffc4 	movi	r4,2047
1000ca38:	51003b26 	beq	r10,r4,1000cb28 <__subdf3+0x7b8>
1000ca3c:	0085c83a 	sub	r2,zero,r2
1000ca40:	29402034 	orhi	r5,r5,128
1000ca44:	01000e04 	movi	r4,56
1000ca48:	20806216 	blt	r4,r2,1000cbd4 <__subdf3+0x864>
1000ca4c:	010007c4 	movi	r4,31
1000ca50:	20806b16 	blt	r4,r2,1000cc00 <__subdf3+0x890>
1000ca54:	01000804 	movi	r4,32
1000ca58:	2089c83a 	sub	r4,r4,r2
1000ca5c:	2912983a 	sll	r9,r5,r4
1000ca60:	888ed83a 	srl	r7,r17,r2
1000ca64:	8908983a 	sll	r4,r17,r4
1000ca68:	2884d83a 	srl	r2,r5,r2
1000ca6c:	49e2b03a 	or	r17,r9,r7
1000ca70:	2008c03a 	cmpne	r4,r4,zero
1000ca74:	8922b03a 	or	r17,r17,r4
1000ca78:	89a3883a 	add	r17,r17,r6
1000ca7c:	10c5883a 	add	r2,r2,r3
1000ca80:	898d803a 	cmpltu	r6,r17,r6
1000ca84:	118b883a 	add	r5,r2,r6
1000ca88:	5021883a 	mov	r16,r10
1000ca8c:	003ed506 	br	1000c5e4 <__subdf3+0x274>
1000ca90:	1984b03a 	or	r2,r3,r6
1000ca94:	103e5926 	beq	r2,zero,1000c3fc <__subdf3+0x8c>
1000ca98:	8989c83a 	sub	r4,r17,r6
1000ca9c:	8911803a 	cmpltu	r8,r17,r4
1000caa0:	28c5c83a 	sub	r2,r5,r3
1000caa4:	1205c83a 	sub	r2,r2,r8
1000caa8:	1200202c 	andhi	r8,r2,128
1000caac:	403ef926 	beq	r8,zero,1000c694 <__subdf3+0x324>
1000cab0:	3463c83a 	sub	r17,r6,r17
1000cab4:	194bc83a 	sub	r5,r3,r5
1000cab8:	344d803a 	cmpltu	r6,r6,r17
1000cabc:	298bc83a 	sub	r5,r5,r6
1000cac0:	3825883a 	mov	r18,r7
1000cac4:	003e4d06 	br	1000c3fc <__subdf3+0x8c>
1000cac8:	1984b03a 	or	r2,r3,r6
1000cacc:	10002b26 	beq	r2,zero,1000cb7c <__subdf3+0x80c>
1000cad0:	2808d0fa 	srli	r4,r5,3
1000cad4:	8822d0fa 	srli	r17,r17,3
1000cad8:	280a977a 	slli	r5,r5,29
1000cadc:	2080022c 	andhi	r2,r4,8
1000cae0:	2c62b03a 	or	r17,r5,r17
1000cae4:	10000826 	beq	r2,zero,1000cb08 <__subdf3+0x798>
1000cae8:	1810d0fa 	srli	r8,r3,3
1000caec:	4080022c 	andhi	r2,r8,8
1000caf0:	1000051e 	bne	r2,zero,1000cb08 <__subdf3+0x798>
1000caf4:	300cd0fa 	srli	r6,r6,3
1000caf8:	1804977a 	slli	r2,r3,29
1000cafc:	4009883a 	mov	r4,r8
1000cb00:	3825883a 	mov	r18,r7
1000cb04:	11a2b03a 	or	r17,r2,r6
1000cb08:	880ad77a 	srli	r5,r17,29
1000cb0c:	200890fa 	slli	r4,r4,3
1000cb10:	882290fa 	slli	r17,r17,3
1000cb14:	0401ffc4 	movi	r16,2047
1000cb18:	290ab03a 	or	r5,r5,r4
1000cb1c:	003e3706 	br	1000c3fc <__subdf3+0x8c>
1000cb20:	0101ffc4 	movi	r4,2047
1000cb24:	513fc71e 	bne	r10,r4,1000ca44 <__subdf3+0x6d4>
1000cb28:	180b883a 	mov	r5,r3
1000cb2c:	3023883a 	mov	r17,r6
1000cb30:	5021883a 	mov	r16,r10
1000cb34:	003e3106 	br	1000c3fc <__subdf3+0x8c>
1000cb38:	10002d26 	beq	r2,zero,1000cbf0 <__subdf3+0x880>
1000cb3c:	1984b03a 	or	r2,r3,r6
1000cb40:	10000e26 	beq	r2,zero,1000cb7c <__subdf3+0x80c>
1000cb44:	2808d0fa 	srli	r4,r5,3
1000cb48:	8822d0fa 	srli	r17,r17,3
1000cb4c:	280a977a 	slli	r5,r5,29
1000cb50:	2080022c 	andhi	r2,r4,8
1000cb54:	2c62b03a 	or	r17,r5,r17
1000cb58:	103feb26 	beq	r2,zero,1000cb08 <__subdf3+0x798>
1000cb5c:	180ed0fa 	srli	r7,r3,3
1000cb60:	3880022c 	andhi	r2,r7,8
1000cb64:	103fe81e 	bne	r2,zero,1000cb08 <__subdf3+0x798>
1000cb68:	300cd0fa 	srli	r6,r6,3
1000cb6c:	1804977a 	slli	r2,r3,29
1000cb70:	3809883a 	mov	r4,r7
1000cb74:	11a2b03a 	or	r17,r2,r6
1000cb78:	003fe306 	br	1000cb08 <__subdf3+0x798>
1000cb7c:	0401ffc4 	movi	r16,2047
1000cb80:	003e1e06 	br	1000c3fc <__subdf3+0x8c>
1000cb84:	0005883a 	mov	r2,zero
1000cb88:	003f8306 	br	1000c998 <__subdf3+0x628>
1000cb8c:	113ff804 	addi	r4,r2,-32
1000cb90:	02000804 	movi	r8,32
1000cb94:	2908d83a 	srl	r4,r5,r4
1000cb98:	12002526 	beq	r2,r8,1000cc30 <__subdf3+0x8c0>
1000cb9c:	02001004 	movi	r8,64
1000cba0:	4085c83a 	sub	r2,r8,r2
1000cba4:	288a983a 	sll	r5,r5,r2
1000cba8:	2c62b03a 	or	r17,r5,r17
1000cbac:	8822c03a 	cmpne	r17,r17,zero
1000cbb0:	8922b03a 	or	r17,r17,r4
1000cbb4:	0005883a 	mov	r2,zero
1000cbb8:	003f2406 	br	1000c84c <__subdf3+0x4dc>
1000cbbc:	01402034 	movhi	r5,128
1000cbc0:	0011883a 	mov	r8,zero
1000cbc4:	297fffc4 	addi	r5,r5,-1
1000cbc8:	047ffe04 	movi	r17,-8
1000cbcc:	0401ffc4 	movi	r16,2047
1000cbd0:	003e6a06 	br	1000c57c <__subdf3+0x20c>
1000cbd4:	2c62b03a 	or	r17,r5,r17
1000cbd8:	8822c03a 	cmpne	r17,r17,zero
1000cbdc:	0005883a 	mov	r2,zero
1000cbe0:	003fa506 	br	1000ca78 <__subdf3+0x708>
1000cbe4:	180b883a 	mov	r5,r3
1000cbe8:	3023883a 	mov	r17,r6
1000cbec:	003e0306 	br	1000c3fc <__subdf3+0x8c>
1000cbf0:	180b883a 	mov	r5,r3
1000cbf4:	3023883a 	mov	r17,r6
1000cbf8:	0401ffc4 	movi	r16,2047
1000cbfc:	003dff06 	br	1000c3fc <__subdf3+0x8c>
1000cc00:	113ff804 	addi	r4,r2,-32
1000cc04:	01c00804 	movi	r7,32
1000cc08:	2908d83a 	srl	r4,r5,r4
1000cc0c:	11c00a26 	beq	r2,r7,1000cc38 <__subdf3+0x8c8>
1000cc10:	01c01004 	movi	r7,64
1000cc14:	3885c83a 	sub	r2,r7,r2
1000cc18:	288a983a 	sll	r5,r5,r2
1000cc1c:	2c62b03a 	or	r17,r5,r17
1000cc20:	8822c03a 	cmpne	r17,r17,zero
1000cc24:	8922b03a 	or	r17,r17,r4
1000cc28:	0005883a 	mov	r2,zero
1000cc2c:	003f9206 	br	1000ca78 <__subdf3+0x708>
1000cc30:	000b883a 	mov	r5,zero
1000cc34:	003fdc06 	br	1000cba8 <__subdf3+0x838>
1000cc38:	000b883a 	mov	r5,zero
1000cc3c:	003ff706 	br	1000cc1c <__subdf3+0x8ac>

1000cc40 <__fixdfsi>:
1000cc40:	2806d53a 	srli	r3,r5,20
1000cc44:	00800434 	movhi	r2,16
1000cc48:	10bfffc4 	addi	r2,r2,-1
1000cc4c:	18c1ffcc 	andi	r3,r3,2047
1000cc50:	0180ff84 	movi	r6,1022
1000cc54:	2884703a 	and	r2,r5,r2
1000cc58:	280ad7fa 	srli	r5,r5,31
1000cc5c:	30c0130e 	bge	r6,r3,1000ccac <__fixdfsi+0x6c>
1000cc60:	01810744 	movi	r6,1053
1000cc64:	30c00d16 	blt	r6,r3,1000cc9c <__fixdfsi+0x5c>
1000cc68:	01810cc4 	movi	r6,1075
1000cc6c:	30cdc83a 	sub	r6,r6,r3
1000cc70:	01c007c4 	movi	r7,31
1000cc74:	10800434 	orhi	r2,r2,16
1000cc78:	39800e0e 	bge	r7,r6,1000ccb4 <__fixdfsi+0x74>
1000cc7c:	010104c4 	movi	r4,1043
1000cc80:	20c7c83a 	sub	r3,r4,r3
1000cc84:	10c6d83a 	srl	r3,r2,r3
1000cc88:	29403fcc 	andi	r5,r5,255
1000cc8c:	0145c83a 	sub	r2,zero,r5
1000cc90:	1884f03a 	xor	r2,r3,r2
1000cc94:	1145883a 	add	r2,r2,r5
1000cc98:	f800283a 	ret
1000cc9c:	00a00034 	movhi	r2,32768
1000cca0:	10bfffc4 	addi	r2,r2,-1
1000cca4:	2885883a 	add	r2,r5,r2
1000cca8:	f800283a 	ret
1000ccac:	0005883a 	mov	r2,zero
1000ccb0:	f800283a 	ret
1000ccb4:	18fefb44 	addi	r3,r3,-1043
1000ccb8:	2188d83a 	srl	r4,r4,r6
1000ccbc:	10c6983a 	sll	r3,r2,r3
1000ccc0:	20c6b03a 	or	r3,r4,r3
1000ccc4:	003ff006 	br	1000cc88 <__fixdfsi+0x48>

1000ccc8 <__floatsidf>:
1000ccc8:	defffd04 	addi	sp,sp,-12
1000cccc:	dc400115 	stw	r17,4(sp)
1000ccd0:	dfc00215 	stw	ra,8(sp)
1000ccd4:	dc000015 	stw	r16,0(sp)
1000ccd8:	2023883a 	mov	r17,r4
1000ccdc:	20001426 	beq	r4,zero,1000cd30 <__floatsidf+0x68>
1000cce0:	2020d7fa 	srli	r16,r4,31
1000cce4:	80000126 	beq	r16,zero,1000ccec <__floatsidf+0x24>
1000cce8:	0123c83a 	sub	r17,zero,r4
1000ccec:	8809883a 	mov	r4,r17
1000ccf0:	000ce3c0 	call	1000ce3c <__clzsi2>
1000ccf4:	01410784 	movi	r5,1054
1000ccf8:	00c00284 	movi	r3,10
1000ccfc:	288bc83a 	sub	r5,r5,r2
1000cd00:	18801c16 	blt	r3,r2,1000cd74 <__floatsidf+0xac>
1000cd04:	00c002c4 	movi	r3,11
1000cd08:	1887c83a 	sub	r3,r3,r2
1000cd0c:	88c8d83a 	srl	r4,r17,r3
1000cd10:	00c00434 	movhi	r3,16
1000cd14:	18ffffc4 	addi	r3,r3,-1
1000cd18:	10800544 	addi	r2,r2,21
1000cd1c:	20c8703a 	and	r4,r4,r3
1000cd20:	8884983a 	sll	r2,r17,r2
1000cd24:	28c1ffcc 	andi	r3,r5,2047
1000cd28:	800d883a 	mov	r6,r16
1000cd2c:	00000406 	br	1000cd40 <__floatsidf+0x78>
1000cd30:	000d883a 	mov	r6,zero
1000cd34:	0007883a 	mov	r3,zero
1000cd38:	0009883a 	mov	r4,zero
1000cd3c:	0005883a 	mov	r2,zero
1000cd40:	180a953a 	slli	r5,r3,20
1000cd44:	31803fcc 	andi	r6,r6,255
1000cd48:	00c00434 	movhi	r3,16
1000cd4c:	300c97fa 	slli	r6,r6,31
1000cd50:	18ffffc4 	addi	r3,r3,-1
1000cd54:	20c6703a 	and	r3,r4,r3
1000cd58:	1946b03a 	or	r3,r3,r5
1000cd5c:	1986b03a 	or	r3,r3,r6
1000cd60:	dfc00217 	ldw	ra,8(sp)
1000cd64:	dc400117 	ldw	r17,4(sp)
1000cd68:	dc000017 	ldw	r16,0(sp)
1000cd6c:	dec00304 	addi	sp,sp,12
1000cd70:	f800283a 	ret
1000cd74:	10fffd44 	addi	r3,r2,-11
1000cd78:	88c8983a 	sll	r4,r17,r3
1000cd7c:	00800434 	movhi	r2,16
1000cd80:	10bfffc4 	addi	r2,r2,-1
1000cd84:	2088703a 	and	r4,r4,r2
1000cd88:	28c1ffcc 	andi	r3,r5,2047
1000cd8c:	800d883a 	mov	r6,r16
1000cd90:	0005883a 	mov	r2,zero
1000cd94:	003fea06 	br	1000cd40 <__floatsidf+0x78>

1000cd98 <__floatunsidf>:
1000cd98:	defffe04 	addi	sp,sp,-8
1000cd9c:	dc000015 	stw	r16,0(sp)
1000cda0:	dfc00115 	stw	ra,4(sp)
1000cda4:	2021883a 	mov	r16,r4
1000cda8:	20001026 	beq	r4,zero,1000cdec <__floatunsidf+0x54>
1000cdac:	000ce3c0 	call	1000ce3c <__clzsi2>
1000cdb0:	01410784 	movi	r5,1054
1000cdb4:	100d883a 	mov	r6,r2
1000cdb8:	288bc83a 	sub	r5,r5,r2
1000cdbc:	00800284 	movi	r2,10
1000cdc0:	11801616 	blt	r2,r6,1000ce1c <__floatunsidf+0x84>
1000cdc4:	008002c4 	movi	r2,11
1000cdc8:	1185c83a 	sub	r2,r2,r6
1000cdcc:	8084d83a 	srl	r2,r16,r2
1000cdd0:	00c00434 	movhi	r3,16
1000cdd4:	31c00544 	addi	r7,r6,21
1000cdd8:	18ffffc4 	addi	r3,r3,-1
1000cddc:	81e0983a 	sll	r16,r16,r7
1000cde0:	10cc703a 	and	r6,r2,r3
1000cde4:	2941ffcc 	andi	r5,r5,2047
1000cde8:	00000206 	br	1000cdf4 <__floatunsidf+0x5c>
1000cdec:	000b883a 	mov	r5,zero
1000cdf0:	000d883a 	mov	r6,zero
1000cdf4:	280a953a 	slli	r5,r5,20
1000cdf8:	00c00434 	movhi	r3,16
1000cdfc:	18ffffc4 	addi	r3,r3,-1
1000ce00:	30c6703a 	and	r3,r6,r3
1000ce04:	8005883a 	mov	r2,r16
1000ce08:	1946b03a 	or	r3,r3,r5
1000ce0c:	dfc00117 	ldw	ra,4(sp)
1000ce10:	dc000017 	ldw	r16,0(sp)
1000ce14:	dec00204 	addi	sp,sp,8
1000ce18:	f800283a 	ret
1000ce1c:	31bffd44 	addi	r6,r6,-11
1000ce20:	818c983a 	sll	r6,r16,r6
1000ce24:	00800434 	movhi	r2,16
1000ce28:	10bfffc4 	addi	r2,r2,-1
1000ce2c:	2941ffcc 	andi	r5,r5,2047
1000ce30:	0021883a 	mov	r16,zero
1000ce34:	308c703a 	and	r6,r6,r2
1000ce38:	003fee06 	br	1000cdf4 <__floatunsidf+0x5c>

1000ce3c <__clzsi2>:
1000ce3c:	00bfffd4 	movui	r2,65535
1000ce40:	11000b36 	bltu	r2,r4,1000ce70 <__clzsi2+0x34>
1000ce44:	00803fc4 	movi	r2,255
1000ce48:	1100122e 	bgeu	r2,r4,1000ce94 <__clzsi2+0x58>
1000ce4c:	00c00204 	movi	r3,8
1000ce50:	01400604 	movi	r5,24
1000ce54:	20c8d83a 	srl	r4,r4,r3
1000ce58:	00840074 	movhi	r2,4097
1000ce5c:	10bde504 	addi	r2,r2,-2156
1000ce60:	1109883a 	add	r4,r2,r4
1000ce64:	20800003 	ldbu	r2,0(r4)
1000ce68:	2885c83a 	sub	r2,r5,r2
1000ce6c:	f800283a 	ret
1000ce70:	00804034 	movhi	r2,256
1000ce74:	10bfffc4 	addi	r2,r2,-1
1000ce78:	11000336 	bltu	r2,r4,1000ce88 <__clzsi2+0x4c>
1000ce7c:	00c00404 	movi	r3,16
1000ce80:	180b883a 	mov	r5,r3
1000ce84:	003ff306 	br	1000ce54 <__clzsi2+0x18>
1000ce88:	00c00604 	movi	r3,24
1000ce8c:	01400204 	movi	r5,8
1000ce90:	003ff006 	br	1000ce54 <__clzsi2+0x18>
1000ce94:	0007883a 	mov	r3,zero
1000ce98:	01400804 	movi	r5,32
1000ce9c:	003fed06 	br	1000ce54 <__clzsi2+0x18>

1000cea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000cea0:	defffe04 	addi	sp,sp,-8
1000cea4:	dfc00115 	stw	ra,4(sp)
1000cea8:	df000015 	stw	fp,0(sp)
1000ceac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ceb0:	00840074 	movhi	r2,4097
1000ceb4:	1084ea04 	addi	r2,r2,5032
1000ceb8:	10800017 	ldw	r2,0(r2)
1000cebc:	10000526 	beq	r2,zero,1000ced4 <alt_get_errno+0x34>
1000cec0:	00840074 	movhi	r2,4097
1000cec4:	1084ea04 	addi	r2,r2,5032
1000cec8:	10800017 	ldw	r2,0(r2)
1000cecc:	103ee83a 	callr	r2
1000ced0:	00000206 	br	1000cedc <alt_get_errno+0x3c>
1000ced4:	00840074 	movhi	r2,4097
1000ced8:	108bb204 	addi	r2,r2,11976
}
1000cedc:	e037883a 	mov	sp,fp
1000cee0:	dfc00117 	ldw	ra,4(sp)
1000cee4:	df000017 	ldw	fp,0(sp)
1000cee8:	dec00204 	addi	sp,sp,8
1000ceec:	f800283a 	ret

1000cef0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000cef0:	defffb04 	addi	sp,sp,-20
1000cef4:	dfc00415 	stw	ra,16(sp)
1000cef8:	df000315 	stw	fp,12(sp)
1000cefc:	df000304 	addi	fp,sp,12
1000cf00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000cf04:	e0bfff17 	ldw	r2,-4(fp)
1000cf08:	10000816 	blt	r2,zero,1000cf2c <close+0x3c>
1000cf0c:	e13fff17 	ldw	r4,-4(fp)
1000cf10:	01400304 	movi	r5,12
1000cf14:	000a67c0 	call	1000a67c <__mulsi3>
1000cf18:	1007883a 	mov	r3,r2
1000cf1c:	00840074 	movhi	r2,4097
1000cf20:	10806504 	addi	r2,r2,404
1000cf24:	1885883a 	add	r2,r3,r2
1000cf28:	00000106 	br	1000cf30 <close+0x40>
1000cf2c:	0005883a 	mov	r2,zero
1000cf30:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000cf34:	e0bffd17 	ldw	r2,-12(fp)
1000cf38:	10001926 	beq	r2,zero,1000cfa0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000cf3c:	e0bffd17 	ldw	r2,-12(fp)
1000cf40:	10800017 	ldw	r2,0(r2)
1000cf44:	10800417 	ldw	r2,16(r2)
1000cf48:	10000626 	beq	r2,zero,1000cf64 <close+0x74>
1000cf4c:	e0bffd17 	ldw	r2,-12(fp)
1000cf50:	10800017 	ldw	r2,0(r2)
1000cf54:	10800417 	ldw	r2,16(r2)
1000cf58:	e13ffd17 	ldw	r4,-12(fp)
1000cf5c:	103ee83a 	callr	r2
1000cf60:	00000106 	br	1000cf68 <close+0x78>
1000cf64:	0005883a 	mov	r2,zero
1000cf68:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000cf6c:	e13fff17 	ldw	r4,-4(fp)
1000cf70:	000d6140 	call	1000d614 <alt_release_fd>
    if (rval < 0)
1000cf74:	e0bffe17 	ldw	r2,-8(fp)
1000cf78:	1000070e 	bge	r2,zero,1000cf98 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000cf7c:	000cea00 	call	1000cea0 <alt_get_errno>
1000cf80:	1007883a 	mov	r3,r2
1000cf84:	e0bffe17 	ldw	r2,-8(fp)
1000cf88:	0085c83a 	sub	r2,zero,r2
1000cf8c:	18800015 	stw	r2,0(r3)
      return -1;
1000cf90:	00bfffc4 	movi	r2,-1
1000cf94:	00000706 	br	1000cfb4 <close+0xc4>
    }
    return 0;
1000cf98:	0005883a 	mov	r2,zero
1000cf9c:	00000506 	br	1000cfb4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000cfa0:	000cea00 	call	1000cea0 <alt_get_errno>
1000cfa4:	1007883a 	mov	r3,r2
1000cfa8:	00801444 	movi	r2,81
1000cfac:	18800015 	stw	r2,0(r3)
    return -1;
1000cfb0:	00bfffc4 	movi	r2,-1
  }
}
1000cfb4:	e037883a 	mov	sp,fp
1000cfb8:	dfc00117 	ldw	ra,4(sp)
1000cfbc:	df000017 	ldw	fp,0(sp)
1000cfc0:	dec00204 	addi	sp,sp,8
1000cfc4:	f800283a 	ret

1000cfc8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000cfc8:	defffc04 	addi	sp,sp,-16
1000cfcc:	df000315 	stw	fp,12(sp)
1000cfd0:	df000304 	addi	fp,sp,12
1000cfd4:	e13ffd15 	stw	r4,-12(fp)
1000cfd8:	e17ffe15 	stw	r5,-8(fp)
1000cfdc:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000cfe0:	e0bfff17 	ldw	r2,-4(fp)
}
1000cfe4:	e037883a 	mov	sp,fp
1000cfe8:	df000017 	ldw	fp,0(sp)
1000cfec:	dec00104 	addi	sp,sp,4
1000cff0:	f800283a 	ret

1000cff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000cff4:	defffe04 	addi	sp,sp,-8
1000cff8:	dfc00115 	stw	ra,4(sp)
1000cffc:	df000015 	stw	fp,0(sp)
1000d000:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d004:	00840074 	movhi	r2,4097
1000d008:	1084ea04 	addi	r2,r2,5032
1000d00c:	10800017 	ldw	r2,0(r2)
1000d010:	10000526 	beq	r2,zero,1000d028 <alt_get_errno+0x34>
1000d014:	00840074 	movhi	r2,4097
1000d018:	1084ea04 	addi	r2,r2,5032
1000d01c:	10800017 	ldw	r2,0(r2)
1000d020:	103ee83a 	callr	r2
1000d024:	00000206 	br	1000d030 <alt_get_errno+0x3c>
1000d028:	00840074 	movhi	r2,4097
1000d02c:	108bb204 	addi	r2,r2,11976
}
1000d030:	e037883a 	mov	sp,fp
1000d034:	dfc00117 	ldw	ra,4(sp)
1000d038:	df000017 	ldw	fp,0(sp)
1000d03c:	dec00204 	addi	sp,sp,8
1000d040:	f800283a 	ret

1000d044 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000d044:	defffb04 	addi	sp,sp,-20
1000d048:	dfc00415 	stw	ra,16(sp)
1000d04c:	df000315 	stw	fp,12(sp)
1000d050:	df000304 	addi	fp,sp,12
1000d054:	e13ffe15 	stw	r4,-8(fp)
1000d058:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d05c:	e0bffe17 	ldw	r2,-8(fp)
1000d060:	10000816 	blt	r2,zero,1000d084 <fstat+0x40>
1000d064:	e13ffe17 	ldw	r4,-8(fp)
1000d068:	01400304 	movi	r5,12
1000d06c:	000a67c0 	call	1000a67c <__mulsi3>
1000d070:	1007883a 	mov	r3,r2
1000d074:	00840074 	movhi	r2,4097
1000d078:	10806504 	addi	r2,r2,404
1000d07c:	1885883a 	add	r2,r3,r2
1000d080:	00000106 	br	1000d088 <fstat+0x44>
1000d084:	0005883a 	mov	r2,zero
1000d088:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000d08c:	e0bffd17 	ldw	r2,-12(fp)
1000d090:	10001026 	beq	r2,zero,1000d0d4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000d094:	e0bffd17 	ldw	r2,-12(fp)
1000d098:	10800017 	ldw	r2,0(r2)
1000d09c:	10800817 	ldw	r2,32(r2)
1000d0a0:	10000726 	beq	r2,zero,1000d0c0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000d0a4:	e0bffd17 	ldw	r2,-12(fp)
1000d0a8:	10800017 	ldw	r2,0(r2)
1000d0ac:	10800817 	ldw	r2,32(r2)
1000d0b0:	e13ffd17 	ldw	r4,-12(fp)
1000d0b4:	e17fff17 	ldw	r5,-4(fp)
1000d0b8:	103ee83a 	callr	r2
1000d0bc:	00000a06 	br	1000d0e8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000d0c0:	e0bfff17 	ldw	r2,-4(fp)
1000d0c4:	00c80004 	movi	r3,8192
1000d0c8:	10c00115 	stw	r3,4(r2)
      return 0;
1000d0cc:	0005883a 	mov	r2,zero
1000d0d0:	00000506 	br	1000d0e8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d0d4:	000cff40 	call	1000cff4 <alt_get_errno>
1000d0d8:	1007883a 	mov	r3,r2
1000d0dc:	00801444 	movi	r2,81
1000d0e0:	18800015 	stw	r2,0(r3)
    return -1;
1000d0e4:	00bfffc4 	movi	r2,-1
  }
}
1000d0e8:	e037883a 	mov	sp,fp
1000d0ec:	dfc00117 	ldw	ra,4(sp)
1000d0f0:	df000017 	ldw	fp,0(sp)
1000d0f4:	dec00204 	addi	sp,sp,8
1000d0f8:	f800283a 	ret

1000d0fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d0fc:	defffe04 	addi	sp,sp,-8
1000d100:	dfc00115 	stw	ra,4(sp)
1000d104:	df000015 	stw	fp,0(sp)
1000d108:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d10c:	00840074 	movhi	r2,4097
1000d110:	1084ea04 	addi	r2,r2,5032
1000d114:	10800017 	ldw	r2,0(r2)
1000d118:	10000526 	beq	r2,zero,1000d130 <alt_get_errno+0x34>
1000d11c:	00840074 	movhi	r2,4097
1000d120:	1084ea04 	addi	r2,r2,5032
1000d124:	10800017 	ldw	r2,0(r2)
1000d128:	103ee83a 	callr	r2
1000d12c:	00000206 	br	1000d138 <alt_get_errno+0x3c>
1000d130:	00840074 	movhi	r2,4097
1000d134:	108bb204 	addi	r2,r2,11976
}
1000d138:	e037883a 	mov	sp,fp
1000d13c:	dfc00117 	ldw	ra,4(sp)
1000d140:	df000017 	ldw	fp,0(sp)
1000d144:	dec00204 	addi	sp,sp,8
1000d148:	f800283a 	ret

1000d14c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000d14c:	deffed04 	addi	sp,sp,-76
1000d150:	dfc01215 	stw	ra,72(sp)
1000d154:	df001115 	stw	fp,68(sp)
1000d158:	df001104 	addi	fp,sp,68
1000d15c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d160:	e0bfff17 	ldw	r2,-4(fp)
1000d164:	10000816 	blt	r2,zero,1000d188 <isatty+0x3c>
1000d168:	e13fff17 	ldw	r4,-4(fp)
1000d16c:	01400304 	movi	r5,12
1000d170:	000a67c0 	call	1000a67c <__mulsi3>
1000d174:	1007883a 	mov	r3,r2
1000d178:	00840074 	movhi	r2,4097
1000d17c:	10806504 	addi	r2,r2,404
1000d180:	1885883a 	add	r2,r3,r2
1000d184:	00000106 	br	1000d18c <isatty+0x40>
1000d188:	0005883a 	mov	r2,zero
1000d18c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000d190:	e0bfef17 	ldw	r2,-68(fp)
1000d194:	10000e26 	beq	r2,zero,1000d1d0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000d198:	e0bfef17 	ldw	r2,-68(fp)
1000d19c:	10800017 	ldw	r2,0(r2)
1000d1a0:	10800817 	ldw	r2,32(r2)
1000d1a4:	1000021e 	bne	r2,zero,1000d1b0 <isatty+0x64>
    {
      return 1;
1000d1a8:	00800044 	movi	r2,1
1000d1ac:	00000d06 	br	1000d1e4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000d1b0:	e0bff004 	addi	r2,fp,-64
1000d1b4:	e13fff17 	ldw	r4,-4(fp)
1000d1b8:	100b883a 	mov	r5,r2
1000d1bc:	000d0440 	call	1000d044 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000d1c0:	e0bff117 	ldw	r2,-60(fp)
1000d1c4:	10880020 	cmpeqi	r2,r2,8192
1000d1c8:	10803fcc 	andi	r2,r2,255
1000d1cc:	00000506 	br	1000d1e4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d1d0:	000d0fc0 	call	1000d0fc <alt_get_errno>
1000d1d4:	1007883a 	mov	r3,r2
1000d1d8:	00801444 	movi	r2,81
1000d1dc:	18800015 	stw	r2,0(r3)
    return 0;
1000d1e0:	0005883a 	mov	r2,zero
  }
}
1000d1e4:	e037883a 	mov	sp,fp
1000d1e8:	dfc00117 	ldw	ra,4(sp)
1000d1ec:	df000017 	ldw	fp,0(sp)
1000d1f0:	dec00204 	addi	sp,sp,8
1000d1f4:	f800283a 	ret

1000d1f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000d1f8:	defffc04 	addi	sp,sp,-16
1000d1fc:	df000315 	stw	fp,12(sp)
1000d200:	df000304 	addi	fp,sp,12
1000d204:	e13ffd15 	stw	r4,-12(fp)
1000d208:	e17ffe15 	stw	r5,-8(fp)
1000d20c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000d210:	e0fffe17 	ldw	r3,-8(fp)
1000d214:	e0bffd17 	ldw	r2,-12(fp)
1000d218:	18800c26 	beq	r3,r2,1000d24c <alt_load_section+0x54>
  {
    while( to != end )
1000d21c:	00000806 	br	1000d240 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000d220:	e0bffe17 	ldw	r2,-8(fp)
1000d224:	10c00104 	addi	r3,r2,4
1000d228:	e0fffe15 	stw	r3,-8(fp)
1000d22c:	e0fffd17 	ldw	r3,-12(fp)
1000d230:	19000104 	addi	r4,r3,4
1000d234:	e13ffd15 	stw	r4,-12(fp)
1000d238:	18c00017 	ldw	r3,0(r3)
1000d23c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000d240:	e0fffe17 	ldw	r3,-8(fp)
1000d244:	e0bfff17 	ldw	r2,-4(fp)
1000d248:	18bff51e 	bne	r3,r2,1000d220 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
1000d24c:	e037883a 	mov	sp,fp
1000d250:	df000017 	ldw	fp,0(sp)
1000d254:	dec00104 	addi	sp,sp,4
1000d258:	f800283a 	ret

1000d25c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000d25c:	defffe04 	addi	sp,sp,-8
1000d260:	dfc00115 	stw	ra,4(sp)
1000d264:	df000015 	stw	fp,0(sp)
1000d268:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000d26c:	01040074 	movhi	r4,4097
1000d270:	2104ef04 	addi	r4,r4,5052
1000d274:	01440074 	movhi	r5,4097
1000d278:	297e3204 	addi	r5,r5,-1848
1000d27c:	01840074 	movhi	r6,4097
1000d280:	3184ef04 	addi	r6,r6,5052
1000d284:	000d1f80 	call	1000d1f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000d288:	01040034 	movhi	r4,4096
1000d28c:	21000804 	addi	r4,r4,32
1000d290:	01440034 	movhi	r5,4096
1000d294:	29400804 	addi	r5,r5,32
1000d298:	01840034 	movhi	r6,4096
1000d29c:	31806f04 	addi	r6,r6,444
1000d2a0:	000d1f80 	call	1000d1f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000d2a4:	01040074 	movhi	r4,4097
1000d2a8:	213d5604 	addi	r4,r4,-2728
1000d2ac:	01440074 	movhi	r5,4097
1000d2b0:	297d5604 	addi	r5,r5,-2728
1000d2b4:	01840074 	movhi	r6,4097
1000d2b8:	31be3204 	addi	r6,r6,-1848
1000d2bc:	000d1f80 	call	1000d1f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000d2c0:	000e4d00 	call	1000e4d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000d2c4:	000e6980 	call	1000e698 <alt_icache_flush_all>
}
1000d2c8:	e037883a 	mov	sp,fp
1000d2cc:	dfc00117 	ldw	ra,4(sp)
1000d2d0:	df000017 	ldw	fp,0(sp)
1000d2d4:	dec00204 	addi	sp,sp,8
1000d2d8:	f800283a 	ret

1000d2dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d2dc:	defffe04 	addi	sp,sp,-8
1000d2e0:	dfc00115 	stw	ra,4(sp)
1000d2e4:	df000015 	stw	fp,0(sp)
1000d2e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d2ec:	00840074 	movhi	r2,4097
1000d2f0:	1084ea04 	addi	r2,r2,5032
1000d2f4:	10800017 	ldw	r2,0(r2)
1000d2f8:	10000526 	beq	r2,zero,1000d310 <alt_get_errno+0x34>
1000d2fc:	00840074 	movhi	r2,4097
1000d300:	1084ea04 	addi	r2,r2,5032
1000d304:	10800017 	ldw	r2,0(r2)
1000d308:	103ee83a 	callr	r2
1000d30c:	00000206 	br	1000d318 <alt_get_errno+0x3c>
1000d310:	00840074 	movhi	r2,4097
1000d314:	108bb204 	addi	r2,r2,11976
}
1000d318:	e037883a 	mov	sp,fp
1000d31c:	dfc00117 	ldw	ra,4(sp)
1000d320:	df000017 	ldw	fp,0(sp)
1000d324:	dec00204 	addi	sp,sp,8
1000d328:	f800283a 	ret

1000d32c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000d32c:	defff904 	addi	sp,sp,-28
1000d330:	dfc00615 	stw	ra,24(sp)
1000d334:	df000515 	stw	fp,20(sp)
1000d338:	df000504 	addi	fp,sp,20
1000d33c:	e13ffd15 	stw	r4,-12(fp)
1000d340:	e17ffe15 	stw	r5,-8(fp)
1000d344:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000d348:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d34c:	e0bffd17 	ldw	r2,-12(fp)
1000d350:	10000816 	blt	r2,zero,1000d374 <lseek+0x48>
1000d354:	e13ffd17 	ldw	r4,-12(fp)
1000d358:	01400304 	movi	r5,12
1000d35c:	000a67c0 	call	1000a67c <__mulsi3>
1000d360:	1007883a 	mov	r3,r2
1000d364:	00840074 	movhi	r2,4097
1000d368:	10806504 	addi	r2,r2,404
1000d36c:	1885883a 	add	r2,r3,r2
1000d370:	00000106 	br	1000d378 <lseek+0x4c>
1000d374:	0005883a 	mov	r2,zero
1000d378:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000d37c:	e0bffc17 	ldw	r2,-16(fp)
1000d380:	10001026 	beq	r2,zero,1000d3c4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000d384:	e0bffc17 	ldw	r2,-16(fp)
1000d388:	10800017 	ldw	r2,0(r2)
1000d38c:	10800717 	ldw	r2,28(r2)
1000d390:	10000926 	beq	r2,zero,1000d3b8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000d394:	e0bffc17 	ldw	r2,-16(fp)
1000d398:	10800017 	ldw	r2,0(r2)
1000d39c:	10800717 	ldw	r2,28(r2)
1000d3a0:	e13ffc17 	ldw	r4,-16(fp)
1000d3a4:	e17ffe17 	ldw	r5,-8(fp)
1000d3a8:	e1bfff17 	ldw	r6,-4(fp)
1000d3ac:	103ee83a 	callr	r2
1000d3b0:	e0bffb15 	stw	r2,-20(fp)
1000d3b4:	00000506 	br	1000d3cc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000d3b8:	00bfde84 	movi	r2,-134
1000d3bc:	e0bffb15 	stw	r2,-20(fp)
1000d3c0:	00000206 	br	1000d3cc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000d3c4:	00bfebc4 	movi	r2,-81
1000d3c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000d3cc:	e0bffb17 	ldw	r2,-20(fp)
1000d3d0:	1000070e 	bge	r2,zero,1000d3f0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000d3d4:	000d2dc0 	call	1000d2dc <alt_get_errno>
1000d3d8:	1007883a 	mov	r3,r2
1000d3dc:	e0bffb17 	ldw	r2,-20(fp)
1000d3e0:	0085c83a 	sub	r2,zero,r2
1000d3e4:	18800015 	stw	r2,0(r3)
    rc = -1;
1000d3e8:	00bfffc4 	movi	r2,-1
1000d3ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000d3f0:	e0bffb17 	ldw	r2,-20(fp)
}
1000d3f4:	e037883a 	mov	sp,fp
1000d3f8:	dfc00117 	ldw	ra,4(sp)
1000d3fc:	df000017 	ldw	fp,0(sp)
1000d400:	dec00204 	addi	sp,sp,8
1000d404:	f800283a 	ret

1000d408 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000d408:	defffd04 	addi	sp,sp,-12
1000d40c:	dfc00215 	stw	ra,8(sp)
1000d410:	df000115 	stw	fp,4(sp)
1000d414:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000d418:	0009883a 	mov	r4,zero
1000d41c:	000d8cc0 	call	1000d8cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000d420:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000d424:	000d9000 	call	1000d900 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000d428:	01040074 	movhi	r4,4097
1000d42c:	213e2804 	addi	r4,r4,-1888
1000d430:	01440074 	movhi	r5,4097
1000d434:	297e2804 	addi	r5,r5,-1888
1000d438:	01840074 	movhi	r6,4097
1000d43c:	31be2804 	addi	r6,r6,-1888
1000d440:	000ea640 	call	1000ea64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000d444:	000e5e00 	call	1000e5e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000d448:	01040074 	movhi	r4,4097
1000d44c:	21398f04 	addi	r4,r4,-6596
1000d450:	000f1b40 	call	1000f1b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000d454:	d126d617 	ldw	r4,-25768(gp)
1000d458:	d0e6d717 	ldw	r3,-25764(gp)
1000d45c:	d0a6d817 	ldw	r2,-25760(gp)
1000d460:	180b883a 	mov	r5,r3
1000d464:	100d883a 	mov	r6,r2
1000d468:	000028c0 	call	1000028c <main>
1000d46c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000d470:	01000044 	movi	r4,1
1000d474:	000cef00 	call	1000cef0 <close>
  exit (result);
1000d478:	e13fff17 	ldw	r4,-4(fp)
1000d47c:	000f1c80 	call	1000f1c8 <exit>

1000d480 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000d480:	defffe04 	addi	sp,sp,-8
1000d484:	df000115 	stw	fp,4(sp)
1000d488:	df000104 	addi	fp,sp,4
1000d48c:	e13fff15 	stw	r4,-4(fp)
}
1000d490:	e037883a 	mov	sp,fp
1000d494:	df000017 	ldw	fp,0(sp)
1000d498:	dec00104 	addi	sp,sp,4
1000d49c:	f800283a 	ret

1000d4a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000d4a0:	defffe04 	addi	sp,sp,-8
1000d4a4:	df000115 	stw	fp,4(sp)
1000d4a8:	df000104 	addi	fp,sp,4
1000d4ac:	e13fff15 	stw	r4,-4(fp)
}
1000d4b0:	e037883a 	mov	sp,fp
1000d4b4:	df000017 	ldw	fp,0(sp)
1000d4b8:	dec00104 	addi	sp,sp,4
1000d4bc:	f800283a 	ret

1000d4c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d4c0:	defffe04 	addi	sp,sp,-8
1000d4c4:	dfc00115 	stw	ra,4(sp)
1000d4c8:	df000015 	stw	fp,0(sp)
1000d4cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d4d0:	00840074 	movhi	r2,4097
1000d4d4:	1084ea04 	addi	r2,r2,5032
1000d4d8:	10800017 	ldw	r2,0(r2)
1000d4dc:	10000526 	beq	r2,zero,1000d4f4 <alt_get_errno+0x34>
1000d4e0:	00840074 	movhi	r2,4097
1000d4e4:	1084ea04 	addi	r2,r2,5032
1000d4e8:	10800017 	ldw	r2,0(r2)
1000d4ec:	103ee83a 	callr	r2
1000d4f0:	00000206 	br	1000d4fc <alt_get_errno+0x3c>
1000d4f4:	00840074 	movhi	r2,4097
1000d4f8:	108bb204 	addi	r2,r2,11976
}
1000d4fc:	e037883a 	mov	sp,fp
1000d500:	dfc00117 	ldw	ra,4(sp)
1000d504:	df000017 	ldw	fp,0(sp)
1000d508:	dec00204 	addi	sp,sp,8
1000d50c:	f800283a 	ret

1000d510 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000d510:	defff904 	addi	sp,sp,-28
1000d514:	dfc00615 	stw	ra,24(sp)
1000d518:	df000515 	stw	fp,20(sp)
1000d51c:	df000504 	addi	fp,sp,20
1000d520:	e13ffd15 	stw	r4,-12(fp)
1000d524:	e17ffe15 	stw	r5,-8(fp)
1000d528:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d52c:	e0bffd17 	ldw	r2,-12(fp)
1000d530:	10000816 	blt	r2,zero,1000d554 <read+0x44>
1000d534:	e13ffd17 	ldw	r4,-12(fp)
1000d538:	01400304 	movi	r5,12
1000d53c:	000a67c0 	call	1000a67c <__mulsi3>
1000d540:	1007883a 	mov	r3,r2
1000d544:	00840074 	movhi	r2,4097
1000d548:	10806504 	addi	r2,r2,404
1000d54c:	1885883a 	add	r2,r3,r2
1000d550:	00000106 	br	1000d558 <read+0x48>
1000d554:	0005883a 	mov	r2,zero
1000d558:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000d55c:	e0bffb17 	ldw	r2,-20(fp)
1000d560:	10002226 	beq	r2,zero,1000d5ec <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000d564:	e0bffb17 	ldw	r2,-20(fp)
1000d568:	10800217 	ldw	r2,8(r2)
1000d56c:	108000cc 	andi	r2,r2,3
1000d570:	10800060 	cmpeqi	r2,r2,1
1000d574:	1000181e 	bne	r2,zero,1000d5d8 <read+0xc8>
        (fd->dev->read))
1000d578:	e0bffb17 	ldw	r2,-20(fp)
1000d57c:	10800017 	ldw	r2,0(r2)
1000d580:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000d584:	10001426 	beq	r2,zero,1000d5d8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000d588:	e0bffb17 	ldw	r2,-20(fp)
1000d58c:	10800017 	ldw	r2,0(r2)
1000d590:	10800517 	ldw	r2,20(r2)
1000d594:	e0ffff17 	ldw	r3,-4(fp)
1000d598:	e13ffb17 	ldw	r4,-20(fp)
1000d59c:	e17ffe17 	ldw	r5,-8(fp)
1000d5a0:	180d883a 	mov	r6,r3
1000d5a4:	103ee83a 	callr	r2
1000d5a8:	e0bffc15 	stw	r2,-16(fp)
1000d5ac:	e0bffc17 	ldw	r2,-16(fp)
1000d5b0:	1000070e 	bge	r2,zero,1000d5d0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000d5b4:	000d4c00 	call	1000d4c0 <alt_get_errno>
1000d5b8:	1007883a 	mov	r3,r2
1000d5bc:	e0bffc17 	ldw	r2,-16(fp)
1000d5c0:	0085c83a 	sub	r2,zero,r2
1000d5c4:	18800015 	stw	r2,0(r3)
          return -1;
1000d5c8:	00bfffc4 	movi	r2,-1
1000d5cc:	00000c06 	br	1000d600 <read+0xf0>
        }
        return rval;
1000d5d0:	e0bffc17 	ldw	r2,-16(fp)
1000d5d4:	00000a06 	br	1000d600 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000d5d8:	000d4c00 	call	1000d4c0 <alt_get_errno>
1000d5dc:	1007883a 	mov	r3,r2
1000d5e0:	00800344 	movi	r2,13
1000d5e4:	18800015 	stw	r2,0(r3)
1000d5e8:	00000406 	br	1000d5fc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000d5ec:	000d4c00 	call	1000d4c0 <alt_get_errno>
1000d5f0:	1007883a 	mov	r3,r2
1000d5f4:	00801444 	movi	r2,81
1000d5f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000d5fc:	00bfffc4 	movi	r2,-1
}
1000d600:	e037883a 	mov	sp,fp
1000d604:	dfc00117 	ldw	ra,4(sp)
1000d608:	df000017 	ldw	fp,0(sp)
1000d60c:	dec00204 	addi	sp,sp,8
1000d610:	f800283a 	ret

1000d614 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000d614:	defffc04 	addi	sp,sp,-16
1000d618:	dfc00315 	stw	ra,12(sp)
1000d61c:	df000215 	stw	fp,8(sp)
1000d620:	dc000115 	stw	r16,4(sp)
1000d624:	df000204 	addi	fp,sp,8
1000d628:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000d62c:	e0bffe17 	ldw	r2,-8(fp)
1000d630:	108000d0 	cmplti	r2,r2,3
1000d634:	1000111e 	bne	r2,zero,1000d67c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000d638:	04040074 	movhi	r16,4097
1000d63c:	84006504 	addi	r16,r16,404
1000d640:	e0bffe17 	ldw	r2,-8(fp)
1000d644:	1009883a 	mov	r4,r2
1000d648:	01400304 	movi	r5,12
1000d64c:	000a67c0 	call	1000a67c <__mulsi3>
1000d650:	8085883a 	add	r2,r16,r2
1000d654:	10800204 	addi	r2,r2,8
1000d658:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000d65c:	04040074 	movhi	r16,4097
1000d660:	84006504 	addi	r16,r16,404
1000d664:	e0bffe17 	ldw	r2,-8(fp)
1000d668:	1009883a 	mov	r4,r2
1000d66c:	01400304 	movi	r5,12
1000d670:	000a67c0 	call	1000a67c <__mulsi3>
1000d674:	8085883a 	add	r2,r16,r2
1000d678:	10000015 	stw	zero,0(r2)
  }
}
1000d67c:	e6ffff04 	addi	sp,fp,-4
1000d680:	dfc00217 	ldw	ra,8(sp)
1000d684:	df000117 	ldw	fp,4(sp)
1000d688:	dc000017 	ldw	r16,0(sp)
1000d68c:	dec00304 	addi	sp,sp,12
1000d690:	f800283a 	ret

1000d694 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000d694:	defff904 	addi	sp,sp,-28
1000d698:	df000615 	stw	fp,24(sp)
1000d69c:	df000604 	addi	fp,sp,24
1000d6a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d6a4:	0005303a 	rdctl	r2,status
1000d6a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d6ac:	e0fffc17 	ldw	r3,-16(fp)
1000d6b0:	00bfff84 	movi	r2,-2
1000d6b4:	1884703a 	and	r2,r3,r2
1000d6b8:	1001703a 	wrctl	status,r2
  
  return context;
1000d6bc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000d6c0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000d6c4:	d0a00e17 	ldw	r2,-32712(gp)
1000d6c8:	10c000c4 	addi	r3,r2,3
1000d6cc:	00bfff04 	movi	r2,-4
1000d6d0:	1884703a 	and	r2,r3,r2
1000d6d4:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000d6d8:	d0e00e17 	ldw	r3,-32712(gp)
1000d6dc:	e0bfff17 	ldw	r2,-4(fp)
1000d6e0:	1887883a 	add	r3,r3,r2
1000d6e4:	00860034 	movhi	r2,6144
1000d6e8:	10800004 	addi	r2,r2,0
1000d6ec:	10c0062e 	bgeu	r2,r3,1000d708 <sbrk+0x74>
1000d6f0:	e0bffa17 	ldw	r2,-24(fp)
1000d6f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d6f8:	e0bffd17 	ldw	r2,-12(fp)
1000d6fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000d700:	00bfffc4 	movi	r2,-1
1000d704:	00000b06 	br	1000d734 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000d708:	d0a00e17 	ldw	r2,-32712(gp)
1000d70c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000d710:	d0e00e17 	ldw	r3,-32712(gp)
1000d714:	e0bfff17 	ldw	r2,-4(fp)
1000d718:	1885883a 	add	r2,r3,r2
1000d71c:	d0a00e15 	stw	r2,-32712(gp)
1000d720:	e0bffa17 	ldw	r2,-24(fp)
1000d724:	e0bffe15 	stw	r2,-8(fp)
1000d728:	e0bffe17 	ldw	r2,-8(fp)
1000d72c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000d730:	e0bffb17 	ldw	r2,-20(fp)
} 
1000d734:	e037883a 	mov	sp,fp
1000d738:	df000017 	ldw	fp,0(sp)
1000d73c:	dec00104 	addi	sp,sp,4
1000d740:	f800283a 	ret

1000d744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d744:	defffe04 	addi	sp,sp,-8
1000d748:	dfc00115 	stw	ra,4(sp)
1000d74c:	df000015 	stw	fp,0(sp)
1000d750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d754:	00840074 	movhi	r2,4097
1000d758:	1084ea04 	addi	r2,r2,5032
1000d75c:	10800017 	ldw	r2,0(r2)
1000d760:	10000526 	beq	r2,zero,1000d778 <alt_get_errno+0x34>
1000d764:	00840074 	movhi	r2,4097
1000d768:	1084ea04 	addi	r2,r2,5032
1000d76c:	10800017 	ldw	r2,0(r2)
1000d770:	103ee83a 	callr	r2
1000d774:	00000206 	br	1000d780 <alt_get_errno+0x3c>
1000d778:	00840074 	movhi	r2,4097
1000d77c:	108bb204 	addi	r2,r2,11976
}
1000d780:	e037883a 	mov	sp,fp
1000d784:	dfc00117 	ldw	ra,4(sp)
1000d788:	df000017 	ldw	fp,0(sp)
1000d78c:	dec00204 	addi	sp,sp,8
1000d790:	f800283a 	ret

1000d794 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000d794:	defff904 	addi	sp,sp,-28
1000d798:	dfc00615 	stw	ra,24(sp)
1000d79c:	df000515 	stw	fp,20(sp)
1000d7a0:	df000504 	addi	fp,sp,20
1000d7a4:	e13ffd15 	stw	r4,-12(fp)
1000d7a8:	e17ffe15 	stw	r5,-8(fp)
1000d7ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d7b0:	e0bffd17 	ldw	r2,-12(fp)
1000d7b4:	10000816 	blt	r2,zero,1000d7d8 <write+0x44>
1000d7b8:	e13ffd17 	ldw	r4,-12(fp)
1000d7bc:	01400304 	movi	r5,12
1000d7c0:	000a67c0 	call	1000a67c <__mulsi3>
1000d7c4:	1007883a 	mov	r3,r2
1000d7c8:	00840074 	movhi	r2,4097
1000d7cc:	10806504 	addi	r2,r2,404
1000d7d0:	1885883a 	add	r2,r3,r2
1000d7d4:	00000106 	br	1000d7dc <write+0x48>
1000d7d8:	0005883a 	mov	r2,zero
1000d7dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000d7e0:	e0bffb17 	ldw	r2,-20(fp)
1000d7e4:	10002126 	beq	r2,zero,1000d86c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000d7e8:	e0bffb17 	ldw	r2,-20(fp)
1000d7ec:	10800217 	ldw	r2,8(r2)
1000d7f0:	108000cc 	andi	r2,r2,3
1000d7f4:	10001826 	beq	r2,zero,1000d858 <write+0xc4>
1000d7f8:	e0bffb17 	ldw	r2,-20(fp)
1000d7fc:	10800017 	ldw	r2,0(r2)
1000d800:	10800617 	ldw	r2,24(r2)
1000d804:	10001426 	beq	r2,zero,1000d858 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000d808:	e0bffb17 	ldw	r2,-20(fp)
1000d80c:	10800017 	ldw	r2,0(r2)
1000d810:	10800617 	ldw	r2,24(r2)
1000d814:	e0ffff17 	ldw	r3,-4(fp)
1000d818:	e13ffb17 	ldw	r4,-20(fp)
1000d81c:	e17ffe17 	ldw	r5,-8(fp)
1000d820:	180d883a 	mov	r6,r3
1000d824:	103ee83a 	callr	r2
1000d828:	e0bffc15 	stw	r2,-16(fp)
1000d82c:	e0bffc17 	ldw	r2,-16(fp)
1000d830:	1000070e 	bge	r2,zero,1000d850 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000d834:	000d7440 	call	1000d744 <alt_get_errno>
1000d838:	1007883a 	mov	r3,r2
1000d83c:	e0bffc17 	ldw	r2,-16(fp)
1000d840:	0085c83a 	sub	r2,zero,r2
1000d844:	18800015 	stw	r2,0(r3)
        return -1;
1000d848:	00bfffc4 	movi	r2,-1
1000d84c:	00000c06 	br	1000d880 <write+0xec>
      }
      return rval;
1000d850:	e0bffc17 	ldw	r2,-16(fp)
1000d854:	00000a06 	br	1000d880 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000d858:	000d7440 	call	1000d744 <alt_get_errno>
1000d85c:	1007883a 	mov	r3,r2
1000d860:	00800344 	movi	r2,13
1000d864:	18800015 	stw	r2,0(r3)
1000d868:	00000406 	br	1000d87c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000d86c:	000d7440 	call	1000d744 <alt_get_errno>
1000d870:	1007883a 	mov	r3,r2
1000d874:	00801444 	movi	r2,81
1000d878:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000d87c:	00bfffc4 	movi	r2,-1
}
1000d880:	e037883a 	mov	sp,fp
1000d884:	dfc00117 	ldw	ra,4(sp)
1000d888:	df000017 	ldw	fp,0(sp)
1000d88c:	dec00204 	addi	sp,sp,8
1000d890:	f800283a 	ret

1000d894 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000d894:	defffd04 	addi	sp,sp,-12
1000d898:	dfc00215 	stw	ra,8(sp)
1000d89c:	df000115 	stw	fp,4(sp)
1000d8a0:	df000104 	addi	fp,sp,4
1000d8a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000d8a8:	e13fff17 	ldw	r4,-4(fp)
1000d8ac:	01440074 	movhi	r5,4097
1000d8b0:	2944e704 	addi	r5,r5,5020
1000d8b4:	000e53c0 	call	1000e53c <alt_dev_llist_insert>
}
1000d8b8:	e037883a 	mov	sp,fp
1000d8bc:	dfc00117 	ldw	ra,4(sp)
1000d8c0:	df000017 	ldw	fp,0(sp)
1000d8c4:	dec00204 	addi	sp,sp,8
1000d8c8:	f800283a 	ret

1000d8cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000d8cc:	defffd04 	addi	sp,sp,-12
1000d8d0:	dfc00215 	stw	ra,8(sp)
1000d8d4:	df000115 	stw	fp,4(sp)
1000d8d8:	df000104 	addi	fp,sp,4
1000d8dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000d8e0:	000ef1c0 	call	1000ef1c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000d8e4:	00800044 	movi	r2,1
1000d8e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000d8ec:	e037883a 	mov	sp,fp
1000d8f0:	dfc00117 	ldw	ra,4(sp)
1000d8f4:	df000017 	ldw	fp,0(sp)
1000d8f8:	dec00204 	addi	sp,sp,8
1000d8fc:	f800283a 	ret

1000d900 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000d900:	defffe04 	addi	sp,sp,-8
1000d904:	dfc00115 	stw	ra,4(sp)
1000d908:	df000015 	stw	fp,0(sp)
1000d90c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000d910:	01040074 	movhi	r4,4097
1000d914:	2100cf04 	addi	r4,r4,828
1000d918:	000b883a 	mov	r5,zero
1000d91c:	000d883a 	mov	r6,zero
1000d920:	000daa80 	call	1000daa8 <altera_avalon_jtag_uart_init>
1000d924:	01040074 	movhi	r4,4097
1000d928:	2100c504 	addi	r4,r4,788
1000d92c:	000d8940 	call	1000d894 <alt_dev_reg>
}
1000d930:	e037883a 	mov	sp,fp
1000d934:	dfc00117 	ldw	ra,4(sp)
1000d938:	df000017 	ldw	fp,0(sp)
1000d93c:	dec00204 	addi	sp,sp,8
1000d940:	f800283a 	ret

1000d944 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000d944:	defffa04 	addi	sp,sp,-24
1000d948:	dfc00515 	stw	ra,20(sp)
1000d94c:	df000415 	stw	fp,16(sp)
1000d950:	df000404 	addi	fp,sp,16
1000d954:	e13ffd15 	stw	r4,-12(fp)
1000d958:	e17ffe15 	stw	r5,-8(fp)
1000d95c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000d960:	e0bffd17 	ldw	r2,-12(fp)
1000d964:	10800017 	ldw	r2,0(r2)
1000d968:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000d96c:	e0bffc17 	ldw	r2,-16(fp)
1000d970:	10c00a04 	addi	r3,r2,40
1000d974:	e0bffd17 	ldw	r2,-12(fp)
1000d978:	10800217 	ldw	r2,8(r2)
1000d97c:	1809883a 	mov	r4,r3
1000d980:	e17ffe17 	ldw	r5,-8(fp)
1000d984:	e1bfff17 	ldw	r6,-4(fp)
1000d988:	100f883a 	mov	r7,r2
1000d98c:	000df6c0 	call	1000df6c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000d990:	e037883a 	mov	sp,fp
1000d994:	dfc00117 	ldw	ra,4(sp)
1000d998:	df000017 	ldw	fp,0(sp)
1000d99c:	dec00204 	addi	sp,sp,8
1000d9a0:	f800283a 	ret

1000d9a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000d9a4:	defffa04 	addi	sp,sp,-24
1000d9a8:	dfc00515 	stw	ra,20(sp)
1000d9ac:	df000415 	stw	fp,16(sp)
1000d9b0:	df000404 	addi	fp,sp,16
1000d9b4:	e13ffd15 	stw	r4,-12(fp)
1000d9b8:	e17ffe15 	stw	r5,-8(fp)
1000d9bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000d9c0:	e0bffd17 	ldw	r2,-12(fp)
1000d9c4:	10800017 	ldw	r2,0(r2)
1000d9c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000d9cc:	e0bffc17 	ldw	r2,-16(fp)
1000d9d0:	10c00a04 	addi	r3,r2,40
1000d9d4:	e0bffd17 	ldw	r2,-12(fp)
1000d9d8:	10800217 	ldw	r2,8(r2)
1000d9dc:	1809883a 	mov	r4,r3
1000d9e0:	e17ffe17 	ldw	r5,-8(fp)
1000d9e4:	e1bfff17 	ldw	r6,-4(fp)
1000d9e8:	100f883a 	mov	r7,r2
1000d9ec:	000e1780 	call	1000e178 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000d9f0:	e037883a 	mov	sp,fp
1000d9f4:	dfc00117 	ldw	ra,4(sp)
1000d9f8:	df000017 	ldw	fp,0(sp)
1000d9fc:	dec00204 	addi	sp,sp,8
1000da00:	f800283a 	ret

1000da04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000da04:	defffc04 	addi	sp,sp,-16
1000da08:	dfc00315 	stw	ra,12(sp)
1000da0c:	df000215 	stw	fp,8(sp)
1000da10:	df000204 	addi	fp,sp,8
1000da14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000da18:	e0bfff17 	ldw	r2,-4(fp)
1000da1c:	10800017 	ldw	r2,0(r2)
1000da20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000da24:	e0bffe17 	ldw	r2,-8(fp)
1000da28:	10c00a04 	addi	r3,r2,40
1000da2c:	e0bfff17 	ldw	r2,-4(fp)
1000da30:	10800217 	ldw	r2,8(r2)
1000da34:	1809883a 	mov	r4,r3
1000da38:	100b883a 	mov	r5,r2
1000da3c:	000de180 	call	1000de18 <altera_avalon_jtag_uart_close>
}
1000da40:	e037883a 	mov	sp,fp
1000da44:	dfc00117 	ldw	ra,4(sp)
1000da48:	df000017 	ldw	fp,0(sp)
1000da4c:	dec00204 	addi	sp,sp,8
1000da50:	f800283a 	ret

1000da54 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000da54:	defffa04 	addi	sp,sp,-24
1000da58:	dfc00515 	stw	ra,20(sp)
1000da5c:	df000415 	stw	fp,16(sp)
1000da60:	df000404 	addi	fp,sp,16
1000da64:	e13ffd15 	stw	r4,-12(fp)
1000da68:	e17ffe15 	stw	r5,-8(fp)
1000da6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000da70:	e0bffd17 	ldw	r2,-12(fp)
1000da74:	10800017 	ldw	r2,0(r2)
1000da78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000da7c:	e0bffc17 	ldw	r2,-16(fp)
1000da80:	10800a04 	addi	r2,r2,40
1000da84:	1009883a 	mov	r4,r2
1000da88:	e17ffe17 	ldw	r5,-8(fp)
1000da8c:	e1bfff17 	ldw	r6,-4(fp)
1000da90:	000de800 	call	1000de80 <altera_avalon_jtag_uart_ioctl>
}
1000da94:	e037883a 	mov	sp,fp
1000da98:	dfc00117 	ldw	ra,4(sp)
1000da9c:	df000017 	ldw	fp,0(sp)
1000daa0:	dec00204 	addi	sp,sp,8
1000daa4:	f800283a 	ret

1000daa8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000daa8:	defffa04 	addi	sp,sp,-24
1000daac:	dfc00515 	stw	ra,20(sp)
1000dab0:	df000415 	stw	fp,16(sp)
1000dab4:	df000404 	addi	fp,sp,16
1000dab8:	e13ffd15 	stw	r4,-12(fp)
1000dabc:	e17ffe15 	stw	r5,-8(fp)
1000dac0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000dac4:	e0bffd17 	ldw	r2,-12(fp)
1000dac8:	00c00044 	movi	r3,1
1000dacc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000dad0:	e0bffd17 	ldw	r2,-12(fp)
1000dad4:	10800017 	ldw	r2,0(r2)
1000dad8:	10800104 	addi	r2,r2,4
1000dadc:	1007883a 	mov	r3,r2
1000dae0:	e0bffd17 	ldw	r2,-12(fp)
1000dae4:	10800817 	ldw	r2,32(r2)
1000dae8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000daec:	e0fffe17 	ldw	r3,-8(fp)
1000daf0:	e0bfff17 	ldw	r2,-4(fp)
1000daf4:	d8000015 	stw	zero,0(sp)
1000daf8:	1809883a 	mov	r4,r3
1000dafc:	100b883a 	mov	r5,r2
1000db00:	01840074 	movhi	r6,4097
1000db04:	31b6db04 	addi	r6,r6,-9364
1000db08:	e1fffd17 	ldw	r7,-12(fp)
1000db0c:	000e6b40 	call	1000e6b4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000db10:	e0bffd17 	ldw	r2,-12(fp)
1000db14:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000db18:	e0bffd17 	ldw	r2,-12(fp)
1000db1c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000db20:	00840074 	movhi	r2,4097
1000db24:	108bb704 	addi	r2,r2,11996
1000db28:	10800017 	ldw	r2,0(r2)
1000db2c:	1809883a 	mov	r4,r3
1000db30:	100b883a 	mov	r5,r2
1000db34:	01840074 	movhi	r6,4097
1000db38:	31b75c04 	addi	r6,r6,-8848
1000db3c:	e1fffd17 	ldw	r7,-12(fp)
1000db40:	000e3900 	call	1000e390 <alt_alarm_start>
1000db44:	1000040e 	bge	r2,zero,1000db58 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000db48:	e0fffd17 	ldw	r3,-12(fp)
1000db4c:	00a00034 	movhi	r2,32768
1000db50:	10bfffc4 	addi	r2,r2,-1
1000db54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000db58:	e037883a 	mov	sp,fp
1000db5c:	dfc00117 	ldw	ra,4(sp)
1000db60:	df000017 	ldw	fp,0(sp)
1000db64:	dec00204 	addi	sp,sp,8
1000db68:	f800283a 	ret

1000db6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000db6c:	defff804 	addi	sp,sp,-32
1000db70:	df000715 	stw	fp,28(sp)
1000db74:	df000704 	addi	fp,sp,28
1000db78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000db7c:	e0bfff17 	ldw	r2,-4(fp)
1000db80:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000db84:	e0bffb17 	ldw	r2,-20(fp)
1000db88:	10800017 	ldw	r2,0(r2)
1000db8c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000db90:	e0bffc17 	ldw	r2,-16(fp)
1000db94:	10800104 	addi	r2,r2,4
1000db98:	10800037 	ldwio	r2,0(r2)
1000db9c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000dba0:	e0bffd17 	ldw	r2,-12(fp)
1000dba4:	1080c00c 	andi	r2,r2,768
1000dba8:	1000011e 	bne	r2,zero,1000dbb0 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000dbac:	00006c06 	br	1000dd60 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000dbb0:	e0bffd17 	ldw	r2,-12(fp)
1000dbb4:	1080400c 	andi	r2,r2,256
1000dbb8:	10003426 	beq	r2,zero,1000dc8c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000dbbc:	00800074 	movhi	r2,1
1000dbc0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000dbc4:	e0bffb17 	ldw	r2,-20(fp)
1000dbc8:	10800a17 	ldw	r2,40(r2)
1000dbcc:	10800044 	addi	r2,r2,1
1000dbd0:	1081ffcc 	andi	r2,r2,2047
1000dbd4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000dbd8:	e0bffb17 	ldw	r2,-20(fp)
1000dbdc:	10c00b17 	ldw	r3,44(r2)
1000dbe0:	e0bffe17 	ldw	r2,-8(fp)
1000dbe4:	1880011e 	bne	r3,r2,1000dbec <altera_avalon_jtag_uart_irq+0x80>
          break;
1000dbe8:	00001606 	br	1000dc44 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000dbec:	e0bffc17 	ldw	r2,-16(fp)
1000dbf0:	10800037 	ldwio	r2,0(r2)
1000dbf4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000dbf8:	e0bff917 	ldw	r2,-28(fp)
1000dbfc:	10a0000c 	andi	r2,r2,32768
1000dc00:	1000011e 	bne	r2,zero,1000dc08 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000dc04:	00000f06 	br	1000dc44 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000dc08:	e0bffb17 	ldw	r2,-20(fp)
1000dc0c:	10800a17 	ldw	r2,40(r2)
1000dc10:	e0fff917 	ldw	r3,-28(fp)
1000dc14:	1809883a 	mov	r4,r3
1000dc18:	e0fffb17 	ldw	r3,-20(fp)
1000dc1c:	1885883a 	add	r2,r3,r2
1000dc20:	10800e04 	addi	r2,r2,56
1000dc24:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000dc28:	e0bffb17 	ldw	r2,-20(fp)
1000dc2c:	10800a17 	ldw	r2,40(r2)
1000dc30:	10800044 	addi	r2,r2,1
1000dc34:	10c1ffcc 	andi	r3,r2,2047
1000dc38:	e0bffb17 	ldw	r2,-20(fp)
1000dc3c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000dc40:	003fe006 	br	1000dbc4 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000dc44:	e0bff917 	ldw	r2,-28(fp)
1000dc48:	10bfffec 	andhi	r2,r2,65535
1000dc4c:	10000f26 	beq	r2,zero,1000dc8c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000dc50:	e0bffb17 	ldw	r2,-20(fp)
1000dc54:	10c00817 	ldw	r3,32(r2)
1000dc58:	00bfff84 	movi	r2,-2
1000dc5c:	1886703a 	and	r3,r3,r2
1000dc60:	e0bffb17 	ldw	r2,-20(fp)
1000dc64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000dc68:	e0bffc17 	ldw	r2,-16(fp)
1000dc6c:	10800104 	addi	r2,r2,4
1000dc70:	1007883a 	mov	r3,r2
1000dc74:	e0bffb17 	ldw	r2,-20(fp)
1000dc78:	10800817 	ldw	r2,32(r2)
1000dc7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000dc80:	e0bffc17 	ldw	r2,-16(fp)
1000dc84:	10800104 	addi	r2,r2,4
1000dc88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000dc8c:	e0bffd17 	ldw	r2,-12(fp)
1000dc90:	1080800c 	andi	r2,r2,512
1000dc94:	10003126 	beq	r2,zero,1000dd5c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000dc98:	e0bffd17 	ldw	r2,-12(fp)
1000dc9c:	1004d43a 	srli	r2,r2,16
1000dca0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000dca4:	00001406 	br	1000dcf8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000dca8:	e0bffc17 	ldw	r2,-16(fp)
1000dcac:	e0fffb17 	ldw	r3,-20(fp)
1000dcb0:	18c00d17 	ldw	r3,52(r3)
1000dcb4:	e13ffb17 	ldw	r4,-20(fp)
1000dcb8:	20c7883a 	add	r3,r4,r3
1000dcbc:	18c20e04 	addi	r3,r3,2104
1000dcc0:	18c00003 	ldbu	r3,0(r3)
1000dcc4:	18c03fcc 	andi	r3,r3,255
1000dcc8:	18c0201c 	xori	r3,r3,128
1000dccc:	18ffe004 	addi	r3,r3,-128
1000dcd0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000dcd4:	e0bffb17 	ldw	r2,-20(fp)
1000dcd8:	10800d17 	ldw	r2,52(r2)
1000dcdc:	10800044 	addi	r2,r2,1
1000dce0:	10c1ffcc 	andi	r3,r2,2047
1000dce4:	e0bffb17 	ldw	r2,-20(fp)
1000dce8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000dcec:	e0bffa17 	ldw	r2,-24(fp)
1000dcf0:	10bfffc4 	addi	r2,r2,-1
1000dcf4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000dcf8:	e0bffa17 	ldw	r2,-24(fp)
1000dcfc:	10000526 	beq	r2,zero,1000dd14 <altera_avalon_jtag_uart_irq+0x1a8>
1000dd00:	e0bffb17 	ldw	r2,-20(fp)
1000dd04:	10c00d17 	ldw	r3,52(r2)
1000dd08:	e0bffb17 	ldw	r2,-20(fp)
1000dd0c:	10800c17 	ldw	r2,48(r2)
1000dd10:	18bfe51e 	bne	r3,r2,1000dca8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000dd14:	e0bffa17 	ldw	r2,-24(fp)
1000dd18:	10001026 	beq	r2,zero,1000dd5c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000dd1c:	e0bffb17 	ldw	r2,-20(fp)
1000dd20:	10c00817 	ldw	r3,32(r2)
1000dd24:	00bfff44 	movi	r2,-3
1000dd28:	1886703a 	and	r3,r3,r2
1000dd2c:	e0bffb17 	ldw	r2,-20(fp)
1000dd30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000dd34:	e0bffb17 	ldw	r2,-20(fp)
1000dd38:	10800017 	ldw	r2,0(r2)
1000dd3c:	10800104 	addi	r2,r2,4
1000dd40:	1007883a 	mov	r3,r2
1000dd44:	e0bffb17 	ldw	r2,-20(fp)
1000dd48:	10800817 	ldw	r2,32(r2)
1000dd4c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000dd50:	e0bffc17 	ldw	r2,-16(fp)
1000dd54:	10800104 	addi	r2,r2,4
1000dd58:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000dd5c:	003f8c06 	br	1000db90 <altera_avalon_jtag_uart_irq+0x24>
}
1000dd60:	e037883a 	mov	sp,fp
1000dd64:	df000017 	ldw	fp,0(sp)
1000dd68:	dec00104 	addi	sp,sp,4
1000dd6c:	f800283a 	ret

1000dd70 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000dd70:	defff804 	addi	sp,sp,-32
1000dd74:	df000715 	stw	fp,28(sp)
1000dd78:	df000704 	addi	fp,sp,28
1000dd7c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000dd80:	e0bffb17 	ldw	r2,-20(fp)
1000dd84:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000dd88:	e0bff917 	ldw	r2,-28(fp)
1000dd8c:	10800017 	ldw	r2,0(r2)
1000dd90:	10800104 	addi	r2,r2,4
1000dd94:	10800037 	ldwio	r2,0(r2)
1000dd98:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000dd9c:	e0bffa17 	ldw	r2,-24(fp)
1000dda0:	1081000c 	andi	r2,r2,1024
1000dda4:	10000b26 	beq	r2,zero,1000ddd4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000dda8:	e0bff917 	ldw	r2,-28(fp)
1000ddac:	10800017 	ldw	r2,0(r2)
1000ddb0:	10800104 	addi	r2,r2,4
1000ddb4:	1007883a 	mov	r3,r2
1000ddb8:	e0bff917 	ldw	r2,-28(fp)
1000ddbc:	10800817 	ldw	r2,32(r2)
1000ddc0:	10810014 	ori	r2,r2,1024
1000ddc4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000ddc8:	e0bff917 	ldw	r2,-28(fp)
1000ddcc:	10000915 	stw	zero,36(r2)
1000ddd0:	00000a06 	br	1000ddfc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000ddd4:	e0bff917 	ldw	r2,-28(fp)
1000ddd8:	10c00917 	ldw	r3,36(r2)
1000dddc:	00a00034 	movhi	r2,32768
1000dde0:	10bfff04 	addi	r2,r2,-4
1000dde4:	10c00536 	bltu	r2,r3,1000ddfc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000dde8:	e0bff917 	ldw	r2,-28(fp)
1000ddec:	10800917 	ldw	r2,36(r2)
1000ddf0:	10c00044 	addi	r3,r2,1
1000ddf4:	e0bff917 	ldw	r2,-28(fp)
1000ddf8:	10c00915 	stw	r3,36(r2)
1000ddfc:	00840074 	movhi	r2,4097
1000de00:	108bb704 	addi	r2,r2,11996
1000de04:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000de08:	e037883a 	mov	sp,fp
1000de0c:	df000017 	ldw	fp,0(sp)
1000de10:	dec00104 	addi	sp,sp,4
1000de14:	f800283a 	ret

1000de18 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000de18:	defffd04 	addi	sp,sp,-12
1000de1c:	df000215 	stw	fp,8(sp)
1000de20:	df000204 	addi	fp,sp,8
1000de24:	e13ffe15 	stw	r4,-8(fp)
1000de28:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000de2c:	00000506 	br	1000de44 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000de30:	e0bfff17 	ldw	r2,-4(fp)
1000de34:	1090000c 	andi	r2,r2,16384
1000de38:	10000226 	beq	r2,zero,1000de44 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000de3c:	00bffd44 	movi	r2,-11
1000de40:	00000b06 	br	1000de70 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000de44:	e0bffe17 	ldw	r2,-8(fp)
1000de48:	10c00d17 	ldw	r3,52(r2)
1000de4c:	e0bffe17 	ldw	r2,-8(fp)
1000de50:	10800c17 	ldw	r2,48(r2)
1000de54:	18800526 	beq	r3,r2,1000de6c <altera_avalon_jtag_uart_close+0x54>
1000de58:	e0bffe17 	ldw	r2,-8(fp)
1000de5c:	10c00917 	ldw	r3,36(r2)
1000de60:	e0bffe17 	ldw	r2,-8(fp)
1000de64:	10800117 	ldw	r2,4(r2)
1000de68:	18bff136 	bltu	r3,r2,1000de30 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000de6c:	0005883a 	mov	r2,zero
}
1000de70:	e037883a 	mov	sp,fp
1000de74:	df000017 	ldw	fp,0(sp)
1000de78:	dec00104 	addi	sp,sp,4
1000de7c:	f800283a 	ret

1000de80 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000de80:	defffa04 	addi	sp,sp,-24
1000de84:	df000515 	stw	fp,20(sp)
1000de88:	df000504 	addi	fp,sp,20
1000de8c:	e13ffd15 	stw	r4,-12(fp)
1000de90:	e17ffe15 	stw	r5,-8(fp)
1000de94:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000de98:	00bff9c4 	movi	r2,-25
1000de9c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000dea0:	e0bffe17 	ldw	r2,-8(fp)
1000dea4:	10da8060 	cmpeqi	r3,r2,27137
1000dea8:	1800031e 	bne	r3,zero,1000deb8 <altera_avalon_jtag_uart_ioctl+0x38>
1000deac:	109a80a0 	cmpeqi	r2,r2,27138
1000deb0:	1000191e 	bne	r2,zero,1000df18 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000deb4:	00002806 	br	1000df58 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000deb8:	e0bffd17 	ldw	r2,-12(fp)
1000debc:	10c00117 	ldw	r3,4(r2)
1000dec0:	00a00034 	movhi	r2,32768
1000dec4:	10bfffc4 	addi	r2,r2,-1
1000dec8:	18801226 	beq	r3,r2,1000df14 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000decc:	e0bfff17 	ldw	r2,-4(fp)
1000ded0:	10800017 	ldw	r2,0(r2)
1000ded4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000ded8:	e0bffc17 	ldw	r2,-16(fp)
1000dedc:	10800090 	cmplti	r2,r2,2
1000dee0:	1000061e 	bne	r2,zero,1000defc <altera_avalon_jtag_uart_ioctl+0x7c>
1000dee4:	e0fffc17 	ldw	r3,-16(fp)
1000dee8:	00a00034 	movhi	r2,32768
1000deec:	10bfffc4 	addi	r2,r2,-1
1000def0:	18800226 	beq	r3,r2,1000defc <altera_avalon_jtag_uart_ioctl+0x7c>
1000def4:	e0bffc17 	ldw	r2,-16(fp)
1000def8:	00000206 	br	1000df04 <altera_avalon_jtag_uart_ioctl+0x84>
1000defc:	00a00034 	movhi	r2,32768
1000df00:	10bfff84 	addi	r2,r2,-2
1000df04:	e0fffd17 	ldw	r3,-12(fp)
1000df08:	18800115 	stw	r2,4(r3)
      rc = 0;
1000df0c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000df10:	00001106 	br	1000df58 <altera_avalon_jtag_uart_ioctl+0xd8>
1000df14:	00001006 	br	1000df58 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000df18:	e0bffd17 	ldw	r2,-12(fp)
1000df1c:	10c00117 	ldw	r3,4(r2)
1000df20:	00a00034 	movhi	r2,32768
1000df24:	10bfffc4 	addi	r2,r2,-1
1000df28:	18800a26 	beq	r3,r2,1000df54 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000df2c:	e0bffd17 	ldw	r2,-12(fp)
1000df30:	10c00917 	ldw	r3,36(r2)
1000df34:	e0bffd17 	ldw	r2,-12(fp)
1000df38:	10800117 	ldw	r2,4(r2)
1000df3c:	1885803a 	cmpltu	r2,r3,r2
1000df40:	10c03fcc 	andi	r3,r2,255
1000df44:	e0bfff17 	ldw	r2,-4(fp)
1000df48:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000df4c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000df50:	00000006 	br	1000df54 <altera_avalon_jtag_uart_ioctl+0xd4>
1000df54:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000df58:	e0bffb17 	ldw	r2,-20(fp)
}
1000df5c:	e037883a 	mov	sp,fp
1000df60:	df000017 	ldw	fp,0(sp)
1000df64:	dec00104 	addi	sp,sp,4
1000df68:	f800283a 	ret

1000df6c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000df6c:	defff304 	addi	sp,sp,-52
1000df70:	dfc00c15 	stw	ra,48(sp)
1000df74:	df000b15 	stw	fp,44(sp)
1000df78:	df000b04 	addi	fp,sp,44
1000df7c:	e13ffc15 	stw	r4,-16(fp)
1000df80:	e17ffd15 	stw	r5,-12(fp)
1000df84:	e1bffe15 	stw	r6,-8(fp)
1000df88:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000df8c:	e0bffd17 	ldw	r2,-12(fp)
1000df90:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000df94:	00004906 	br	1000e0bc <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000df98:	e0bffc17 	ldw	r2,-16(fp)
1000df9c:	10800a17 	ldw	r2,40(r2)
1000dfa0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000dfa4:	e0bffc17 	ldw	r2,-16(fp)
1000dfa8:	10800b17 	ldw	r2,44(r2)
1000dfac:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000dfb0:	e0fff717 	ldw	r3,-36(fp)
1000dfb4:	e0bff817 	ldw	r2,-32(fp)
1000dfb8:	18800536 	bltu	r3,r2,1000dfd0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000dfbc:	e0fff717 	ldw	r3,-36(fp)
1000dfc0:	e0bff817 	ldw	r2,-32(fp)
1000dfc4:	1885c83a 	sub	r2,r3,r2
1000dfc8:	e0bff615 	stw	r2,-40(fp)
1000dfcc:	00000406 	br	1000dfe0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000dfd0:	00c20004 	movi	r3,2048
1000dfd4:	e0bff817 	ldw	r2,-32(fp)
1000dfd8:	1885c83a 	sub	r2,r3,r2
1000dfdc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000dfe0:	e0bff617 	ldw	r2,-40(fp)
1000dfe4:	1000011e 	bne	r2,zero,1000dfec <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000dfe8:	00001d06 	br	1000e060 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000dfec:	e0fffe17 	ldw	r3,-8(fp)
1000dff0:	e0bff617 	ldw	r2,-40(fp)
1000dff4:	1880022e 	bgeu	r3,r2,1000e000 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000dff8:	e0bffe17 	ldw	r2,-8(fp)
1000dffc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e000:	e0bff817 	ldw	r2,-32(fp)
1000e004:	10800e04 	addi	r2,r2,56
1000e008:	e0fffc17 	ldw	r3,-16(fp)
1000e00c:	1885883a 	add	r2,r3,r2
1000e010:	e13ff517 	ldw	r4,-44(fp)
1000e014:	100b883a 	mov	r5,r2
1000e018:	e1bff617 	ldw	r6,-40(fp)
1000e01c:	0005c9c0 	call	10005c9c <memcpy>
      ptr   += n;
1000e020:	e0fff517 	ldw	r3,-44(fp)
1000e024:	e0bff617 	ldw	r2,-40(fp)
1000e028:	1885883a 	add	r2,r3,r2
1000e02c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000e030:	e0fffe17 	ldw	r3,-8(fp)
1000e034:	e0bff617 	ldw	r2,-40(fp)
1000e038:	1885c83a 	sub	r2,r3,r2
1000e03c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e040:	e0fff817 	ldw	r3,-32(fp)
1000e044:	e0bff617 	ldw	r2,-40(fp)
1000e048:	1885883a 	add	r2,r3,r2
1000e04c:	10c1ffcc 	andi	r3,r2,2047
1000e050:	e0bffc17 	ldw	r2,-16(fp)
1000e054:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000e058:	e0bffe17 	ldw	r2,-8(fp)
1000e05c:	00bfce16 	blt	zero,r2,1000df98 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
1000e060:	e0fff517 	ldw	r3,-44(fp)
1000e064:	e0bffd17 	ldw	r2,-12(fp)
1000e068:	18800126 	beq	r3,r2,1000e070 <altera_avalon_jtag_uart_read+0x104>
      break;
1000e06c:	00001506 	br	1000e0c4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000e070:	e0bfff17 	ldw	r2,-4(fp)
1000e074:	1090000c 	andi	r2,r2,16384
1000e078:	10000126 	beq	r2,zero,1000e080 <altera_avalon_jtag_uart_read+0x114>
      break;
1000e07c:	00001106 	br	1000e0c4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000e080:	0001883a 	nop
1000e084:	e0bffc17 	ldw	r2,-16(fp)
1000e088:	10c00a17 	ldw	r3,40(r2)
1000e08c:	e0bff717 	ldw	r2,-36(fp)
1000e090:	1880051e 	bne	r3,r2,1000e0a8 <altera_avalon_jtag_uart_read+0x13c>
1000e094:	e0bffc17 	ldw	r2,-16(fp)
1000e098:	10c00917 	ldw	r3,36(r2)
1000e09c:	e0bffc17 	ldw	r2,-16(fp)
1000e0a0:	10800117 	ldw	r2,4(r2)
1000e0a4:	18bff736 	bltu	r3,r2,1000e084 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000e0a8:	e0bffc17 	ldw	r2,-16(fp)
1000e0ac:	10c00a17 	ldw	r3,40(r2)
1000e0b0:	e0bff717 	ldw	r2,-36(fp)
1000e0b4:	1880011e 	bne	r3,r2,1000e0bc <altera_avalon_jtag_uart_read+0x150>
      break;
1000e0b8:	00000206 	br	1000e0c4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e0bc:	e0bffe17 	ldw	r2,-8(fp)
1000e0c0:	00bfb516 	blt	zero,r2,1000df98 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000e0c4:	e0fff517 	ldw	r3,-44(fp)
1000e0c8:	e0bffd17 	ldw	r2,-12(fp)
1000e0cc:	18801826 	beq	r3,r2,1000e130 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e0d0:	0005303a 	rdctl	r2,status
1000e0d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e0d8:	e0fffa17 	ldw	r3,-24(fp)
1000e0dc:	00bfff84 	movi	r2,-2
1000e0e0:	1884703a 	and	r2,r3,r2
1000e0e4:	1001703a 	wrctl	status,r2
  
  return context;
1000e0e8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000e0ec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e0f0:	e0bffc17 	ldw	r2,-16(fp)
1000e0f4:	10800817 	ldw	r2,32(r2)
1000e0f8:	10c00054 	ori	r3,r2,1
1000e0fc:	e0bffc17 	ldw	r2,-16(fp)
1000e100:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e104:	e0bffc17 	ldw	r2,-16(fp)
1000e108:	10800017 	ldw	r2,0(r2)
1000e10c:	10800104 	addi	r2,r2,4
1000e110:	1007883a 	mov	r3,r2
1000e114:	e0bffc17 	ldw	r2,-16(fp)
1000e118:	10800817 	ldw	r2,32(r2)
1000e11c:	18800035 	stwio	r2,0(r3)
1000e120:	e0bff917 	ldw	r2,-28(fp)
1000e124:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e128:	e0bffb17 	ldw	r2,-20(fp)
1000e12c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000e130:	e0fff517 	ldw	r3,-44(fp)
1000e134:	e0bffd17 	ldw	r2,-12(fp)
1000e138:	18800426 	beq	r3,r2,1000e14c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000e13c:	e0fff517 	ldw	r3,-44(fp)
1000e140:	e0bffd17 	ldw	r2,-12(fp)
1000e144:	1885c83a 	sub	r2,r3,r2
1000e148:	00000606 	br	1000e164 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000e14c:	e0bfff17 	ldw	r2,-4(fp)
1000e150:	1090000c 	andi	r2,r2,16384
1000e154:	10000226 	beq	r2,zero,1000e160 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000e158:	00bffd44 	movi	r2,-11
1000e15c:	00000106 	br	1000e164 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000e160:	00bffec4 	movi	r2,-5
}
1000e164:	e037883a 	mov	sp,fp
1000e168:	dfc00117 	ldw	ra,4(sp)
1000e16c:	df000017 	ldw	fp,0(sp)
1000e170:	dec00204 	addi	sp,sp,8
1000e174:	f800283a 	ret

1000e178 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000e178:	defff304 	addi	sp,sp,-52
1000e17c:	dfc00c15 	stw	ra,48(sp)
1000e180:	df000b15 	stw	fp,44(sp)
1000e184:	df000b04 	addi	fp,sp,44
1000e188:	e13ffc15 	stw	r4,-16(fp)
1000e18c:	e17ffd15 	stw	r5,-12(fp)
1000e190:	e1bffe15 	stw	r6,-8(fp)
1000e194:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000e198:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000e19c:	e0bffd17 	ldw	r2,-12(fp)
1000e1a0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e1a4:	00003806 	br	1000e288 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000e1a8:	e0bffc17 	ldw	r2,-16(fp)
1000e1ac:	10800c17 	ldw	r2,48(r2)
1000e1b0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000e1b4:	e0bffc17 	ldw	r2,-16(fp)
1000e1b8:	10800d17 	ldw	r2,52(r2)
1000e1bc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000e1c0:	e0fff817 	ldw	r3,-32(fp)
1000e1c4:	e0bff517 	ldw	r2,-44(fp)
1000e1c8:	1880062e 	bgeu	r3,r2,1000e1e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000e1cc:	e0fff517 	ldw	r3,-44(fp)
1000e1d0:	e0bff817 	ldw	r2,-32(fp)
1000e1d4:	1885c83a 	sub	r2,r3,r2
1000e1d8:	10bfffc4 	addi	r2,r2,-1
1000e1dc:	e0bff615 	stw	r2,-40(fp)
1000e1e0:	00000b06 	br	1000e210 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000e1e4:	e0bff517 	ldw	r2,-44(fp)
1000e1e8:	10000526 	beq	r2,zero,1000e200 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000e1ec:	00c20004 	movi	r3,2048
1000e1f0:	e0bff817 	ldw	r2,-32(fp)
1000e1f4:	1885c83a 	sub	r2,r3,r2
1000e1f8:	e0bff615 	stw	r2,-40(fp)
1000e1fc:	00000406 	br	1000e210 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000e200:	00c1ffc4 	movi	r3,2047
1000e204:	e0bff817 	ldw	r2,-32(fp)
1000e208:	1885c83a 	sub	r2,r3,r2
1000e20c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e210:	e0bff617 	ldw	r2,-40(fp)
1000e214:	1000011e 	bne	r2,zero,1000e21c <altera_avalon_jtag_uart_write+0xa4>
        break;
1000e218:	00001d06 	br	1000e290 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000e21c:	e0fffe17 	ldw	r3,-8(fp)
1000e220:	e0bff617 	ldw	r2,-40(fp)
1000e224:	1880022e 	bgeu	r3,r2,1000e230 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000e228:	e0bffe17 	ldw	r2,-8(fp)
1000e22c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000e230:	e0bff817 	ldw	r2,-32(fp)
1000e234:	10820e04 	addi	r2,r2,2104
1000e238:	e0fffc17 	ldw	r3,-16(fp)
1000e23c:	1885883a 	add	r2,r3,r2
1000e240:	1009883a 	mov	r4,r2
1000e244:	e17ffd17 	ldw	r5,-12(fp)
1000e248:	e1bff617 	ldw	r6,-40(fp)
1000e24c:	0005c9c0 	call	10005c9c <memcpy>
      ptr   += n;
1000e250:	e0fffd17 	ldw	r3,-12(fp)
1000e254:	e0bff617 	ldw	r2,-40(fp)
1000e258:	1885883a 	add	r2,r3,r2
1000e25c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000e260:	e0fffe17 	ldw	r3,-8(fp)
1000e264:	e0bff617 	ldw	r2,-40(fp)
1000e268:	1885c83a 	sub	r2,r3,r2
1000e26c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e270:	e0fff817 	ldw	r3,-32(fp)
1000e274:	e0bff617 	ldw	r2,-40(fp)
1000e278:	1885883a 	add	r2,r3,r2
1000e27c:	10c1ffcc 	andi	r3,r2,2047
1000e280:	e0bffc17 	ldw	r2,-16(fp)
1000e284:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e288:	e0bffe17 	ldw	r2,-8(fp)
1000e28c:	00bfc616 	blt	zero,r2,1000e1a8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e290:	0005303a 	rdctl	r2,status
1000e294:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e298:	e0fffa17 	ldw	r3,-24(fp)
1000e29c:	00bfff84 	movi	r2,-2
1000e2a0:	1884703a 	and	r2,r3,r2
1000e2a4:	1001703a 	wrctl	status,r2
  
  return context;
1000e2a8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000e2ac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e2b0:	e0bffc17 	ldw	r2,-16(fp)
1000e2b4:	10800817 	ldw	r2,32(r2)
1000e2b8:	10c00094 	ori	r3,r2,2
1000e2bc:	e0bffc17 	ldw	r2,-16(fp)
1000e2c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e2c4:	e0bffc17 	ldw	r2,-16(fp)
1000e2c8:	10800017 	ldw	r2,0(r2)
1000e2cc:	10800104 	addi	r2,r2,4
1000e2d0:	1007883a 	mov	r3,r2
1000e2d4:	e0bffc17 	ldw	r2,-16(fp)
1000e2d8:	10800817 	ldw	r2,32(r2)
1000e2dc:	18800035 	stwio	r2,0(r3)
1000e2e0:	e0bff917 	ldw	r2,-28(fp)
1000e2e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e2e8:	e0bffb17 	ldw	r2,-20(fp)
1000e2ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000e2f0:	e0bffe17 	ldw	r2,-8(fp)
1000e2f4:	0080120e 	bge	zero,r2,1000e340 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000e2f8:	e0bfff17 	ldw	r2,-4(fp)
1000e2fc:	1090000c 	andi	r2,r2,16384
1000e300:	10000126 	beq	r2,zero,1000e308 <altera_avalon_jtag_uart_write+0x190>
        break;
1000e304:	00001006 	br	1000e348 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000e308:	0001883a 	nop
1000e30c:	e0bffc17 	ldw	r2,-16(fp)
1000e310:	10c00d17 	ldw	r3,52(r2)
1000e314:	e0bff517 	ldw	r2,-44(fp)
1000e318:	1880051e 	bne	r3,r2,1000e330 <altera_avalon_jtag_uart_write+0x1b8>
1000e31c:	e0bffc17 	ldw	r2,-16(fp)
1000e320:	10c00917 	ldw	r3,36(r2)
1000e324:	e0bffc17 	ldw	r2,-16(fp)
1000e328:	10800117 	ldw	r2,4(r2)
1000e32c:	18bff736 	bltu	r3,r2,1000e30c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000e330:	e0bffc17 	ldw	r2,-16(fp)
1000e334:	10800917 	ldw	r2,36(r2)
1000e338:	10000126 	beq	r2,zero,1000e340 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000e33c:	00000206 	br	1000e348 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000e340:	e0bffe17 	ldw	r2,-8(fp)
1000e344:	00bf9716 	blt	zero,r2,1000e1a4 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000e348:	e0fffd17 	ldw	r3,-12(fp)
1000e34c:	e0bff717 	ldw	r2,-36(fp)
1000e350:	18800426 	beq	r3,r2,1000e364 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000e354:	e0fffd17 	ldw	r3,-12(fp)
1000e358:	e0bff717 	ldw	r2,-36(fp)
1000e35c:	1885c83a 	sub	r2,r3,r2
1000e360:	00000606 	br	1000e37c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000e364:	e0bfff17 	ldw	r2,-4(fp)
1000e368:	1090000c 	andi	r2,r2,16384
1000e36c:	10000226 	beq	r2,zero,1000e378 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000e370:	00bffd44 	movi	r2,-11
1000e374:	00000106 	br	1000e37c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000e378:	00bffec4 	movi	r2,-5
}
1000e37c:	e037883a 	mov	sp,fp
1000e380:	dfc00117 	ldw	ra,4(sp)
1000e384:	df000017 	ldw	fp,0(sp)
1000e388:	dec00204 	addi	sp,sp,8
1000e38c:	f800283a 	ret

1000e390 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000e390:	defff504 	addi	sp,sp,-44
1000e394:	df000a15 	stw	fp,40(sp)
1000e398:	df000a04 	addi	fp,sp,40
1000e39c:	e13ffc15 	stw	r4,-16(fp)
1000e3a0:	e17ffd15 	stw	r5,-12(fp)
1000e3a4:	e1bffe15 	stw	r6,-8(fp)
1000e3a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000e3ac:	e03ff615 	stw	zero,-40(fp)
1000e3b0:	00840074 	movhi	r2,4097
1000e3b4:	108bb704 	addi	r2,r2,11996
1000e3b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000e3bc:	10003f26 	beq	r2,zero,1000e4bc <alt_alarm_start+0x12c>
  {
    if (alarm)
1000e3c0:	e0bffc17 	ldw	r2,-16(fp)
1000e3c4:	10003b26 	beq	r2,zero,1000e4b4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000e3c8:	e0bffc17 	ldw	r2,-16(fp)
1000e3cc:	e0fffe17 	ldw	r3,-8(fp)
1000e3d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000e3d4:	e0bffc17 	ldw	r2,-16(fp)
1000e3d8:	e0ffff17 	ldw	r3,-4(fp)
1000e3dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e3e0:	0005303a 	rdctl	r2,status
1000e3e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e3e8:	e0fff817 	ldw	r3,-32(fp)
1000e3ec:	00bfff84 	movi	r2,-2
1000e3f0:	1884703a 	and	r2,r3,r2
1000e3f4:	1001703a 	wrctl	status,r2
  
  return context;
1000e3f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000e3fc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000e400:	00840074 	movhi	r2,4097
1000e404:	108bb804 	addi	r2,r2,12000
1000e408:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000e40c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000e410:	e0fffd17 	ldw	r3,-12(fp)
1000e414:	e0bff617 	ldw	r2,-40(fp)
1000e418:	1885883a 	add	r2,r3,r2
1000e41c:	10c00044 	addi	r3,r2,1
1000e420:	e0bffc17 	ldw	r2,-16(fp)
1000e424:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000e428:	e0bffc17 	ldw	r2,-16(fp)
1000e42c:	10c00217 	ldw	r3,8(r2)
1000e430:	e0bff617 	ldw	r2,-40(fp)
1000e434:	1880042e 	bgeu	r3,r2,1000e448 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000e438:	e0bffc17 	ldw	r2,-16(fp)
1000e43c:	00c00044 	movi	r3,1
1000e440:	10c00405 	stb	r3,16(r2)
1000e444:	00000206 	br	1000e450 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000e448:	e0bffc17 	ldw	r2,-16(fp)
1000e44c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000e450:	e0fffc17 	ldw	r3,-16(fp)
1000e454:	00840074 	movhi	r2,4097
1000e458:	1084ed04 	addi	r2,r2,5044
1000e45c:	e0bff915 	stw	r2,-28(fp)
1000e460:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000e464:	e0bffa17 	ldw	r2,-24(fp)
1000e468:	e0fff917 	ldw	r3,-28(fp)
1000e46c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000e470:	e0bff917 	ldw	r2,-28(fp)
1000e474:	10c00017 	ldw	r3,0(r2)
1000e478:	e0bffa17 	ldw	r2,-24(fp)
1000e47c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000e480:	e0bff917 	ldw	r2,-28(fp)
1000e484:	10800017 	ldw	r2,0(r2)
1000e488:	e0fffa17 	ldw	r3,-24(fp)
1000e48c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000e490:	e0bff917 	ldw	r2,-28(fp)
1000e494:	e0fffa17 	ldw	r3,-24(fp)
1000e498:	10c00015 	stw	r3,0(r2)
1000e49c:	e0bff717 	ldw	r2,-36(fp)
1000e4a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e4a4:	e0bffb17 	ldw	r2,-20(fp)
1000e4a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000e4ac:	0005883a 	mov	r2,zero
1000e4b0:	00000306 	br	1000e4c0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000e4b4:	00bffa84 	movi	r2,-22
1000e4b8:	00000106 	br	1000e4c0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000e4bc:	00bfde84 	movi	r2,-134
  }
}
1000e4c0:	e037883a 	mov	sp,fp
1000e4c4:	df000017 	ldw	fp,0(sp)
1000e4c8:	dec00104 	addi	sp,sp,4
1000e4cc:	f800283a 	ret

1000e4d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000e4d0:	deffff04 	addi	sp,sp,-4
1000e4d4:	df000015 	stw	fp,0(sp)
1000e4d8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000e4dc:	e037883a 	mov	sp,fp
1000e4e0:	df000017 	ldw	fp,0(sp)
1000e4e4:	dec00104 	addi	sp,sp,4
1000e4e8:	f800283a 	ret

1000e4ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e4ec:	defffe04 	addi	sp,sp,-8
1000e4f0:	dfc00115 	stw	ra,4(sp)
1000e4f4:	df000015 	stw	fp,0(sp)
1000e4f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e4fc:	00840074 	movhi	r2,4097
1000e500:	1084ea04 	addi	r2,r2,5032
1000e504:	10800017 	ldw	r2,0(r2)
1000e508:	10000526 	beq	r2,zero,1000e520 <alt_get_errno+0x34>
1000e50c:	00840074 	movhi	r2,4097
1000e510:	1084ea04 	addi	r2,r2,5032
1000e514:	10800017 	ldw	r2,0(r2)
1000e518:	103ee83a 	callr	r2
1000e51c:	00000206 	br	1000e528 <alt_get_errno+0x3c>
1000e520:	00840074 	movhi	r2,4097
1000e524:	108bb204 	addi	r2,r2,11976
}
1000e528:	e037883a 	mov	sp,fp
1000e52c:	dfc00117 	ldw	ra,4(sp)
1000e530:	df000017 	ldw	fp,0(sp)
1000e534:	dec00204 	addi	sp,sp,8
1000e538:	f800283a 	ret

1000e53c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000e53c:	defffa04 	addi	sp,sp,-24
1000e540:	dfc00515 	stw	ra,20(sp)
1000e544:	df000415 	stw	fp,16(sp)
1000e548:	df000404 	addi	fp,sp,16
1000e54c:	e13ffe15 	stw	r4,-8(fp)
1000e550:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000e554:	e0bffe17 	ldw	r2,-8(fp)
1000e558:	10000326 	beq	r2,zero,1000e568 <alt_dev_llist_insert+0x2c>
1000e55c:	e0bffe17 	ldw	r2,-8(fp)
1000e560:	10800217 	ldw	r2,8(r2)
1000e564:	1000061e 	bne	r2,zero,1000e580 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000e568:	000e4ec0 	call	1000e4ec <alt_get_errno>
1000e56c:	1007883a 	mov	r3,r2
1000e570:	00800584 	movi	r2,22
1000e574:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000e578:	00bffa84 	movi	r2,-22
1000e57c:	00001306 	br	1000e5cc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000e580:	e0bffe17 	ldw	r2,-8(fp)
1000e584:	e0ffff17 	ldw	r3,-4(fp)
1000e588:	e0fffc15 	stw	r3,-16(fp)
1000e58c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000e590:	e0bffd17 	ldw	r2,-12(fp)
1000e594:	e0fffc17 	ldw	r3,-16(fp)
1000e598:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000e59c:	e0bffc17 	ldw	r2,-16(fp)
1000e5a0:	10c00017 	ldw	r3,0(r2)
1000e5a4:	e0bffd17 	ldw	r2,-12(fp)
1000e5a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000e5ac:	e0bffc17 	ldw	r2,-16(fp)
1000e5b0:	10800017 	ldw	r2,0(r2)
1000e5b4:	e0fffd17 	ldw	r3,-12(fp)
1000e5b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000e5bc:	e0bffc17 	ldw	r2,-16(fp)
1000e5c0:	e0fffd17 	ldw	r3,-12(fp)
1000e5c4:	10c00015 	stw	r3,0(r2)

  return 0;  
1000e5c8:	0005883a 	mov	r2,zero
}
1000e5cc:	e037883a 	mov	sp,fp
1000e5d0:	dfc00117 	ldw	ra,4(sp)
1000e5d4:	df000017 	ldw	fp,0(sp)
1000e5d8:	dec00204 	addi	sp,sp,8
1000e5dc:	f800283a 	ret

1000e5e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000e5e0:	defffd04 	addi	sp,sp,-12
1000e5e4:	dfc00215 	stw	ra,8(sp)
1000e5e8:	df000115 	stw	fp,4(sp)
1000e5ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000e5f0:	00840074 	movhi	r2,4097
1000e5f4:	10bd5504 	addi	r2,r2,-2732
1000e5f8:	e0bfff15 	stw	r2,-4(fp)
1000e5fc:	00000606 	br	1000e618 <_do_ctors+0x38>
        (*ctor) (); 
1000e600:	e0bfff17 	ldw	r2,-4(fp)
1000e604:	10800017 	ldw	r2,0(r2)
1000e608:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000e60c:	e0bfff17 	ldw	r2,-4(fp)
1000e610:	10bfff04 	addi	r2,r2,-4
1000e614:	e0bfff15 	stw	r2,-4(fp)
1000e618:	e0ffff17 	ldw	r3,-4(fp)
1000e61c:	00840074 	movhi	r2,4097
1000e620:	10bd5604 	addi	r2,r2,-2728
1000e624:	18bff62e 	bgeu	r3,r2,1000e600 <_do_ctors+0x20>
        (*ctor) (); 
}
1000e628:	e037883a 	mov	sp,fp
1000e62c:	dfc00117 	ldw	ra,4(sp)
1000e630:	df000017 	ldw	fp,0(sp)
1000e634:	dec00204 	addi	sp,sp,8
1000e638:	f800283a 	ret

1000e63c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000e63c:	defffd04 	addi	sp,sp,-12
1000e640:	dfc00215 	stw	ra,8(sp)
1000e644:	df000115 	stw	fp,4(sp)
1000e648:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000e64c:	00840074 	movhi	r2,4097
1000e650:	10bd5504 	addi	r2,r2,-2732
1000e654:	e0bfff15 	stw	r2,-4(fp)
1000e658:	00000606 	br	1000e674 <_do_dtors+0x38>
        (*dtor) (); 
1000e65c:	e0bfff17 	ldw	r2,-4(fp)
1000e660:	10800017 	ldw	r2,0(r2)
1000e664:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000e668:	e0bfff17 	ldw	r2,-4(fp)
1000e66c:	10bfff04 	addi	r2,r2,-4
1000e670:	e0bfff15 	stw	r2,-4(fp)
1000e674:	e0ffff17 	ldw	r3,-4(fp)
1000e678:	00840074 	movhi	r2,4097
1000e67c:	10bd5604 	addi	r2,r2,-2728
1000e680:	18bff62e 	bgeu	r3,r2,1000e65c <_do_dtors+0x20>
        (*dtor) (); 
}
1000e684:	e037883a 	mov	sp,fp
1000e688:	dfc00117 	ldw	ra,4(sp)
1000e68c:	df000017 	ldw	fp,0(sp)
1000e690:	dec00204 	addi	sp,sp,8
1000e694:	f800283a 	ret

1000e698 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000e698:	deffff04 	addi	sp,sp,-4
1000e69c:	df000015 	stw	fp,0(sp)
1000e6a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000e6a4:	e037883a 	mov	sp,fp
1000e6a8:	df000017 	ldw	fp,0(sp)
1000e6ac:	dec00104 	addi	sp,sp,4
1000e6b0:	f800283a 	ret

1000e6b4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000e6b4:	defff904 	addi	sp,sp,-28
1000e6b8:	dfc00615 	stw	ra,24(sp)
1000e6bc:	df000515 	stw	fp,20(sp)
1000e6c0:	df000504 	addi	fp,sp,20
1000e6c4:	e13ffc15 	stw	r4,-16(fp)
1000e6c8:	e17ffd15 	stw	r5,-12(fp)
1000e6cc:	e1bffe15 	stw	r6,-8(fp)
1000e6d0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000e6d4:	e0800217 	ldw	r2,8(fp)
1000e6d8:	d8800015 	stw	r2,0(sp)
1000e6dc:	e13ffc17 	ldw	r4,-16(fp)
1000e6e0:	e17ffd17 	ldw	r5,-12(fp)
1000e6e4:	e1bffe17 	ldw	r6,-8(fp)
1000e6e8:	e1ffff17 	ldw	r7,-4(fp)
1000e6ec:	000e8940 	call	1000e894 <alt_iic_isr_register>
}  
1000e6f0:	e037883a 	mov	sp,fp
1000e6f4:	dfc00117 	ldw	ra,4(sp)
1000e6f8:	df000017 	ldw	fp,0(sp)
1000e6fc:	dec00204 	addi	sp,sp,8
1000e700:	f800283a 	ret

1000e704 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000e704:	defff904 	addi	sp,sp,-28
1000e708:	df000615 	stw	fp,24(sp)
1000e70c:	df000604 	addi	fp,sp,24
1000e710:	e13ffe15 	stw	r4,-8(fp)
1000e714:	e17fff15 	stw	r5,-4(fp)
1000e718:	e0bfff17 	ldw	r2,-4(fp)
1000e71c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e720:	0005303a 	rdctl	r2,status
1000e724:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e728:	e0fffb17 	ldw	r3,-20(fp)
1000e72c:	00bfff84 	movi	r2,-2
1000e730:	1884703a 	and	r2,r3,r2
1000e734:	1001703a 	wrctl	status,r2
  
  return context;
1000e738:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000e73c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000e740:	e0bffa17 	ldw	r2,-24(fp)
1000e744:	00c00044 	movi	r3,1
1000e748:	1884983a 	sll	r2,r3,r2
1000e74c:	1007883a 	mov	r3,r2
1000e750:	00840074 	movhi	r2,4097
1000e754:	108bb604 	addi	r2,r2,11992
1000e758:	10800017 	ldw	r2,0(r2)
1000e75c:	1886b03a 	or	r3,r3,r2
1000e760:	00840074 	movhi	r2,4097
1000e764:	108bb604 	addi	r2,r2,11992
1000e768:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000e76c:	00840074 	movhi	r2,4097
1000e770:	108bb604 	addi	r2,r2,11992
1000e774:	10800017 	ldw	r2,0(r2)
1000e778:	100170fa 	wrctl	ienable,r2
1000e77c:	e0bffc17 	ldw	r2,-16(fp)
1000e780:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e784:	e0bffd17 	ldw	r2,-12(fp)
1000e788:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000e78c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000e790:	0001883a 	nop
}
1000e794:	e037883a 	mov	sp,fp
1000e798:	df000017 	ldw	fp,0(sp)
1000e79c:	dec00104 	addi	sp,sp,4
1000e7a0:	f800283a 	ret

1000e7a4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000e7a4:	defff904 	addi	sp,sp,-28
1000e7a8:	df000615 	stw	fp,24(sp)
1000e7ac:	df000604 	addi	fp,sp,24
1000e7b0:	e13ffe15 	stw	r4,-8(fp)
1000e7b4:	e17fff15 	stw	r5,-4(fp)
1000e7b8:	e0bfff17 	ldw	r2,-4(fp)
1000e7bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e7c0:	0005303a 	rdctl	r2,status
1000e7c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e7c8:	e0fffb17 	ldw	r3,-20(fp)
1000e7cc:	00bfff84 	movi	r2,-2
1000e7d0:	1884703a 	and	r2,r3,r2
1000e7d4:	1001703a 	wrctl	status,r2
  
  return context;
1000e7d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000e7dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000e7e0:	e0bffa17 	ldw	r2,-24(fp)
1000e7e4:	00c00044 	movi	r3,1
1000e7e8:	1884983a 	sll	r2,r3,r2
1000e7ec:	0084303a 	nor	r2,zero,r2
1000e7f0:	1007883a 	mov	r3,r2
1000e7f4:	00840074 	movhi	r2,4097
1000e7f8:	108bb604 	addi	r2,r2,11992
1000e7fc:	10800017 	ldw	r2,0(r2)
1000e800:	1886703a 	and	r3,r3,r2
1000e804:	00840074 	movhi	r2,4097
1000e808:	108bb604 	addi	r2,r2,11992
1000e80c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000e810:	00840074 	movhi	r2,4097
1000e814:	108bb604 	addi	r2,r2,11992
1000e818:	10800017 	ldw	r2,0(r2)
1000e81c:	100170fa 	wrctl	ienable,r2
1000e820:	e0bffc17 	ldw	r2,-16(fp)
1000e824:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e828:	e0bffd17 	ldw	r2,-12(fp)
1000e82c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000e830:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000e834:	0001883a 	nop
}
1000e838:	e037883a 	mov	sp,fp
1000e83c:	df000017 	ldw	fp,0(sp)
1000e840:	dec00104 	addi	sp,sp,4
1000e844:	f800283a 	ret

1000e848 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000e848:	defffc04 	addi	sp,sp,-16
1000e84c:	df000315 	stw	fp,12(sp)
1000e850:	df000304 	addi	fp,sp,12
1000e854:	e13ffe15 	stw	r4,-8(fp)
1000e858:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000e85c:	000530fa 	rdctl	r2,ienable
1000e860:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000e864:	e0bfff17 	ldw	r2,-4(fp)
1000e868:	00c00044 	movi	r3,1
1000e86c:	1884983a 	sll	r2,r3,r2
1000e870:	1007883a 	mov	r3,r2
1000e874:	e0bffd17 	ldw	r2,-12(fp)
1000e878:	1884703a 	and	r2,r3,r2
1000e87c:	1004c03a 	cmpne	r2,r2,zero
1000e880:	10803fcc 	andi	r2,r2,255
}
1000e884:	e037883a 	mov	sp,fp
1000e888:	df000017 	ldw	fp,0(sp)
1000e88c:	dec00104 	addi	sp,sp,4
1000e890:	f800283a 	ret

1000e894 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000e894:	defff504 	addi	sp,sp,-44
1000e898:	dfc00a15 	stw	ra,40(sp)
1000e89c:	df000915 	stw	fp,36(sp)
1000e8a0:	df000904 	addi	fp,sp,36
1000e8a4:	e13ffc15 	stw	r4,-16(fp)
1000e8a8:	e17ffd15 	stw	r5,-12(fp)
1000e8ac:	e1bffe15 	stw	r6,-8(fp)
1000e8b0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000e8b4:	00bffa84 	movi	r2,-22
1000e8b8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000e8bc:	e0bffd17 	ldw	r2,-12(fp)
1000e8c0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000e8c4:	e0bff817 	ldw	r2,-32(fp)
1000e8c8:	10800808 	cmpgei	r2,r2,32
1000e8cc:	1000271e 	bne	r2,zero,1000e96c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e8d0:	0005303a 	rdctl	r2,status
1000e8d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e8d8:	e0fffa17 	ldw	r3,-24(fp)
1000e8dc:	00bfff84 	movi	r2,-2
1000e8e0:	1884703a 	and	r2,r3,r2
1000e8e4:	1001703a 	wrctl	status,r2
  
  return context;
1000e8e8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000e8ec:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000e8f0:	00840074 	movhi	r2,4097
1000e8f4:	108bc304 	addi	r2,r2,12044
1000e8f8:	e0fff817 	ldw	r3,-32(fp)
1000e8fc:	180690fa 	slli	r3,r3,3
1000e900:	10c5883a 	add	r2,r2,r3
1000e904:	e0fffe17 	ldw	r3,-8(fp)
1000e908:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000e90c:	00840074 	movhi	r2,4097
1000e910:	108bc304 	addi	r2,r2,12044
1000e914:	e0fff817 	ldw	r3,-32(fp)
1000e918:	180690fa 	slli	r3,r3,3
1000e91c:	10c5883a 	add	r2,r2,r3
1000e920:	10800104 	addi	r2,r2,4
1000e924:	e0ffff17 	ldw	r3,-4(fp)
1000e928:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000e92c:	e0bffe17 	ldw	r2,-8(fp)
1000e930:	10000526 	beq	r2,zero,1000e948 <alt_iic_isr_register+0xb4>
1000e934:	e0bff817 	ldw	r2,-32(fp)
1000e938:	e13ffc17 	ldw	r4,-16(fp)
1000e93c:	100b883a 	mov	r5,r2
1000e940:	000e7040 	call	1000e704 <alt_ic_irq_enable>
1000e944:	00000406 	br	1000e958 <alt_iic_isr_register+0xc4>
1000e948:	e0bff817 	ldw	r2,-32(fp)
1000e94c:	e13ffc17 	ldw	r4,-16(fp)
1000e950:	100b883a 	mov	r5,r2
1000e954:	000e7a40 	call	1000e7a4 <alt_ic_irq_disable>
1000e958:	e0bff715 	stw	r2,-36(fp)
1000e95c:	e0bff917 	ldw	r2,-28(fp)
1000e960:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e964:	e0bffb17 	ldw	r2,-20(fp)
1000e968:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000e96c:	e0bff717 	ldw	r2,-36(fp)
}
1000e970:	e037883a 	mov	sp,fp
1000e974:	dfc00117 	ldw	ra,4(sp)
1000e978:	df000017 	ldw	fp,0(sp)
1000e97c:	dec00204 	addi	sp,sp,8
1000e980:	f800283a 	ret

1000e984 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000e984:	defff804 	addi	sp,sp,-32
1000e988:	dfc00715 	stw	ra,28(sp)
1000e98c:	df000615 	stw	fp,24(sp)
1000e990:	dc000515 	stw	r16,20(sp)
1000e994:	df000604 	addi	fp,sp,24
1000e998:	e13ffb15 	stw	r4,-20(fp)
1000e99c:	e17ffc15 	stw	r5,-16(fp)
1000e9a0:	e1bffd15 	stw	r6,-12(fp)
1000e9a4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000e9a8:	e13ffc17 	ldw	r4,-16(fp)
1000e9ac:	e17ffd17 	ldw	r5,-12(fp)
1000e9b0:	e1bffe17 	ldw	r6,-8(fp)
1000e9b4:	000ec200 	call	1000ec20 <open>
1000e9b8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000e9bc:	e0bffa17 	ldw	r2,-24(fp)
1000e9c0:	10002216 	blt	r2,zero,1000ea4c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000e9c4:	04040074 	movhi	r16,4097
1000e9c8:	84006504 	addi	r16,r16,404
1000e9cc:	e0bffa17 	ldw	r2,-24(fp)
1000e9d0:	1009883a 	mov	r4,r2
1000e9d4:	01400304 	movi	r5,12
1000e9d8:	000a67c0 	call	1000a67c <__mulsi3>
1000e9dc:	8085883a 	add	r2,r16,r2
1000e9e0:	10c00017 	ldw	r3,0(r2)
1000e9e4:	e0bffb17 	ldw	r2,-20(fp)
1000e9e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000e9ec:	04040074 	movhi	r16,4097
1000e9f0:	84006504 	addi	r16,r16,404
1000e9f4:	e0bffa17 	ldw	r2,-24(fp)
1000e9f8:	1009883a 	mov	r4,r2
1000e9fc:	01400304 	movi	r5,12
1000ea00:	000a67c0 	call	1000a67c <__mulsi3>
1000ea04:	8085883a 	add	r2,r16,r2
1000ea08:	10800104 	addi	r2,r2,4
1000ea0c:	10c00017 	ldw	r3,0(r2)
1000ea10:	e0bffb17 	ldw	r2,-20(fp)
1000ea14:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000ea18:	04040074 	movhi	r16,4097
1000ea1c:	84006504 	addi	r16,r16,404
1000ea20:	e0bffa17 	ldw	r2,-24(fp)
1000ea24:	1009883a 	mov	r4,r2
1000ea28:	01400304 	movi	r5,12
1000ea2c:	000a67c0 	call	1000a67c <__mulsi3>
1000ea30:	8085883a 	add	r2,r16,r2
1000ea34:	10800204 	addi	r2,r2,8
1000ea38:	10c00017 	ldw	r3,0(r2)
1000ea3c:	e0bffb17 	ldw	r2,-20(fp)
1000ea40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000ea44:	e13ffa17 	ldw	r4,-24(fp)
1000ea48:	000d6140 	call	1000d614 <alt_release_fd>
  }
} 
1000ea4c:	e6ffff04 	addi	sp,fp,-4
1000ea50:	dfc00217 	ldw	ra,8(sp)
1000ea54:	df000117 	ldw	fp,4(sp)
1000ea58:	dc000017 	ldw	r16,0(sp)
1000ea5c:	dec00304 	addi	sp,sp,12
1000ea60:	f800283a 	ret

1000ea64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000ea64:	defffb04 	addi	sp,sp,-20
1000ea68:	dfc00415 	stw	ra,16(sp)
1000ea6c:	df000315 	stw	fp,12(sp)
1000ea70:	df000304 	addi	fp,sp,12
1000ea74:	e13ffd15 	stw	r4,-12(fp)
1000ea78:	e17ffe15 	stw	r5,-8(fp)
1000ea7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000ea80:	01040074 	movhi	r4,4097
1000ea84:	21006804 	addi	r4,r4,416
1000ea88:	e17ffd17 	ldw	r5,-12(fp)
1000ea8c:	01800044 	movi	r6,1
1000ea90:	01c07fc4 	movi	r7,511
1000ea94:	000e9840 	call	1000e984 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000ea98:	01040074 	movhi	r4,4097
1000ea9c:	21006504 	addi	r4,r4,404
1000eaa0:	e17ffe17 	ldw	r5,-8(fp)
1000eaa4:	000d883a 	mov	r6,zero
1000eaa8:	01c07fc4 	movi	r7,511
1000eaac:	000e9840 	call	1000e984 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000eab0:	01040074 	movhi	r4,4097
1000eab4:	21006b04 	addi	r4,r4,428
1000eab8:	e17fff17 	ldw	r5,-4(fp)
1000eabc:	01800044 	movi	r6,1
1000eac0:	01c07fc4 	movi	r7,511
1000eac4:	000e9840 	call	1000e984 <alt_open_fd>
}  
1000eac8:	e037883a 	mov	sp,fp
1000eacc:	dfc00117 	ldw	ra,4(sp)
1000ead0:	df000017 	ldw	fp,0(sp)
1000ead4:	dec00204 	addi	sp,sp,8
1000ead8:	f800283a 	ret

1000eadc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000eadc:	defffe04 	addi	sp,sp,-8
1000eae0:	dfc00115 	stw	ra,4(sp)
1000eae4:	df000015 	stw	fp,0(sp)
1000eae8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eaec:	00840074 	movhi	r2,4097
1000eaf0:	1084ea04 	addi	r2,r2,5032
1000eaf4:	10800017 	ldw	r2,0(r2)
1000eaf8:	10000526 	beq	r2,zero,1000eb10 <alt_get_errno+0x34>
1000eafc:	00840074 	movhi	r2,4097
1000eb00:	1084ea04 	addi	r2,r2,5032
1000eb04:	10800017 	ldw	r2,0(r2)
1000eb08:	103ee83a 	callr	r2
1000eb0c:	00000206 	br	1000eb18 <alt_get_errno+0x3c>
1000eb10:	00840074 	movhi	r2,4097
1000eb14:	108bb204 	addi	r2,r2,11976
}
1000eb18:	e037883a 	mov	sp,fp
1000eb1c:	dfc00117 	ldw	ra,4(sp)
1000eb20:	df000017 	ldw	fp,0(sp)
1000eb24:	dec00204 	addi	sp,sp,8
1000eb28:	f800283a 	ret

1000eb2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000eb2c:	defffb04 	addi	sp,sp,-20
1000eb30:	dfc00415 	stw	ra,16(sp)
1000eb34:	df000315 	stw	fp,12(sp)
1000eb38:	dc000215 	stw	r16,8(sp)
1000eb3c:	df000304 	addi	fp,sp,12
1000eb40:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000eb44:	e0bffe17 	ldw	r2,-8(fp)
1000eb48:	10800217 	ldw	r2,8(r2)
1000eb4c:	10d00034 	orhi	r3,r2,16384
1000eb50:	e0bffe17 	ldw	r2,-8(fp)
1000eb54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000eb58:	e03ffd15 	stw	zero,-12(fp)
1000eb5c:	00002306 	br	1000ebec <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000eb60:	04040074 	movhi	r16,4097
1000eb64:	84006504 	addi	r16,r16,404
1000eb68:	e0bffd17 	ldw	r2,-12(fp)
1000eb6c:	1009883a 	mov	r4,r2
1000eb70:	01400304 	movi	r5,12
1000eb74:	000a67c0 	call	1000a67c <__mulsi3>
1000eb78:	8085883a 	add	r2,r16,r2
1000eb7c:	10c00017 	ldw	r3,0(r2)
1000eb80:	e0bffe17 	ldw	r2,-8(fp)
1000eb84:	10800017 	ldw	r2,0(r2)
1000eb88:	1880151e 	bne	r3,r2,1000ebe0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000eb8c:	04040074 	movhi	r16,4097
1000eb90:	84006504 	addi	r16,r16,404
1000eb94:	e0bffd17 	ldw	r2,-12(fp)
1000eb98:	1009883a 	mov	r4,r2
1000eb9c:	01400304 	movi	r5,12
1000eba0:	000a67c0 	call	1000a67c <__mulsi3>
1000eba4:	8085883a 	add	r2,r16,r2
1000eba8:	10800204 	addi	r2,r2,8
1000ebac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000ebb0:	10000b0e 	bge	r2,zero,1000ebe0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000ebb4:	e13ffd17 	ldw	r4,-12(fp)
1000ebb8:	01400304 	movi	r5,12
1000ebbc:	000a67c0 	call	1000a67c <__mulsi3>
1000ebc0:	1007883a 	mov	r3,r2
1000ebc4:	00840074 	movhi	r2,4097
1000ebc8:	10806504 	addi	r2,r2,404
1000ebcc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000ebd0:	e0bffe17 	ldw	r2,-8(fp)
1000ebd4:	18800226 	beq	r3,r2,1000ebe0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000ebd8:	00bffcc4 	movi	r2,-13
1000ebdc:	00000a06 	br	1000ec08 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000ebe0:	e0bffd17 	ldw	r2,-12(fp)
1000ebe4:	10800044 	addi	r2,r2,1
1000ebe8:	e0bffd15 	stw	r2,-12(fp)
1000ebec:	00840074 	movhi	r2,4097
1000ebf0:	1084e904 	addi	r2,r2,5028
1000ebf4:	10800017 	ldw	r2,0(r2)
1000ebf8:	1007883a 	mov	r3,r2
1000ebfc:	e0bffd17 	ldw	r2,-12(fp)
1000ec00:	18bfd72e 	bgeu	r3,r2,1000eb60 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000ec04:	0005883a 	mov	r2,zero
}
1000ec08:	e6ffff04 	addi	sp,fp,-4
1000ec0c:	dfc00217 	ldw	ra,8(sp)
1000ec10:	df000117 	ldw	fp,4(sp)
1000ec14:	dc000017 	ldw	r16,0(sp)
1000ec18:	dec00304 	addi	sp,sp,12
1000ec1c:	f800283a 	ret

1000ec20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000ec20:	defff604 	addi	sp,sp,-40
1000ec24:	dfc00915 	stw	ra,36(sp)
1000ec28:	df000815 	stw	fp,32(sp)
1000ec2c:	df000804 	addi	fp,sp,32
1000ec30:	e13ffd15 	stw	r4,-12(fp)
1000ec34:	e17ffe15 	stw	r5,-8(fp)
1000ec38:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000ec3c:	00bfffc4 	movi	r2,-1
1000ec40:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000ec44:	00bffb44 	movi	r2,-19
1000ec48:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000ec4c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000ec50:	e13ffd17 	ldw	r4,-12(fp)
1000ec54:	01440074 	movhi	r5,4097
1000ec58:	2944e704 	addi	r5,r5,5020
1000ec5c:	000ef3c0 	call	1000ef3c <alt_find_dev>
1000ec60:	e0bff815 	stw	r2,-32(fp)
1000ec64:	e0bff817 	ldw	r2,-32(fp)
1000ec68:	1000051e 	bne	r2,zero,1000ec80 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000ec6c:	e13ffd17 	ldw	r4,-12(fp)
1000ec70:	000efcc0 	call	1000efcc <alt_find_file>
1000ec74:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000ec78:	00800044 	movi	r2,1
1000ec7c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000ec80:	e0bff817 	ldw	r2,-32(fp)
1000ec84:	10002b26 	beq	r2,zero,1000ed34 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000ec88:	e13ff817 	ldw	r4,-32(fp)
1000ec8c:	000f0e00 	call	1000f0e0 <alt_get_fd>
1000ec90:	e0bff915 	stw	r2,-28(fp)
1000ec94:	e0bff917 	ldw	r2,-28(fp)
1000ec98:	1000030e 	bge	r2,zero,1000eca8 <open+0x88>
    {
      status = index;
1000ec9c:	e0bff917 	ldw	r2,-28(fp)
1000eca0:	e0bffa15 	stw	r2,-24(fp)
1000eca4:	00002506 	br	1000ed3c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000eca8:	e13ff917 	ldw	r4,-28(fp)
1000ecac:	01400304 	movi	r5,12
1000ecb0:	000a67c0 	call	1000a67c <__mulsi3>
1000ecb4:	1007883a 	mov	r3,r2
1000ecb8:	00840074 	movhi	r2,4097
1000ecbc:	10806504 	addi	r2,r2,404
1000ecc0:	1885883a 	add	r2,r3,r2
1000ecc4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000ecc8:	e0fffe17 	ldw	r3,-8(fp)
1000eccc:	00900034 	movhi	r2,16384
1000ecd0:	10bfffc4 	addi	r2,r2,-1
1000ecd4:	1886703a 	and	r3,r3,r2
1000ecd8:	e0bffc17 	ldw	r2,-16(fp)
1000ecdc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000ece0:	e0bffb17 	ldw	r2,-20(fp)
1000ece4:	1000051e 	bne	r2,zero,1000ecfc <open+0xdc>
1000ece8:	e13ffc17 	ldw	r4,-16(fp)
1000ecec:	000eb2c0 	call	1000eb2c <alt_file_locked>
1000ecf0:	e0bffa15 	stw	r2,-24(fp)
1000ecf4:	e0bffa17 	ldw	r2,-24(fp)
1000ecf8:	10001016 	blt	r2,zero,1000ed3c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000ecfc:	e0bff817 	ldw	r2,-32(fp)
1000ed00:	10800317 	ldw	r2,12(r2)
1000ed04:	10000826 	beq	r2,zero,1000ed28 <open+0x108>
1000ed08:	e0bff817 	ldw	r2,-32(fp)
1000ed0c:	10800317 	ldw	r2,12(r2)
1000ed10:	e13ffc17 	ldw	r4,-16(fp)
1000ed14:	e17ffd17 	ldw	r5,-12(fp)
1000ed18:	e1bffe17 	ldw	r6,-8(fp)
1000ed1c:	e1ffff17 	ldw	r7,-4(fp)
1000ed20:	103ee83a 	callr	r2
1000ed24:	00000106 	br	1000ed2c <open+0x10c>
1000ed28:	0005883a 	mov	r2,zero
1000ed2c:	e0bffa15 	stw	r2,-24(fp)
1000ed30:	00000206 	br	1000ed3c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000ed34:	00bffb44 	movi	r2,-19
1000ed38:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000ed3c:	e0bffa17 	ldw	r2,-24(fp)
1000ed40:	1000090e 	bge	r2,zero,1000ed68 <open+0x148>
  {
    alt_release_fd (index);  
1000ed44:	e13ff917 	ldw	r4,-28(fp)
1000ed48:	000d6140 	call	1000d614 <alt_release_fd>
    ALT_ERRNO = -status;
1000ed4c:	000eadc0 	call	1000eadc <alt_get_errno>
1000ed50:	1007883a 	mov	r3,r2
1000ed54:	e0bffa17 	ldw	r2,-24(fp)
1000ed58:	0085c83a 	sub	r2,zero,r2
1000ed5c:	18800015 	stw	r2,0(r3)
    return -1;
1000ed60:	00bfffc4 	movi	r2,-1
1000ed64:	00000106 	br	1000ed6c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
1000ed68:	e0bff917 	ldw	r2,-28(fp)
}
1000ed6c:	e037883a 	mov	sp,fp
1000ed70:	dfc00117 	ldw	ra,4(sp)
1000ed74:	df000017 	ldw	fp,0(sp)
1000ed78:	dec00204 	addi	sp,sp,8
1000ed7c:	f800283a 	ret

1000ed80 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000ed80:	defffa04 	addi	sp,sp,-24
1000ed84:	df000515 	stw	fp,20(sp)
1000ed88:	df000504 	addi	fp,sp,20
1000ed8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ed90:	0005303a 	rdctl	r2,status
1000ed94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ed98:	e0fffc17 	ldw	r3,-16(fp)
1000ed9c:	00bfff84 	movi	r2,-2
1000eda0:	1884703a 	and	r2,r3,r2
1000eda4:	1001703a 	wrctl	status,r2
  
  return context;
1000eda8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000edac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000edb0:	e0bfff17 	ldw	r2,-4(fp)
1000edb4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000edb8:	e0bffd17 	ldw	r2,-12(fp)
1000edbc:	10800017 	ldw	r2,0(r2)
1000edc0:	e0fffd17 	ldw	r3,-12(fp)
1000edc4:	18c00117 	ldw	r3,4(r3)
1000edc8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000edcc:	e0bffd17 	ldw	r2,-12(fp)
1000edd0:	10800117 	ldw	r2,4(r2)
1000edd4:	e0fffd17 	ldw	r3,-12(fp)
1000edd8:	18c00017 	ldw	r3,0(r3)
1000eddc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000ede0:	e0bffd17 	ldw	r2,-12(fp)
1000ede4:	e0fffd17 	ldw	r3,-12(fp)
1000ede8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000edec:	e0bffd17 	ldw	r2,-12(fp)
1000edf0:	e0fffd17 	ldw	r3,-12(fp)
1000edf4:	10c00015 	stw	r3,0(r2)
1000edf8:	e0bffb17 	ldw	r2,-20(fp)
1000edfc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ee00:	e0bffe17 	ldw	r2,-8(fp)
1000ee04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000ee08:	e037883a 	mov	sp,fp
1000ee0c:	df000017 	ldw	fp,0(sp)
1000ee10:	dec00104 	addi	sp,sp,4
1000ee14:	f800283a 	ret

1000ee18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000ee18:	defffb04 	addi	sp,sp,-20
1000ee1c:	dfc00415 	stw	ra,16(sp)
1000ee20:	df000315 	stw	fp,12(sp)
1000ee24:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000ee28:	d0a01017 	ldw	r2,-32704(gp)
1000ee2c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000ee30:	d0a6db17 	ldw	r2,-25748(gp)
1000ee34:	10800044 	addi	r2,r2,1
1000ee38:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000ee3c:	00002e06 	br	1000eef8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000ee40:	e0bffd17 	ldw	r2,-12(fp)
1000ee44:	10800017 	ldw	r2,0(r2)
1000ee48:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000ee4c:	e0bffd17 	ldw	r2,-12(fp)
1000ee50:	10800403 	ldbu	r2,16(r2)
1000ee54:	10803fcc 	andi	r2,r2,255
1000ee58:	10000426 	beq	r2,zero,1000ee6c <alt_tick+0x54>
1000ee5c:	d0a6db17 	ldw	r2,-25748(gp)
1000ee60:	1000021e 	bne	r2,zero,1000ee6c <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000ee64:	e0bffd17 	ldw	r2,-12(fp)
1000ee68:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000ee6c:	e0bffd17 	ldw	r2,-12(fp)
1000ee70:	10800217 	ldw	r2,8(r2)
1000ee74:	d0e6db17 	ldw	r3,-25748(gp)
1000ee78:	18801d36 	bltu	r3,r2,1000eef0 <alt_tick+0xd8>
1000ee7c:	e0bffd17 	ldw	r2,-12(fp)
1000ee80:	10800403 	ldbu	r2,16(r2)
1000ee84:	10803fcc 	andi	r2,r2,255
1000ee88:	1000191e 	bne	r2,zero,1000eef0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000ee8c:	e0bffd17 	ldw	r2,-12(fp)
1000ee90:	10800317 	ldw	r2,12(r2)
1000ee94:	e0fffd17 	ldw	r3,-12(fp)
1000ee98:	18c00517 	ldw	r3,20(r3)
1000ee9c:	1809883a 	mov	r4,r3
1000eea0:	103ee83a 	callr	r2
1000eea4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000eea8:	e0bfff17 	ldw	r2,-4(fp)
1000eeac:	1000031e 	bne	r2,zero,1000eebc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000eeb0:	e13ffd17 	ldw	r4,-12(fp)
1000eeb4:	000ed800 	call	1000ed80 <alt_alarm_stop>
1000eeb8:	00000d06 	br	1000eef0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000eebc:	e0bffd17 	ldw	r2,-12(fp)
1000eec0:	10c00217 	ldw	r3,8(r2)
1000eec4:	e0bfff17 	ldw	r2,-4(fp)
1000eec8:	1887883a 	add	r3,r3,r2
1000eecc:	e0bffd17 	ldw	r2,-12(fp)
1000eed0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000eed4:	e0bffd17 	ldw	r2,-12(fp)
1000eed8:	10c00217 	ldw	r3,8(r2)
1000eedc:	d0a6db17 	ldw	r2,-25748(gp)
1000eee0:	1880032e 	bgeu	r3,r2,1000eef0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000eee4:	e0bffd17 	ldw	r2,-12(fp)
1000eee8:	00c00044 	movi	r3,1
1000eeec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000eef0:	e0bffe17 	ldw	r2,-8(fp)
1000eef4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000eef8:	e0fffd17 	ldw	r3,-12(fp)
1000eefc:	d0a01004 	addi	r2,gp,-32704
1000ef00:	18bfcf1e 	bne	r3,r2,1000ee40 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000ef04:	0001883a 	nop
}
1000ef08:	e037883a 	mov	sp,fp
1000ef0c:	dfc00117 	ldw	ra,4(sp)
1000ef10:	df000017 	ldw	fp,0(sp)
1000ef14:	dec00204 	addi	sp,sp,8
1000ef18:	f800283a 	ret

1000ef1c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
1000ef1c:	deffff04 	addi	sp,sp,-4
1000ef20:	df000015 	stw	fp,0(sp)
1000ef24:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000ef28:	000170fa 	wrctl	ienable,zero
}
1000ef2c:	e037883a 	mov	sp,fp
1000ef30:	df000017 	ldw	fp,0(sp)
1000ef34:	dec00104 	addi	sp,sp,4
1000ef38:	f800283a 	ret

1000ef3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000ef3c:	defffa04 	addi	sp,sp,-24
1000ef40:	dfc00515 	stw	ra,20(sp)
1000ef44:	df000415 	stw	fp,16(sp)
1000ef48:	df000404 	addi	fp,sp,16
1000ef4c:	e13ffe15 	stw	r4,-8(fp)
1000ef50:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000ef54:	e0bfff17 	ldw	r2,-4(fp)
1000ef58:	10800017 	ldw	r2,0(r2)
1000ef5c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000ef60:	e13ffe17 	ldw	r4,-8(fp)
1000ef64:	00005080 	call	10000508 <strlen>
1000ef68:	10800044 	addi	r2,r2,1
1000ef6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000ef70:	00000d06 	br	1000efa8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000ef74:	e0bffc17 	ldw	r2,-16(fp)
1000ef78:	10c00217 	ldw	r3,8(r2)
1000ef7c:	e0bffd17 	ldw	r2,-12(fp)
1000ef80:	1809883a 	mov	r4,r3
1000ef84:	e17ffe17 	ldw	r5,-8(fp)
1000ef88:	100d883a 	mov	r6,r2
1000ef8c:	000f2000 	call	1000f200 <memcmp>
1000ef90:	1000021e 	bne	r2,zero,1000ef9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000ef94:	e0bffc17 	ldw	r2,-16(fp)
1000ef98:	00000706 	br	1000efb8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000ef9c:	e0bffc17 	ldw	r2,-16(fp)
1000efa0:	10800017 	ldw	r2,0(r2)
1000efa4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000efa8:	e0fffc17 	ldw	r3,-16(fp)
1000efac:	e0bfff17 	ldw	r2,-4(fp)
1000efb0:	18bff01e 	bne	r3,r2,1000ef74 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000efb4:	0005883a 	mov	r2,zero
}
1000efb8:	e037883a 	mov	sp,fp
1000efbc:	dfc00117 	ldw	ra,4(sp)
1000efc0:	df000017 	ldw	fp,0(sp)
1000efc4:	dec00204 	addi	sp,sp,8
1000efc8:	f800283a 	ret

1000efcc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000efcc:	defffb04 	addi	sp,sp,-20
1000efd0:	dfc00415 	stw	ra,16(sp)
1000efd4:	df000315 	stw	fp,12(sp)
1000efd8:	df000304 	addi	fp,sp,12
1000efdc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000efe0:	00840074 	movhi	r2,4097
1000efe4:	1084e504 	addi	r2,r2,5012
1000efe8:	10800017 	ldw	r2,0(r2)
1000efec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000eff0:	00003106 	br	1000f0b8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000eff4:	e0bffd17 	ldw	r2,-12(fp)
1000eff8:	10800217 	ldw	r2,8(r2)
1000effc:	1009883a 	mov	r4,r2
1000f000:	00005080 	call	10000508 <strlen>
1000f004:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000f008:	e0bffd17 	ldw	r2,-12(fp)
1000f00c:	10c00217 	ldw	r3,8(r2)
1000f010:	e0bffe17 	ldw	r2,-8(fp)
1000f014:	10bfffc4 	addi	r2,r2,-1
1000f018:	1885883a 	add	r2,r3,r2
1000f01c:	10800003 	ldbu	r2,0(r2)
1000f020:	10803fcc 	andi	r2,r2,255
1000f024:	1080201c 	xori	r2,r2,128
1000f028:	10bfe004 	addi	r2,r2,-128
1000f02c:	10800bd8 	cmpnei	r2,r2,47
1000f030:	1000031e 	bne	r2,zero,1000f040 <alt_find_file+0x74>
    {
      len -= 1;
1000f034:	e0bffe17 	ldw	r2,-8(fp)
1000f038:	10bfffc4 	addi	r2,r2,-1
1000f03c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f040:	e0bffe17 	ldw	r2,-8(fp)
1000f044:	e0ffff17 	ldw	r3,-4(fp)
1000f048:	1885883a 	add	r2,r3,r2
1000f04c:	10800003 	ldbu	r2,0(r2)
1000f050:	10803fcc 	andi	r2,r2,255
1000f054:	1080201c 	xori	r2,r2,128
1000f058:	10bfe004 	addi	r2,r2,-128
1000f05c:	10800be0 	cmpeqi	r2,r2,47
1000f060:	1000081e 	bne	r2,zero,1000f084 <alt_find_file+0xb8>
1000f064:	e0bffe17 	ldw	r2,-8(fp)
1000f068:	e0ffff17 	ldw	r3,-4(fp)
1000f06c:	1885883a 	add	r2,r3,r2
1000f070:	10800003 	ldbu	r2,0(r2)
1000f074:	10803fcc 	andi	r2,r2,255
1000f078:	1080201c 	xori	r2,r2,128
1000f07c:	10bfe004 	addi	r2,r2,-128
1000f080:	10000a1e 	bne	r2,zero,1000f0ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000f084:	e0bffd17 	ldw	r2,-12(fp)
1000f088:	10c00217 	ldw	r3,8(r2)
1000f08c:	e0bffe17 	ldw	r2,-8(fp)
1000f090:	1809883a 	mov	r4,r3
1000f094:	e17fff17 	ldw	r5,-4(fp)
1000f098:	100d883a 	mov	r6,r2
1000f09c:	000f2000 	call	1000f200 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f0a0:	1000021e 	bne	r2,zero,1000f0ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000f0a4:	e0bffd17 	ldw	r2,-12(fp)
1000f0a8:	00000806 	br	1000f0cc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000f0ac:	e0bffd17 	ldw	r2,-12(fp)
1000f0b0:	10800017 	ldw	r2,0(r2)
1000f0b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f0b8:	e0fffd17 	ldw	r3,-12(fp)
1000f0bc:	00840074 	movhi	r2,4097
1000f0c0:	1084e504 	addi	r2,r2,5012
1000f0c4:	18bfcb1e 	bne	r3,r2,1000eff4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000f0c8:	0005883a 	mov	r2,zero
}
1000f0cc:	e037883a 	mov	sp,fp
1000f0d0:	dfc00117 	ldw	ra,4(sp)
1000f0d4:	df000017 	ldw	fp,0(sp)
1000f0d8:	dec00204 	addi	sp,sp,8
1000f0dc:	f800283a 	ret

1000f0e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000f0e0:	defffa04 	addi	sp,sp,-24
1000f0e4:	dfc00515 	stw	ra,20(sp)
1000f0e8:	df000415 	stw	fp,16(sp)
1000f0ec:	dc000315 	stw	r16,12(sp)
1000f0f0:	df000404 	addi	fp,sp,16
1000f0f4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000f0f8:	00bffa04 	movi	r2,-24
1000f0fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f100:	e03ffc15 	stw	zero,-16(fp)
1000f104:	00002106 	br	1000f18c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000f108:	04040074 	movhi	r16,4097
1000f10c:	84006504 	addi	r16,r16,404
1000f110:	e0bffc17 	ldw	r2,-16(fp)
1000f114:	1009883a 	mov	r4,r2
1000f118:	01400304 	movi	r5,12
1000f11c:	000a67c0 	call	1000a67c <__mulsi3>
1000f120:	8085883a 	add	r2,r16,r2
1000f124:	10800017 	ldw	r2,0(r2)
1000f128:	1000151e 	bne	r2,zero,1000f180 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000f12c:	04040074 	movhi	r16,4097
1000f130:	84006504 	addi	r16,r16,404
1000f134:	e0bffc17 	ldw	r2,-16(fp)
1000f138:	1009883a 	mov	r4,r2
1000f13c:	01400304 	movi	r5,12
1000f140:	000a67c0 	call	1000a67c <__mulsi3>
1000f144:	8085883a 	add	r2,r16,r2
1000f148:	e0fffe17 	ldw	r3,-8(fp)
1000f14c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000f150:	00840074 	movhi	r2,4097
1000f154:	1084e904 	addi	r2,r2,5028
1000f158:	10c00017 	ldw	r3,0(r2)
1000f15c:	e0bffc17 	ldw	r2,-16(fp)
1000f160:	1880040e 	bge	r3,r2,1000f174 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000f164:	00840074 	movhi	r2,4097
1000f168:	1084e904 	addi	r2,r2,5028
1000f16c:	e0fffc17 	ldw	r3,-16(fp)
1000f170:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000f174:	e0bffc17 	ldw	r2,-16(fp)
1000f178:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000f17c:	00000606 	br	1000f198 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f180:	e0bffc17 	ldw	r2,-16(fp)
1000f184:	10800044 	addi	r2,r2,1
1000f188:	e0bffc15 	stw	r2,-16(fp)
1000f18c:	e0bffc17 	ldw	r2,-16(fp)
1000f190:	10800810 	cmplti	r2,r2,32
1000f194:	103fdc1e 	bne	r2,zero,1000f108 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000f198:	e0bffd17 	ldw	r2,-12(fp)
}
1000f19c:	e6ffff04 	addi	sp,fp,-4
1000f1a0:	dfc00217 	ldw	ra,8(sp)
1000f1a4:	df000117 	ldw	fp,4(sp)
1000f1a8:	dc000017 	ldw	r16,0(sp)
1000f1ac:	dec00304 	addi	sp,sp,12
1000f1b0:	f800283a 	ret

1000f1b4 <atexit>:
1000f1b4:	200b883a 	mov	r5,r4
1000f1b8:	000d883a 	mov	r6,zero
1000f1bc:	0009883a 	mov	r4,zero
1000f1c0:	000f883a 	mov	r7,zero
1000f1c4:	000f27c1 	jmpi	1000f27c <__register_exitproc>

1000f1c8 <exit>:
1000f1c8:	defffe04 	addi	sp,sp,-8
1000f1cc:	000b883a 	mov	r5,zero
1000f1d0:	dc000015 	stw	r16,0(sp)
1000f1d4:	dfc00115 	stw	ra,4(sp)
1000f1d8:	2021883a 	mov	r16,r4
1000f1dc:	000f3900 	call	1000f390 <__call_exitprocs>
1000f1e0:	00840074 	movhi	r2,4097
1000f1e4:	1084df04 	addi	r2,r2,4988
1000f1e8:	11000017 	ldw	r4,0(r2)
1000f1ec:	20800f17 	ldw	r2,60(r4)
1000f1f0:	10000126 	beq	r2,zero,1000f1f8 <exit+0x30>
1000f1f4:	103ee83a 	callr	r2
1000f1f8:	8009883a 	mov	r4,r16
1000f1fc:	000f5240 	call	1000f524 <_exit>

1000f200 <memcmp>:
1000f200:	01c000c4 	movi	r7,3
1000f204:	3980192e 	bgeu	r7,r6,1000f26c <memcmp+0x6c>
1000f208:	2144b03a 	or	r2,r4,r5
1000f20c:	11c4703a 	and	r2,r2,r7
1000f210:	10000f26 	beq	r2,zero,1000f250 <memcmp+0x50>
1000f214:	20800003 	ldbu	r2,0(r4)
1000f218:	28c00003 	ldbu	r3,0(r5)
1000f21c:	10c0151e 	bne	r2,r3,1000f274 <memcmp+0x74>
1000f220:	31bfff84 	addi	r6,r6,-2
1000f224:	01ffffc4 	movi	r7,-1
1000f228:	00000406 	br	1000f23c <memcmp+0x3c>
1000f22c:	20800003 	ldbu	r2,0(r4)
1000f230:	28c00003 	ldbu	r3,0(r5)
1000f234:	31bfffc4 	addi	r6,r6,-1
1000f238:	10c00e1e 	bne	r2,r3,1000f274 <memcmp+0x74>
1000f23c:	21000044 	addi	r4,r4,1
1000f240:	29400044 	addi	r5,r5,1
1000f244:	31fff91e 	bne	r6,r7,1000f22c <memcmp+0x2c>
1000f248:	0005883a 	mov	r2,zero
1000f24c:	f800283a 	ret
1000f250:	20c00017 	ldw	r3,0(r4)
1000f254:	28800017 	ldw	r2,0(r5)
1000f258:	1880041e 	bne	r3,r2,1000f26c <memcmp+0x6c>
1000f25c:	31bfff04 	addi	r6,r6,-4
1000f260:	21000104 	addi	r4,r4,4
1000f264:	29400104 	addi	r5,r5,4
1000f268:	39bff936 	bltu	r7,r6,1000f250 <memcmp+0x50>
1000f26c:	303fe91e 	bne	r6,zero,1000f214 <memcmp+0x14>
1000f270:	003ff506 	br	1000f248 <memcmp+0x48>
1000f274:	10c5c83a 	sub	r2,r2,r3
1000f278:	f800283a 	ret

1000f27c <__register_exitproc>:
1000f27c:	00840074 	movhi	r2,4097
1000f280:	defffa04 	addi	sp,sp,-24
1000f284:	1084df04 	addi	r2,r2,4988
1000f288:	dc000315 	stw	r16,12(sp)
1000f28c:	14000017 	ldw	r16,0(r2)
1000f290:	dc400415 	stw	r17,16(sp)
1000f294:	dfc00515 	stw	ra,20(sp)
1000f298:	80805217 	ldw	r2,328(r16)
1000f29c:	2023883a 	mov	r17,r4
1000f2a0:	10003626 	beq	r2,zero,1000f37c <__register_exitproc+0x100>
1000f2a4:	10c00117 	ldw	r3,4(r2)
1000f2a8:	010007c4 	movi	r4,31
1000f2ac:	20c00e16 	blt	r4,r3,1000f2e8 <__register_exitproc+0x6c>
1000f2b0:	1a400044 	addi	r9,r3,1
1000f2b4:	8800211e 	bne	r17,zero,1000f33c <__register_exitproc+0xc0>
1000f2b8:	18c00084 	addi	r3,r3,2
1000f2bc:	18c7883a 	add	r3,r3,r3
1000f2c0:	18c7883a 	add	r3,r3,r3
1000f2c4:	12400115 	stw	r9,4(r2)
1000f2c8:	10c7883a 	add	r3,r2,r3
1000f2cc:	19400015 	stw	r5,0(r3)
1000f2d0:	0005883a 	mov	r2,zero
1000f2d4:	dfc00517 	ldw	ra,20(sp)
1000f2d8:	dc400417 	ldw	r17,16(sp)
1000f2dc:	dc000317 	ldw	r16,12(sp)
1000f2e0:	dec00604 	addi	sp,sp,24
1000f2e4:	f800283a 	ret
1000f2e8:	00800034 	movhi	r2,0
1000f2ec:	10800004 	addi	r2,r2,0
1000f2f0:	10002526 	beq	r2,zero,1000f388 <__register_exitproc+0x10c>
1000f2f4:	01006404 	movi	r4,400
1000f2f8:	d9400015 	stw	r5,0(sp)
1000f2fc:	d9800115 	stw	r6,4(sp)
1000f300:	d9c00215 	stw	r7,8(sp)
1000f304:	00000000 	call	10000000 <__alt_mem_sdram>
1000f308:	d9400017 	ldw	r5,0(sp)
1000f30c:	d9800117 	ldw	r6,4(sp)
1000f310:	d9c00217 	ldw	r7,8(sp)
1000f314:	10001c26 	beq	r2,zero,1000f388 <__register_exitproc+0x10c>
1000f318:	80c05217 	ldw	r3,328(r16)
1000f31c:	10000115 	stw	zero,4(r2)
1000f320:	02400044 	movi	r9,1
1000f324:	10c00015 	stw	r3,0(r2)
1000f328:	80805215 	stw	r2,328(r16)
1000f32c:	10006215 	stw	zero,392(r2)
1000f330:	10006315 	stw	zero,396(r2)
1000f334:	0007883a 	mov	r3,zero
1000f338:	883fdf26 	beq	r17,zero,1000f2b8 <__register_exitproc+0x3c>
1000f33c:	18d1883a 	add	r8,r3,r3
1000f340:	4211883a 	add	r8,r8,r8
1000f344:	1211883a 	add	r8,r2,r8
1000f348:	41802215 	stw	r6,136(r8)
1000f34c:	01000044 	movi	r4,1
1000f350:	11806217 	ldw	r6,392(r2)
1000f354:	20c8983a 	sll	r4,r4,r3
1000f358:	310cb03a 	or	r6,r6,r4
1000f35c:	11806215 	stw	r6,392(r2)
1000f360:	41c04215 	stw	r7,264(r8)
1000f364:	01800084 	movi	r6,2
1000f368:	89bfd31e 	bne	r17,r6,1000f2b8 <__register_exitproc+0x3c>
1000f36c:	11806317 	ldw	r6,396(r2)
1000f370:	3108b03a 	or	r4,r6,r4
1000f374:	11006315 	stw	r4,396(r2)
1000f378:	003fcf06 	br	1000f2b8 <__register_exitproc+0x3c>
1000f37c:	80805304 	addi	r2,r16,332
1000f380:	80805215 	stw	r2,328(r16)
1000f384:	003fc706 	br	1000f2a4 <__register_exitproc+0x28>
1000f388:	00bfffc4 	movi	r2,-1
1000f38c:	003fd106 	br	1000f2d4 <__register_exitproc+0x58>

1000f390 <__call_exitprocs>:
1000f390:	00840074 	movhi	r2,4097
1000f394:	1084df04 	addi	r2,r2,4988
1000f398:	10800017 	ldw	r2,0(r2)
1000f39c:	defff404 	addi	sp,sp,-48
1000f3a0:	dd800815 	stw	r22,32(sp)
1000f3a4:	d8800015 	stw	r2,0(sp)
1000f3a8:	10805204 	addi	r2,r2,328
1000f3ac:	dd000615 	stw	r20,24(sp)
1000f3b0:	dc800415 	stw	r18,16(sp)
1000f3b4:	dfc00b15 	stw	ra,44(sp)
1000f3b8:	df000a15 	stw	fp,40(sp)
1000f3bc:	ddc00915 	stw	r23,36(sp)
1000f3c0:	dd400715 	stw	r21,28(sp)
1000f3c4:	dcc00515 	stw	r19,20(sp)
1000f3c8:	dc400315 	stw	r17,12(sp)
1000f3cc:	dc000215 	stw	r16,8(sp)
1000f3d0:	2025883a 	mov	r18,r4
1000f3d4:	2829883a 	mov	r20,r5
1000f3d8:	d8800115 	stw	r2,4(sp)
1000f3dc:	05bfffc4 	movi	r22,-1
1000f3e0:	d8800017 	ldw	r2,0(sp)
1000f3e4:	14c05217 	ldw	r19,328(r2)
1000f3e8:	98001d26 	beq	r19,zero,1000f460 <__call_exitprocs+0xd0>
1000f3ec:	dd400117 	ldw	r21,4(sp)
1000f3f0:	98800117 	ldw	r2,4(r19)
1000f3f4:	173fffc4 	addi	fp,r2,-1
1000f3f8:	e0000d16 	blt	fp,zero,1000f430 <__call_exitprocs+0xa0>
1000f3fc:	14000044 	addi	r16,r2,1
1000f400:	8421883a 	add	r16,r16,r16
1000f404:	8421883a 	add	r16,r16,r16
1000f408:	84402004 	addi	r17,r16,128
1000f40c:	9c63883a 	add	r17,r19,r17
1000f410:	9c21883a 	add	r16,r19,r16
1000f414:	a0001e26 	beq	r20,zero,1000f490 <__call_exitprocs+0x100>
1000f418:	80804017 	ldw	r2,256(r16)
1000f41c:	15001c26 	beq	r2,r20,1000f490 <__call_exitprocs+0x100>
1000f420:	e73fffc4 	addi	fp,fp,-1
1000f424:	843fff04 	addi	r16,r16,-4
1000f428:	8c7fff04 	addi	r17,r17,-4
1000f42c:	e5bff91e 	bne	fp,r22,1000f414 <__call_exitprocs+0x84>
1000f430:	00800034 	movhi	r2,0
1000f434:	10800004 	addi	r2,r2,0
1000f438:	10000926 	beq	r2,zero,1000f460 <__call_exitprocs+0xd0>
1000f43c:	98800117 	ldw	r2,4(r19)
1000f440:	1000311e 	bne	r2,zero,1000f508 <__call_exitprocs+0x178>
1000f444:	98800017 	ldw	r2,0(r19)
1000f448:	10003426 	beq	r2,zero,1000f51c <__call_exitprocs+0x18c>
1000f44c:	9809883a 	mov	r4,r19
1000f450:	a8800015 	stw	r2,0(r21)
1000f454:	00000000 	call	10000000 <__alt_mem_sdram>
1000f458:	acc00017 	ldw	r19,0(r21)
1000f45c:	983fe41e 	bne	r19,zero,1000f3f0 <__call_exitprocs+0x60>
1000f460:	dfc00b17 	ldw	ra,44(sp)
1000f464:	df000a17 	ldw	fp,40(sp)
1000f468:	ddc00917 	ldw	r23,36(sp)
1000f46c:	dd800817 	ldw	r22,32(sp)
1000f470:	dd400717 	ldw	r21,28(sp)
1000f474:	dd000617 	ldw	r20,24(sp)
1000f478:	dcc00517 	ldw	r19,20(sp)
1000f47c:	dc800417 	ldw	r18,16(sp)
1000f480:	dc400317 	ldw	r17,12(sp)
1000f484:	dc000217 	ldw	r16,8(sp)
1000f488:	dec00c04 	addi	sp,sp,48
1000f48c:	f800283a 	ret
1000f490:	98800117 	ldw	r2,4(r19)
1000f494:	80c00017 	ldw	r3,0(r16)
1000f498:	10bfffc4 	addi	r2,r2,-1
1000f49c:	17001526 	beq	r2,fp,1000f4f4 <__call_exitprocs+0x164>
1000f4a0:	80000015 	stw	zero,0(r16)
1000f4a4:	183fde26 	beq	r3,zero,1000f420 <__call_exitprocs+0x90>
1000f4a8:	00800044 	movi	r2,1
1000f4ac:	1708983a 	sll	r4,r2,fp
1000f4b0:	98806217 	ldw	r2,392(r19)
1000f4b4:	9dc00117 	ldw	r23,4(r19)
1000f4b8:	2084703a 	and	r2,r4,r2
1000f4bc:	1000061e 	bne	r2,zero,1000f4d8 <__call_exitprocs+0x148>
1000f4c0:	183ee83a 	callr	r3
1000f4c4:	98800117 	ldw	r2,4(r19)
1000f4c8:	15ffc51e 	bne	r2,r23,1000f3e0 <__call_exitprocs+0x50>
1000f4cc:	a8800017 	ldw	r2,0(r21)
1000f4d0:	14ffd326 	beq	r2,r19,1000f420 <__call_exitprocs+0x90>
1000f4d4:	003fc206 	br	1000f3e0 <__call_exitprocs+0x50>
1000f4d8:	98806317 	ldw	r2,396(r19)
1000f4dc:	2084703a 	and	r2,r4,r2
1000f4e0:	1000061e 	bne	r2,zero,1000f4fc <__call_exitprocs+0x16c>
1000f4e4:	89400017 	ldw	r5,0(r17)
1000f4e8:	9009883a 	mov	r4,r18
1000f4ec:	183ee83a 	callr	r3
1000f4f0:	003ff406 	br	1000f4c4 <__call_exitprocs+0x134>
1000f4f4:	9f000115 	stw	fp,4(r19)
1000f4f8:	003fea06 	br	1000f4a4 <__call_exitprocs+0x114>
1000f4fc:	89000017 	ldw	r4,0(r17)
1000f500:	183ee83a 	callr	r3
1000f504:	003fef06 	br	1000f4c4 <__call_exitprocs+0x134>
1000f508:	98800017 	ldw	r2,0(r19)
1000f50c:	982b883a 	mov	r21,r19
1000f510:	1027883a 	mov	r19,r2
1000f514:	983fb61e 	bne	r19,zero,1000f3f0 <__call_exitprocs+0x60>
1000f518:	003fd106 	br	1000f460 <__call_exitprocs+0xd0>
1000f51c:	0005883a 	mov	r2,zero
1000f520:	003ffa06 	br	1000f50c <__call_exitprocs+0x17c>

1000f524 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000f524:	defffd04 	addi	sp,sp,-12
1000f528:	df000215 	stw	fp,8(sp)
1000f52c:	df000204 	addi	fp,sp,8
1000f530:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000f534:	0001883a 	nop
1000f538:	e0bfff17 	ldw	r2,-4(fp)
1000f53c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000f540:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000f544:	10000226 	beq	r2,zero,1000f550 <_exit+0x2c>
    ALT_SIM_FAIL();
1000f548:	002af070 	cmpltui	zero,zero,43969
1000f54c:	00000106 	br	1000f554 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000f550:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000f554:	003fff06 	br	1000f554 <_exit+0x30>
